# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from helix.api_client import ApiClient
from helix.exceptions import (
    ApiTypeError,
    ApiValueError
)


class V1Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_alert_suppressions_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_create_with_http_info(**kwargs)  # noqa: E501

    def v1_alert_suppressions_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_alert_suppressions_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alert_suppressions_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alert_suppressions_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_list_with_http_info(**kwargs)  # noqa: E501

    def v1_alert_suppressions_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject1 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alert_suppressions_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject1 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alert_suppressions_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject2 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alert_suppressions_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject2 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alert_suppressions_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alert_suppressions_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alert_suppressions_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alert_suppressions_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing AlertSuppressions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alert_suppressions_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alert_suppressions_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alert_suppressions_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertSuppressions//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject4 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_create_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject4 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_execute_guided_search(self, var, **kwargs):  # noqa: E501
        """Executes a guided search for an alert.  # noqa: E501

        Executes a guided search for an alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_execute_guided_search(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject12 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_execute_guided_search_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_execute_guided_search_with_http_info(self, var, **kwargs):  # noqa: E501
        """Executes a guided search for an alert.  # noqa: E501

        Executes a guided search for an alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_execute_guided_search_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject12 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_execute_guided_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_execute_guided_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_get_alert_metrics(self, **kwargs):  # noqa: E501
        """Lists metrics for various alert fields.  # noqa: E501

        Lists metrics for various alert fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_alert_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_get_alert_metrics_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_get_alert_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Lists metrics for various alert fields.  # noqa: E501

        Lists metrics for various alert fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_alert_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_get_alert_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_get_classes_and_assets(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_classes_and_assets(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_get_classes_and_assets_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_get_classes_and_assets_with_http_info(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_classes_and_assets_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_get_classes_and_assets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_get_classes_and_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}/classesAndAssets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_get_unique_values(self, **kwargs):  # noqa: E501
        """Lists all alert fields, field values, and the number of occurrences of each.  # noqa: E501

        Lists all alert fields, field values, and the number of occurrences of each.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_unique_values(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_get_unique_values_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_get_unique_values_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all alert fields, field values, and the number of occurrences of each.  # noqa: E501

        Lists all alert fields, field values, and the number of occurrences of each.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_get_unique_values_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_get_unique_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_list_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_create(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Overrides the default 'create' method to perform validations  # noqa: E501

        Overrides the default 'create' method to perform validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_create(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject7 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_create_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_alerts_notes_create_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Overrides the default 'create' method to perform validations  # noqa: E501

        Overrides the default 'create' method to perform validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_create_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject7 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_delete(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_alerts_notes_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_delete(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_delete_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_alerts_notes_delete_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_alerts_notes_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_delete_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_delete_0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_delete_0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_delete_0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_alerts_notes_delete_0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_delete_0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_notes_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_list(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_alerts_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_list(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_list_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_alerts_notes_list_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_alerts_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_list_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_partial_update(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_partial_update(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject8 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_partial_update_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_alerts_notes_partial_update_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_partial_update_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject8 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_notes_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_partial_update0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_partial_update0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject9 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_partial_update0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_alerts_notes_partial_update0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_partial_update0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject9 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_notes_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_notes_read(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_read(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_notes_read_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_alerts_notes_read_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_alerts_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_notes_read_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_notes_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_alerts_notes_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_notes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{parent_lookup_object_id}/notes//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_overview_create(self, **kwargs):  # noqa: E501
        """Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501

        Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject15 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_overview_create_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_overview_create_with_http_info(self, **kwargs):  # noqa: E501
        """Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501

        Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject15 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_overview_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/overview/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_overview_get_unassigned_alert_overview(self, **kwargs):  # noqa: E501
        """Returns an overview of unassigned alerts.  # noqa: E501

        Returns an overview of unassigned alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_get_unassigned_alert_overview(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_overview_get_unassigned_alert_overview_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_overview_get_unassigned_alert_overview_with_http_info(self, **kwargs):  # noqa: E501
        """Returns an overview of unassigned alerts.  # noqa: E501

        Returns an overview of unassigned alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_get_unassigned_alert_overview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_overview_get_unassigned_alert_overview" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/overview//unassigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_overview_list(self, **kwargs):  # noqa: E501
        """Provides an overview of alerts for the specified user.  # noqa: E501

        Provides an overview of alerts for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_overview_list_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_overview_list_with_http_info(self, **kwargs):  # noqa: E501
        """Provides an overview of alerts for the specified user.  # noqa: E501

        Provides an overview of alerts for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_overview_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/overview/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_overview_read(self, id, **kwargs):  # noqa: E501
        """Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501

        Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_overview_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alerts_overview_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501

        Provides the number of risk alerts, open alerts, and alerts open more than 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_overview_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_overview_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_overview_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/overview//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_partial_update(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_partial_update(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject10 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_partial_update_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_partial_update_with_http_info(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_partial_update_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject10 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_partial_update0(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_partial_update0(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject11 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_partial_update0_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_partial_update0_with_http_info(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_partial_update0_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject11 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_create(self, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject16 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_create_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_queues_create_with_http_info(self, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject16 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_delete(self, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_queues_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_delete_0(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alerts_queues_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_queues_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_list(self, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_list_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_queues_list_with_http_info(self, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_partial_update(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject17 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alerts_queues_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject17 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_queues_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_partial_update0(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject18 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alerts_queues_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Method for using alert queues.  # noqa: E501

        Method for using alert queues.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject18 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_queues_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_queues_read(self, id, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_queues_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_alerts_queues_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_queues_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_queues_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_alerts_queues_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/queues//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_read(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_read(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_read_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_read_with_http_info(self, var, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_read_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_suppress_alert(self, var, **kwargs):  # noqa: E501
        """Suppresses a specific alert.  # noqa: E501

        Suppresses a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_suppress_alert(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject13 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_suppress_alert_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_suppress_alert_with_http_info(self, var, **kwargs):  # noqa: E501
        """Suppresses a specific alert.  # noqa: E501

        Suppresses a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_suppress_alert_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject13 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_suppress_alert" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_suppress_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}/suppress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_suppress_multiple_alerts(self, **kwargs):  # noqa: E501
        """Bulk suppression of alerts.  # noqa: E501

        Bulk suppression of alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_suppress_multiple_alerts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject5 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_suppress_multiple_alerts_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_suppress_multiple_alerts_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk suppression of alerts.  # noqa: E501

        Bulk suppression of alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_suppress_multiple_alerts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject5 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_suppress_multiple_alerts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//suppress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_unsuppress_alert(self, var, **kwargs):  # noqa: E501
        """Unsuppresses a specific alert.  # noqa: E501

        Unsuppresses a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_unsuppress_alert(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject14 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_unsuppress_alert_with_http_info(var, **kwargs)  # noqa: E501

    def v1_alerts_unsuppress_alert_with_http_info(self, var, **kwargs):  # noqa: E501
        """Unsuppresses a specific alert.  # noqa: E501

        Unsuppresses a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_unsuppress_alert_with_http_info(var, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str var: (required)
        :param InlineObject14 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['var', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_unsuppress_alert" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'var' is set
        if self.api_client.client_side_validation and ('var' not in local_var_params or  # noqa: E501
                                                        local_var_params['var'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `var` when calling `v1_alerts_unsuppress_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'var' in local_var_params:
            path_params['var'] = local_var_params['var']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//{var}/unsuppress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_unsuppress_multiple_alerts(self, **kwargs):  # noqa: E501
        """Bulk unsuppression of alerts.  # noqa: E501

        Bulk unsuppression of alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_unsuppress_multiple_alerts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject6 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_unsuppress_multiple_alerts_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_unsuppress_multiple_alerts_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk unsuppression of alerts.  # noqa: E501

        Bulk unsuppression of alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_unsuppress_multiple_alerts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject6 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_unsuppress_multiple_alerts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts//unsuppress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alerts_update(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject3 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_alerts_update_with_http_info(**kwargs)  # noqa: E501

    def v1_alerts_update_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Alerts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alerts_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject3 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alerts_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alerts/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_analytics_modules(self, **kwargs):  # noqa: E501
        """v1_analytics_modules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_modules(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_analytics_modules_with_http_info(**kwargs)  # noqa: E501

    def v1_analytics_modules_with_http_info(self, **kwargs):  # noqa: E501
        """v1_analytics_modules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_modules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_analytics_modules" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/analytics/modules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_analytics_trainings0(self, **kwargs):  # noqa: E501
        """v1_analytics_trainings0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_trainings0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_analytics_trainings0_with_http_info(**kwargs)  # noqa: E501

    def v1_analytics_trainings0_with_http_info(self, **kwargs):  # noqa: E501
        """v1_analytics_trainings0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_trainings0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_analytics_trainings0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/analytics/trainings/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_analytics_trainings_trainings_flag(self, **kwargs):  # noqa: E501
        """v1_analytics_trainings_trainings_flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_trainings_trainings_flag(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_analytics_trainings_trainings_flag_with_http_info(**kwargs)  # noqa: E501

    def v1_analytics_trainings_trainings_flag_with_http_info(self, **kwargs):  # noqa: E501
        """v1_analytics_trainings_trainings_flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_analytics_trainings_trainings_flag_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_analytics_trainings_trainings_flag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/analytics/trainings/flag/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_authorized_users_list(self, model_name, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_authorized_users_list(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_authorized_users_list_with_http_info(model_name, **kwargs)  # noqa: E501

    def v1_authorized_users_list_with_http_info(self, model_name, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_authorized_users_list_with_http_info(model_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str model_name: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['model_name', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_authorized_users_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_name' is set
        if self.api_client.client_side_validation and ('model_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_name` when calling `v1_authorized_users_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_name' in local_var_params:
            path_params['model_name'] = local_var_params['model_name']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/{model_name}/authorized/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_commbrokers0(self, **kwargs):  # noqa: E501
        """v1_commbrokers0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_commbrokers0_with_http_info(**kwargs)  # noqa: E501

    def v1_commbrokers0_with_http_info(self, **kwargs):  # noqa: E501
        """v1_commbrokers0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_commbrokers0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/commbrokers/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_commbrokers_commbrokers_current(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_current  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_current(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_commbrokers_commbrokers_current_with_http_info(**kwargs)  # noqa: E501

    def v1_commbrokers_commbrokers_current_with_http_info(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_current  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_current_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_commbrokers_commbrokers_current" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/commbrokers/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_commbrokers_commbrokers_historical(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_historical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_historical(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_commbrokers_commbrokers_historical_with_http_info(**kwargs)  # noqa: E501

    def v1_commbrokers_commbrokers_historical_with_http_info(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_historical  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_historical_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_commbrokers_commbrokers_historical" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/commbrokers/historical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_commbrokers_commbrokers_status(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_commbrokers_commbrokers_status_with_http_info(**kwargs)  # noqa: E501

    def v1_commbrokers_commbrokers_status_with_http_info(self, **kwargs):  # noqa: E501
        """v1_commbrokers_commbrokers_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_commbrokers_commbrokers_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_commbrokers_commbrokers_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/commbrokers/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_create_from_alert(self, id, **kwargs):  # noqa: E501
        """Creates a new Incident based off an existing Alert, associates the  # noqa: E501

        Creates a new Incident based off an existing Alert, associates the Alert Events and closes the Alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_create_from_alert(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject19 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_create_from_alert_with_http_info(id, **kwargs)  # noqa: E501

    def v1_create_from_alert_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a new Incident based off an existing Alert, associates the  # noqa: E501

        Creates a new Incident based off an existing Alert, associates the Alert Events and closes the Alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_create_from_alert_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject19 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_create_from_alert" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_create_from_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/createIncidentFromAlert/{id}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_create(self, **kwargs):  # noqa: E501
        """Fix for the UI sending junk data  # noqa: E501

        Fix for the UI sending junk data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject21 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_create_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboard_widgets_create_with_http_info(self, **kwargs):  # noqa: E501
        """Fix for the UI sending junk data  # noqa: E501

        Fix for the UI sending junk data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject21 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboard_widgets_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboard_widgets_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboard_widgets_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_list_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboard_widgets_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject22 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboard_widgets_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject22 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboard_widgets_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject23 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboard_widgets_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject23 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboard_widgets_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboard_widgets_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboard_widgets_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboard_widgets_update(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject20 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboard_widgets_update_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboard_widgets_update_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboard_widgets_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject20 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboard_widgets_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboard-widgets/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject24 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_create_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboards_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject24 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboards_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboards_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboards_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_list_with_http_info(**kwargs)  # noqa: E501

    def v1_dashboards_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject25 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboards_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject25 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboards_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject26 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboards_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject26 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboards_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dashboards_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dashboards_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_dashboards_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dashboards_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dashboards_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_dashboards_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/dashboards//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_distinguishers_list(self, **kwargs):  # noqa: E501
        """v1_distinguishers_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_distinguishers_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_distinguishers_list_with_http_info(**kwargs)  # noqa: E501

    def v1_distinguishers_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_distinguishers_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_distinguishers_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_distinguishers_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/distinguishers/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_environment_list(self, **kwargs):  # noqa: E501
        """Returns details about your environment.  # noqa: E501

        Returns details about your environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_environment_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_environment_list_with_http_info(**kwargs)  # noqa: E501

    def v1_environment_list_with_http_info(self, **kwargs):  # noqa: E501
        """Returns details about your environment.  # noqa: E501

        Returns details about your environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_environment_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_environment_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/environment/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_events_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_events_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_events_list_with_http_info(**kwargs)  # noqa: E501

    def v1_events_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_events_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_events_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/events/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_events_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_events_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_events_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_events_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_events_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_events_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_events_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/events//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export0(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export0(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export0_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_export0_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export0_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_export0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportRule/{display_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_alerts_create(self, **kwargs):  # noqa: E501
        """v1_export_alerts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject27 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_alerts_create_with_http_info(**kwargs)  # noqa: E501

    def v1_export_alerts_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_alerts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject27 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_alerts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/alerts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_alerts_list(self, **kwargs):  # noqa: E501
        """v1_export_alerts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_alerts_list_with_http_info(**kwargs)  # noqa: E501

    def v1_export_alerts_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_alerts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_alerts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/alerts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_alerts_partial_update(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_partial_update(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject28 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_alerts_partial_update_with_http_info(mongo_id, **kwargs)  # noqa: E501

    def v1_export_alerts_partial_update_with_http_info(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_partial_update_with_http_info(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject28 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mongo_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_alerts_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mongo_id' is set
        if self.api_client.client_side_validation and ('mongo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mongo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mongo_id` when calling `v1_export_alerts_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mongo_id' in local_var_params:
            path_params['mongo_id'] = local_var_params['mongo_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/alerts//{mongo_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_alerts_partial_update0(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_partial_update0(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject29 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_alerts_partial_update0_with_http_info(mongo_id, **kwargs)  # noqa: E501

    def v1_export_alerts_partial_update0_with_http_info(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_partial_update0_with_http_info(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject29 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mongo_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_alerts_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mongo_id' is set
        if self.api_client.client_side_validation and ('mongo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mongo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mongo_id` when calling `v1_export_alerts_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mongo_id' in local_var_params:
            path_params['mongo_id'] = local_var_params['mongo_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/alerts//{mongo_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_alerts_read(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_read(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_alerts_read_with_http_info(mongo_id, **kwargs)  # noqa: E501

    def v1_export_alerts_read_with_http_info(self, mongo_id, **kwargs):  # noqa: E501
        """v1_export_alerts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_alerts_read_with_http_info(mongo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mongo_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mongo_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_alerts_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mongo_id' is set
        if self.api_client.client_side_validation and ('mongo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mongo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mongo_id` when calling `v1_export_alerts_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mongo_id' in local_var_params:
            path_params['mongo_id'] = local_var_params['mongo_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/alerts//{mongo_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_create(self, **kwargs):  # noqa: E501
        """v1_export_incidents_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject30 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_create_with_http_info(**kwargs)  # noqa: E501

    def v1_export_incidents_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_incidents_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject30 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_delete(self, **kwargs):  # noqa: E501
        """v1_export_incidents_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_export_incidents_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_incidents_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_delete_0(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_incidents_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_incidents_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_list(self, **kwargs):  # noqa: E501
        """v1_export_incidents_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_list_with_http_info(**kwargs)  # noqa: E501

    def v1_export_incidents_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_incidents_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_partial_update(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject31 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_incidents_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject31 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_incidents_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_partial_update0(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject32 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_incidents_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject32 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_incidents_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_incidents_read(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_incidents_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_incidents_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_incidents_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_incidents_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_incidents_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_incidents_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/incidents//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_indicators_list(self, **kwargs):  # noqa: E501
        """v1_export_indicators_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_indicators_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_indicators_list_with_http_info(**kwargs)  # noqa: E501

    def v1_export_indicators_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_indicators_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_indicators_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_indicators_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/indicators/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_indicators_read(self, id, **kwargs):  # noqa: E501
        """v1_export_indicators_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_indicators_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_indicators_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_indicators_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_indicators_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_indicators_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_indicators_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_indicators_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/export/indicators//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_rule_pack_create(self, **kwargs):  # noqa: E501
        """v1_export_rule_pack_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject33 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_rule_pack_create_with_http_info(**kwargs)  # noqa: E501

    def v1_export_rule_pack_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_rule_pack_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject33 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_rule_pack_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportRulePack/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_rule_pack_list(self, **kwargs):  # noqa: E501
        """v1_export_rule_pack_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_rule_pack_list_with_http_info(**kwargs)  # noqa: E501

    def v1_export_rule_pack_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_rule_pack_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_rule_pack_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportRulePack/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_rule_pack_read(self, display_id, **kwargs):  # noqa: E501
        """v1_export_rule_pack_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_read(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_rule_pack_read_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_export_rule_pack_read_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """v1_export_rule_pack_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_rule_pack_read_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_rule_pack_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_export_rule_pack_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportRulePack//{display_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_create(self, **kwargs):  # noqa: E501
        """v1_export_search_list_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject34 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_create_with_http_info(**kwargs)  # noqa: E501

    def v1_export_search_list_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_search_list_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject34 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_delete(self, **kwargs):  # noqa: E501
        """v1_export_search_list_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_export_search_list_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_search_list_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_delete_0(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_search_list_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_search_list_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_list(self, **kwargs):  # noqa: E501
        """v1_export_search_list_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_list_with_http_info(**kwargs)  # noqa: E501

    def v1_export_search_list_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_export_search_list_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_partial_update(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject35 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_search_list_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject35 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_search_list_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_partial_update0(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject36 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_search_list_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject36 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_search_list_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_export_search_list_read(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_export_search_list_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_export_search_list_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_export_search_list_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_export_search_list_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_export_search_list_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_export_search_list_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/exportSearchList//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_file_analysis_read(self, hash_value, hash_type, **kwargs):  # noqa: E501
        """v1_file_analysis_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_file_analysis_read(hash_value, hash_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hash_value: (required)
        :param str hash_type: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_file_analysis_read_with_http_info(hash_value, hash_type, **kwargs)  # noqa: E501

    def v1_file_analysis_read_with_http_info(self, hash_value, hash_type, **kwargs):  # noqa: E501
        """v1_file_analysis_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_file_analysis_read_with_http_info(hash_value, hash_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hash_value: (required)
        :param str hash_type: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['hash_value', 'hash_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_file_analysis_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hash_value' is set
        if self.api_client.client_side_validation and ('hash_value' not in local_var_params or  # noqa: E501
                                                        local_var_params['hash_value'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hash_value` when calling `v1_file_analysis_read`")  # noqa: E501
        # verify the required parameter 'hash_type' is set
        if self.api_client.client_side_validation and ('hash_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['hash_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hash_type` when calling `v1_file_analysis_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash_value' in local_var_params:
            path_params['hash_value'] = local_var_params['hash_value']  # noqa: E501
        if 'hash_type' in local_var_params:
            path_params['hash_type'] = local_var_params['hash_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/file-analysis/{hash_type}/{hash_value}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_get_alert_stats(self, **kwargs):  # noqa: E501
        """Returns statistics on alerts for the last 30 days.  # noqa: E501

        Returns statistics on alerts for the last 30 days. Includes the number of active alerts, high risk alerts, critical risk alerts, the number of alerts  for each day ('count'), and the 'time' (which is ‘epoch’, ie: 1545609600000 = GMT: Monday, December 24, 2018 12:00:00 AM).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_get_alert_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_get_alert_stats_with_http_info(**kwargs)  # noqa: E501

    def v1_get_alert_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Returns statistics on alerts for the last 30 days.  # noqa: E501

        Returns statistics on alerts for the last 30 days. Includes the number of active alerts, high risk alerts, critical risk alerts, the number of alerts  for each day ('count'), and the 'time' (which is ‘epoch’, ie: 1545609600000 = GMT: Monday, December 24, 2018 12:00:00 AM).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_get_alert_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_get_alert_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertStats/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_get_alert_types(self, **kwargs):  # noqa: E501
        """v1_get_alert_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_get_alert_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_get_alert_types_with_http_info(**kwargs)  # noqa: E501

    def v1_get_alert_types_with_http_info(self, **kwargs):  # noqa: E501
        """v1_get_alert_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_get_alert_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_get_alert_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/alertTypes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_import_single_rule(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_import_single_rule(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_import_single_rule_with_http_info(**kwargs)  # noqa: E501

    def v1_import_import_single_rule_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_import_single_rule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_import_single_rule" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/import/rule/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_multiple(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_multiple(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_multiple_with_http_info(**kwargs)  # noqa: E501

    def v1_import_multiple_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_multiple_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_multiple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importRulePacks/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_rulepack_status(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_rulepack_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_rulepack_status_with_http_info(id, **kwargs)  # noqa: E501

    def v1_import_rulepack_status_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_rulepack_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_rulepack_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_import_rulepack_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importRulePacks/{id}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_create(self, **kwargs):  # noqa: E501
        """v1_import_search_list_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject37 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_create_with_http_info(**kwargs)  # noqa: E501

    def v1_import_search_list_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_import_search_list_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject37 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_delete(self, **kwargs):  # noqa: E501
        """v1_import_search_list_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_import_search_list_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_import_search_list_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_delete_0(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_import_search_list_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_import_search_list_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_list(self, **kwargs):  # noqa: E501
        """v1_import_search_list_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_list_with_http_info(**kwargs)  # noqa: E501

    def v1_import_search_list_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_import_search_list_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_partial_update(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject38 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_import_search_list_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject38 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_import_search_list_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_partial_update0(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject39 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_import_search_list_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject39 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_import_search_list_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_search_list_read(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_search_list_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_import_search_list_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_import_search_list_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_search_list_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_search_list_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_import_search_list_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importSearchList//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_import_single(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_single(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_import_single_with_http_info(**kwargs)  # noqa: E501

    def v1_import_single_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_import_single_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_import_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/importRulePack/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_add_events(self, id, **kwargs):  # noqa: E501
        """Creates and associates the provided events with an Incident instance.  # noqa: E501

        Creates and associates the provided events with an Incident instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_add_events(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject44 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_add_events_with_http_info(id, **kwargs)  # noqa: E501

    def v1_incidents_add_events_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates and associates the provided events with an Incident instance.  # noqa: E501

        Creates and associates the provided events with an Incident instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_add_events_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject44 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_add_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_add_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{id}/addEvents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject40 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_create_with_http_info(**kwargs)  # noqa: E501

    def v1_incidents_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject40 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_create_with_events(self, **kwargs):  # noqa: E501
        """Creates a new Incident along with any included Events.  # noqa: E501

        Creates a new Incident along with any included Events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_create_with_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject41 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_create_with_events_with_http_info(**kwargs)  # noqa: E501

    def v1_incidents_create_with_events_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new Incident along with any included Events.  # noqa: E501

        Creates a new Incident along with any included Events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_create_with_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject41 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_create_with_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//createWithEvents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_incidents_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_incidents_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_get_metrics(self, **kwargs):  # noqa: E501
        """Lists the number of open and new incidents and the age of the oldest incident.  # noqa: E501

        Lists the number of open and new incidents and the age of the oldest incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_get_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_get_metrics_with_http_info(**kwargs)  # noqa: E501

    def v1_incidents_get_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Lists the number of open and new incidents and the age of the oldest incident.  # noqa: E501

        Lists the number of open and new incidents and the age of the oldest incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_get_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_get_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_list_with_http_info(**kwargs)  # noqa: E501

    def v1_incidents_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_create(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Overrides the default 'create' method to perform validations  # noqa: E501

        Overrides the default 'create' method to perform validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_create(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject45 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_create_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_incidents_notes_create_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Overrides the default 'create' method to perform validations  # noqa: E501

        Overrides the default 'create' method to perform validations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_create_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject45 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_delete(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_incidents_notes_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_delete(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_delete_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_incidents_notes_delete_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_incidents_notes_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_delete_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_delete_0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_delete_0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_delete_0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_incidents_notes_delete_0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_delete_0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_notes_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_list(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_incidents_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_list(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_list_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v1_incidents_notes_list_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v1_incidents_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_list_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_partial_update(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_partial_update(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject46 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_partial_update_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_incidents_notes_partial_update_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_partial_update_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject46 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_notes_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_partial_update0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_partial_update0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject47 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_partial_update0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_incidents_notes_partial_update0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_partial_update0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject47 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_notes_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_notes_read(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_read(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_notes_read_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v1_incidents_notes_read_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v1_incidents_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_notes_read_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_notes_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v1_incidents_notes_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_notes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{parent_lookup_object_id}/notes//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject42 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_incidents_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject42 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject43 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_incidents_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject43 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_incidents_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_incidents_remove_event(self, event_id, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_remove_event(event_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_id: (required)
        :param str id: (required)
        :param InlineObject48 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_incidents_remove_event_with_http_info(event_id, id, **kwargs)  # noqa: E501

    def v1_incidents_remove_event_with_http_info(self, event_id, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_incidents_remove_event_with_http_info(event_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_id: (required)
        :param str id: (required)
        :param InlineObject48 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_incidents_remove_event" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_id' is set
        if self.api_client.client_side_validation and ('event_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_id` when calling `v1_incidents_remove_event`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_incidents_remove_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_id' in local_var_params:
            path_params['event_id'] = local_var_params['event_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/incidents/{id}/removeEvent/{event_id}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject49 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_create_with_http_info(**kwargs)  # noqa: E501

    def v1_indicators_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject49 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_indicators_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_indicators_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'risk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_indicators_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_import_upload(self, **kwargs):  # noqa: E501
        """Imports indicators in CSV format.  # noqa: E501

        Imports indicators in CSV format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_import_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject50 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_import_upload_with_http_info(**kwargs)  # noqa: E501

    def v1_indicators_import_upload_with_http_info(self, **kwargs):  # noqa: E501
        """Imports indicators in CSV format.  # noqa: E501

        Imports indicators in CSV format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_import_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject50 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_import_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators//import/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_list_with_http_info(**kwargs)  # noqa: E501

    def v1_indicators_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes', 'type', 'risk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param InlineObject51 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_indicators_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param InlineObject51 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'risk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_indicators_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param InlineObject52 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_indicators_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param InlineObject52 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'risk', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_indicators_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_indicators_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_indicators_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_indicators_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Indicators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_indicators_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str risk:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'risk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_indicators_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_indicators_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/indicators//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject53 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_create_with_http_info(**kwargs)  # noqa: E501

    def v1_notices_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject53 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_notices_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_notices_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_notices_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_list_with_http_info(**kwargs)  # noqa: E501

    def v1_notices_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject54 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_notices_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject54 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_notices_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject55 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_notices_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject55 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_notices_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_notices_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_notices_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_notices_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Notices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_notices_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_notices_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_notices_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/notices//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_create(self, **kwargs):  # noqa: E501
        """If the job wants to upload the raw PCAP file directly to S3, we need  # noqa: E501

        If the job wants to upload the raw PCAP file directly to S3, we need to presign an upload URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject56 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_create_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_jobs_create_with_http_info(self, **kwargs):  # noqa: E501
        """If the job wants to upload the raw PCAP file directly to S3, we need  # noqa: E501

        If the job wants to upload the raw PCAP file directly to S3, we need to presign an upload URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject56 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_jobs_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_jobs_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_jobs_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_list_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_jobs_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject57 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_jobs_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject57 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject58 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_jobs_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject58 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_jobs_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_jobs_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_jobs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_jobs_transcript(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_transcript(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_jobs_transcript_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_jobs_transcript_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_jobs_transcript_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_jobs_transcript" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_jobs_transcript`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/jobs//{id}/transcript', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject59 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_create_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_sensors_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject59 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_sensors_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_sensors_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_sensors_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_list_with_http_info(**kwargs)  # noqa: E501

    def v1_pcap_sensors_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject60 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_sensors_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject60 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_sensors_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject61 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_sensors_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject61 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_sensors_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_pcap_sensors_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_pcap_sensors_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_pcap_sensors_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapSensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_pcap_sensors_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_pcap_sensors_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_pcap_sensors_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/pcap/sensors//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject62 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_create_with_http_info(**kwargs)  # noqa: E501

    def v1_rulepacks_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject62 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_rulepacks_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_delete_0(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_delete_0(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_delete_0_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_delete_0_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_delete_0_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_disable(self, display_id, **kwargs):  # noqa: E501
        """Disables all rules in the specified rule pack.  # noqa: E501

        Disables all rules in the specified rule pack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_disable(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param InlineObject65 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_disable_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_disable_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Disables all rules in the specified rule pack.  # noqa: E501

        Disables all rules in the specified rule pack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_disable_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param InlineObject65 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_disable" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_disable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}/disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_enable(self, display_id, **kwargs):  # noqa: E501
        """Enables all rules in the specified rule pack.  # noqa: E501

        Enables all rules in the specified rule pack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_enable(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param InlineObject66 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_enable_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_enable_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Enables all rules in the specified rule pack.  # noqa: E501

        Enables all rules in the specified rule pack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_enable_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param InlineObject66 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_enable" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}/enable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_list_with_http_info(**kwargs)  # noqa: E501

    def v1_rulepacks_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_partial_update(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_partial_update(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject63 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_partial_update_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_partial_update_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_partial_update_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject63 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_partial_update0(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_partial_update0(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject64 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_partial_update0_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_partial_update0_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_partial_update0_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject64 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rulepacks_read(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_read(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rulepacks_read_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rulepacks_read_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rulepacks_read_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rulepacks_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rulepacks_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rulepacks//{display_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject67 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_create_with_http_info(**kwargs)  # noqa: E501

    def v1_rules_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject67 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_rules_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_delete_0(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_delete_0(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_delete_0_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rules_delete_0_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_delete_0_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rules_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules//{display_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_list(self, **kwargs):  # noqa: E501
        """Override the default `list` method in order to run the queryset  # noqa: E501

        Override the default `list` method in order to run the queryset results through the `restrict_search_field` method to protect search queries on internal+protected rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_list_with_http_info(**kwargs)  # noqa: E501

    def v1_rules_list_with_http_info(self, **kwargs):  # noqa: E501
        """Override the default `list` method in order to run the queryset  # noqa: E501

        Override the default `list` method in order to run the queryset results through the `restrict_search_field` method to protect search queries on internal+protected rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_partial_update(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_partial_update(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject68 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_partial_update_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rules_partial_update_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_partial_update_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject68 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rules_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules//{display_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_partial_update0(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_partial_update0(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject69 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_partial_update0_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rules_partial_update0_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_partial_update0_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject69 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rules_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules//{display_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_rules_read(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_read(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_rules_read_with_http_info(display_id, **kwargs)  # noqa: E501

    def v1_rules_read_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_rules_read_with_http_info(display_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str display_id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['display_id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_rules_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'display_id' is set
        if self.api_client.client_side_validation and ('display_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['display_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `display_id` when calling `v1_rules_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in local_var_params:
            path_params['display_id'] = local_var_params['display_id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/rules//{display_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_s3_download(self, bucket, key, **kwargs):  # noqa: E501
        """v1_s3_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_s3_download(bucket, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bucket: (required)
        :param str key: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_s3_download_with_http_info(bucket, key, **kwargs)  # noqa: E501

    def v1_s3_download_with_http_info(self, bucket, key, **kwargs):  # noqa: E501
        """v1_s3_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_s3_download_with_http_info(bucket, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bucket: (required)
        :param str key: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_s3_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket' is set
        if self.api_client.client_side_validation and ('bucket' not in local_var_params or  # noqa: E501
                                                        local_var_params['bucket'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bucket` when calling `v1_s3_download`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in local_var_params or  # noqa: E501
                                                        local_var_params['key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key` when calling `v1_s3_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket' in local_var_params:
            path_params['bucket'] = local_var_params['bucket']  # noqa: E501
        if 'key' in local_var_params:
            path_params['key'] = local_var_params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/s3/{bucket}/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject70 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_create_with_http_info(**kwargs)  # noqa: E501

    def v1_scheduled_search_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject70 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_scheduled_search_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_scheduled_search_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_create(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_create(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject73 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_create_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_create_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_create_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject73 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_delete(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_delete(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_delete_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_delete_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_delete_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_delete_0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_delete_0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_delete_0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_delete_0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_delete_0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_jobs_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_list(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_list(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_list_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_list_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_list_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_partial_update(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_partial_update(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject74 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_partial_update_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_partial_update_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_partial_update_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject74 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_jobs_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_partial_update0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_partial_update0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject75 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_partial_update0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_partial_update0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_partial_update0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject75 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_jobs_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_jobs_read(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_read(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_jobs_read_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v1_scheduled_search_jobs_read_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_jobs_read_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_jobs_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_jobs_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v1_scheduled_search_jobs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{parent_lookup_saved_search}/jobs//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_list_with_http_info(**kwargs)  # noqa: E501

    def v1_scheduled_search_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject71 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_scheduled_search_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject71 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject72 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_scheduled_search_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject72 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_scheduled_search_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_scheduled_search_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_scheduled_search_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Scheduled Searches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_scheduled_search_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_scheduled_search_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_scheduled_search_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/scheduledSearch//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_cancel(self, id, **kwargs):  # noqa: E501
        """Cancels the specified archive search.  # noqa: E501

        Cancels the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_cancel(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject80 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_cancel_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_cancel_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cancels the specified archive search.  # noqa: E501

        Cancels the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_cancel_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject80 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_cancel" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject76 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_create_with_http_info(**kwargs)  # noqa: E501

    def v1_search_archive_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject76 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_search_archive_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_estimate(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_estimate(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject77 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_estimate_with_http_info(**kwargs)  # noqa: E501

    def v1_search_archive_estimate_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_estimate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject77 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_estimate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//estimate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_list_with_http_info(**kwargs)  # noqa: E501

    def v1_search_archive_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject78 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject78 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject79 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject79 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_pause(self, id, **kwargs):  # noqa: E501
        """Pauses the specified archive search.  # noqa: E501

        Pauses the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_pause(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject81 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_pause_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_pause_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pauses the specified archive search.  # noqa: E501

        Pauses the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_pause_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject81 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_pause" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_pause`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_results(self, id, **kwargs):  # noqa: E501
        """Retrieves the results of the specified archive search.  # noqa: E501

        Retrieves the results of the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_results(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_results_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_results_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the results of the specified archive search.  # noqa: E501

        Retrieves the results of the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_results_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_archive_resume(self, id, **kwargs):  # noqa: E501
        """Resumes the specified archive search.  # noqa: E501

        Resumes the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_resume(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject82 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_archive_resume_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_archive_resume_with_http_info(self, id, **kwargs):  # noqa: E501
        """Resumes the specified archive search.  # noqa: E501

        Resumes the specified archive search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_archive_resume_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject82 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_archive_resume" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_archive_resume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/archive//{id}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_create(self, **kwargs):  # noqa: E501
        """v1_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_create_with_http_info(**kwargs)  # noqa: E501

    def v1_search_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject83 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_create_with_http_info(**kwargs)  # noqa: E501

    def v1_search_favorites_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject83 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_search_favorites_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_favorites_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_favorites_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_list_with_http_info(**kwargs)  # noqa: E501

    def v1_search_favorites_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject84 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_favorites_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject84 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_favorites_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject85 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_favorites_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject85 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_favorites_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_favorites_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_favorites_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_favorites_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_favorites_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_favorites_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_favorites_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchFavorites//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_fields(self, **kwargs):  # noqa: E501
        """v1_search_fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_fields_with_http_info(**kwargs)  # noqa: E501

    def v1_search_fields_with_http_info(self, **kwargs):  # noqa: E501
        """v1_search_fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_fields" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/fields/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject86 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_create_with_http_info(**kwargs)  # noqa: E501

    def v1_search_historys_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject86 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_search_historys_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_historys_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_historys_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_list_with_http_info(**kwargs)  # noqa: E501

    def v1_search_historys_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject87 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_historys_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject87 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_historys_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject88 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_historys_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject88 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_historys_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_historys_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_historys_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_historys_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing SearchHistorys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_historys_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_historys_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_historys_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchHistorys//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject89 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_create_with_http_info(**kwargs)  # noqa: E501

    def v1_search_lists_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject89 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_search_lists_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_lists_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_lists_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_list(self, **kwargs):  # noqa: E501
        """Override the default `list` method in order to run the queryset  # noqa: E501

        Override the default `list` method in order to run the queryset results through the `restrict_list_values` method to protect list values on protected rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_list_with_http_info(**kwargs)  # noqa: E501

    def v1_search_lists_list_with_http_info(self, **kwargs):  # noqa: E501
        """Override the default `list` method in order to run the queryset  # noqa: E501

        Override the default `list` method in order to run the queryset results through the `restrict_list_values` method to protect list values on protected rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject90 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_lists_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject90 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_lists_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject91 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_lists_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject91 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_lists_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_lists_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_lists_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_search_lists_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_lists_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_lists_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_search_lists_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/searchLists//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_read(self, **kwargs):  # noqa: E501
        """v1_search_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_search_read_with_http_info(**kwargs)  # noqa: E501

    def v1_search_read_with_http_info(self, **kwargs):  # noqa: E501
        """v1_search_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/search/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_create(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject93 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_create_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject93 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_delete(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_delete_0(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_list(self, **kwargs):  # noqa: E501
        """Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501

        Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_list_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_list_with_http_info(self, **kwargs):  # noqa: E501
        """Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501

        Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_partial_update(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject94 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject94 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_partial_update0(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject95 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject95 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_read(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_update(self, **kwargs):  # noqa: E501
        """We aren't updating multiple schemes/settings, this is just the way  # noqa: E501

        We aren't updating multiple schemes/settings, this is just the way the v1 endpoint worked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject92 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_update_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_update_with_http_info(self, **kwargs):  # noqa: E501
        """We aren't updating multiple schemes/settings, this is just the way  # noqa: E501

        We aren't updating multiple schemes/settings, this is just the way the v1 endpoint worked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject92 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_create(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject96 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_create_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_users_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject96 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_delete(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_users_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_delete_0(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_users_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_users_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_list(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_list_with_http_info(**kwargs)  # noqa: E501

    def v1_settings_notifications_users_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_partial_update(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject97 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_users_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject97 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_users_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_partial_update0(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject98 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_users_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_settings_notifications_users_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject98 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_users_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_settings_notifications_users_read(self, id, **kwargs):  # noqa: E501
        """Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501

        Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_settings_notifications_users_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_settings_notifications_users_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501

        Restricts obtaining organization-level settings to only RBAC admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_settings_notifications_users_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_settings_notifications_users_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_settings_notifications_users_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/settings/notifications/users//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_stats0(self, **kwargs):  # noqa: E501
        """v1_stats0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_stats0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_stats0_with_http_info(**kwargs)  # noqa: E501

    def v1_stats0_with_http_info(self, **kwargs):  # noqa: E501
        """v1_stats0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_stats0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_stats0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/stats/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_stats_stats_classes(self, **kwargs):  # noqa: E501
        """v1_stats_stats_classes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_stats_stats_classes(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_stats_stats_classes_with_http_info(**kwargs)  # noqa: E501

    def v1_stats_stats_classes_with_http_info(self, **kwargs):  # noqa: E501
        """v1_stats_stats_classes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_stats_stats_classes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_stats_stats_classes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/stats/classes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject99 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_create_with_http_info(**kwargs)  # noqa: E501

    def v1_tables_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject99 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_tables_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_tables_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_tables_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_list(self, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_list_with_http_info(**kwargs)  # noqa: E501

    def v1_tables_list_with_http_info(self, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject100 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_tables_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject100 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_tables_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject101 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_tables_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing PcapJobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param InlineObject101 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_tables_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tables_read(self, id, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_tables_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_tables_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Augments the default ListModelMixin to require the model to be created  # noqa: E501

        Augments the default ListModelMixin to require the model to be created by the requesting user or have is_public=True  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tables_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tables_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_tables_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/tables//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_list(self, **kwargs):  # noqa: E501
        """v1_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_users_list_with_http_info(**kwargs)  # noqa: E501

    def v1_users_list_with_http_info(self, **kwargs):  # noqa: E501
        """v1_users_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_validate_mql_create(self, **kwargs):  # noqa: E501
        """v1_validate_mql_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_validate_mql_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_validate_mql_create_with_http_info(**kwargs)  # noqa: E501

    def v1_validate_mql_create_with_http_info(self, **kwargs):  # noqa: E501
        """v1_validate_mql_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_validate_mql_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_validate_mql_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/validate/mql/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_validate_mql_read(self, **kwargs):  # noqa: E501
        """v1_validate_mql_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_validate_mql_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_validate_mql_read_with_http_info(**kwargs)  # noqa: E501

    def v1_validate_mql_read_with_http_info(self, **kwargs):  # noqa: E501
        """v1_validate_mql_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_validate_mql_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_validate_mql_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/validate/mql/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject102 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_create_with_http_info(**kwargs)  # noqa: E501

    def v1_white_lists_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject102 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_delete(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_delete_with_http_info(**kwargs)  # noqa: E501

    def v1_white_lists_delete_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_delete_0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_white_lists_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_white_lists_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_list_with_http_info(**kwargs)  # noqa: E501

    def v1_white_lists_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject103 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v1_white_lists_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject103 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_white_lists_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject104 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v1_white_lists_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param InlineObject104 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_white_lists_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_white_lists_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_white_lists_read_with_http_info(id, **kwargs)  # noqa: E501

    def v1_white_lists_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Whitelists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_white_lists_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes', 'type', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_white_lists_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_white_lists_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v1/whiteLists//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
