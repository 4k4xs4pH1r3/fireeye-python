# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from helix.configuration import Configuration


class InlineObject163(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'duration_seconds': 'int',
        'parent_play_id': 'str',
        'action': 'str',
        'play_order': 'int',
        'playbook_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'duration_seconds': 'duration_seconds',
        'parent_play_id': 'parent_play_id',
        'action': 'action',
        'play_order': 'play_order',
        'playbook_id': 'playbook_id'
    }

    def __init__(self, name=None, duration_seconds=None, parent_play_id=None, action=None, play_order=None, playbook_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject163 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._duration_seconds = None
        self._parent_play_id = None
        self._action = None
        self._play_order = None
        self._playbook_id = None
        self.discriminator = None

        self.name = name
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if parent_play_id is not None:
            self.parent_play_id = parent_play_id
        if action is not None:
            self.action = action
        if play_order is not None:
            self.play_order = play_order
        self.playbook_id = playbook_id

    @property
    def name(self):
        """Gets the name of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The name of this InlineObject163.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject163.

          # noqa: E501

        :param name: The name of this InlineObject163.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The duration_seconds of this InlineObject163.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this InlineObject163.

          # noqa: E501

        :param duration_seconds: The duration_seconds of this InlineObject163.  # noqa: E501
        :type: int
        """

        self._duration_seconds = duration_seconds

    @property
    def parent_play_id(self):
        """Gets the parent_play_id of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The parent_play_id of this InlineObject163.  # noqa: E501
        :rtype: str
        """
        return self._parent_play_id

    @parent_play_id.setter
    def parent_play_id(self, parent_play_id):
        """Sets the parent_play_id of this InlineObject163.

          # noqa: E501

        :param parent_play_id: The parent_play_id of this InlineObject163.  # noqa: E501
        :type: str
        """

        self._parent_play_id = parent_play_id

    @property
    def action(self):
        """Gets the action of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The action of this InlineObject163.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineObject163.

          # noqa: E501

        :param action: The action of this InlineObject163.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def play_order(self):
        """Gets the play_order of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The play_order of this InlineObject163.  # noqa: E501
        :rtype: int
        """
        return self._play_order

    @play_order.setter
    def play_order(self, play_order):
        """Sets the play_order of this InlineObject163.

          # noqa: E501

        :param play_order: The play_order of this InlineObject163.  # noqa: E501
        :type: int
        """

        self._play_order = play_order

    @property
    def playbook_id(self):
        """Gets the playbook_id of this InlineObject163.  # noqa: E501

          # noqa: E501

        :return: The playbook_id of this InlineObject163.  # noqa: E501
        :rtype: str
        """
        return self._playbook_id

    @playbook_id.setter
    def playbook_id(self, playbook_id):
        """Sets the playbook_id of this InlineObject163.

          # noqa: E501

        :param playbook_id: The playbook_id of this InlineObject163.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and playbook_id is None:  # noqa: E501
            raise ValueError("Invalid value for `playbook_id`, must not be `None`")  # noqa: E501

        self._playbook_id = playbook_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject163):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject163):
            return True

        return self.to_dict() != other.to_dict()
