# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from helix.configuration import Configuration


class InlineObject114(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'detail_fields': 'list[str]',
        'destination': 'list[str]',
        'name': 'str',
        'type_id': 'str',
        'summary_fields': 'list[str]',
        'is_internal': 'bool',
        'is_default': 'bool',
        'source': 'list[str]'
    }

    attribute_map = {
        'category': 'category',
        'detail_fields': 'detail_fields',
        'destination': 'destination',
        'name': 'name',
        'type_id': 'type_id',
        'summary_fields': 'summary_fields',
        'is_internal': 'is_internal',
        'is_default': 'is_default',
        'source': 'source'
    }

    def __init__(self, category=None, detail_fields=None, destination=None, name=None, type_id=None, summary_fields=None, is_internal=None, is_default=None, source=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject114 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._detail_fields = None
        self._destination = None
        self._name = None
        self._type_id = None
        self._summary_fields = None
        self._is_internal = None
        self._is_default = None
        self._source = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if detail_fields is not None:
            self.detail_fields = detail_fields
        if destination is not None:
            self.destination = destination
        if name is not None:
            self.name = name
        if type_id is not None:
            self.type_id = type_id
        if summary_fields is not None:
            self.summary_fields = summary_fields
        if is_internal is not None:
            self.is_internal = is_internal
        if is_default is not None:
            self.is_default = is_default
        if source is not None:
            self.source = source

    @property
    def category(self):
        """Gets the category of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The category of this InlineObject114.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineObject114.

          # noqa: E501

        :param category: The category of this InlineObject114.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def detail_fields(self):
        """Gets the detail_fields of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The detail_fields of this InlineObject114.  # noqa: E501
        :rtype: list[str]
        """
        return self._detail_fields

    @detail_fields.setter
    def detail_fields(self, detail_fields):
        """Sets the detail_fields of this InlineObject114.

          # noqa: E501

        :param detail_fields: The detail_fields of this InlineObject114.  # noqa: E501
        :type: list[str]
        """

        self._detail_fields = detail_fields

    @property
    def destination(self):
        """Gets the destination of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The destination of this InlineObject114.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this InlineObject114.

          # noqa: E501

        :param destination: The destination of this InlineObject114.  # noqa: E501
        :type: list[str]
        """

        self._destination = destination

    @property
    def name(self):
        """Gets the name of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The name of this InlineObject114.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject114.

          # noqa: E501

        :param name: The name of this InlineObject114.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type_id(self):
        """Gets the type_id of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The type_id of this InlineObject114.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this InlineObject114.

          # noqa: E501

        :param type_id: The type_id of this InlineObject114.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def summary_fields(self):
        """Gets the summary_fields of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The summary_fields of this InlineObject114.  # noqa: E501
        :rtype: list[str]
        """
        return self._summary_fields

    @summary_fields.setter
    def summary_fields(self, summary_fields):
        """Sets the summary_fields of this InlineObject114.

          # noqa: E501

        :param summary_fields: The summary_fields of this InlineObject114.  # noqa: E501
        :type: list[str]
        """

        self._summary_fields = summary_fields

    @property
    def is_internal(self):
        """Gets the is_internal of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The is_internal of this InlineObject114.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this InlineObject114.

          # noqa: E501

        :param is_internal: The is_internal of this InlineObject114.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def is_default(self):
        """Gets the is_default of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The is_default of this InlineObject114.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this InlineObject114.

          # noqa: E501

        :param is_default: The is_default of this InlineObject114.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def source(self):
        """Gets the source of this InlineObject114.  # noqa: E501

          # noqa: E501

        :return: The source of this InlineObject114.  # noqa: E501
        :rtype: list[str]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineObject114.

          # noqa: E501

        :param source: The source of this InlineObject114.  # noqa: E501
        :type: list[str]
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject114):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject114):
            return True

        return self.to_dict() != other.to_dict()
