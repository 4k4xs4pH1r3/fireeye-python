# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from helix.configuration import Configuration


class InlineObject54(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'str',
        'create_date': 'str',
        'customer_id': 'str',
        'update_date': 'str',
        'title': 'str'
    }

    attribute_map = {
        'content': 'content',
        'create_date': 'createDate',
        'customer_id': 'customer_id',
        'update_date': 'updateDate',
        'title': 'title'
    }

    def __init__(self, content=None, create_date=None, customer_id=None, update_date=None, title=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject54 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._create_date = None
        self._customer_id = None
        self._update_date = None
        self._title = None
        self.discriminator = None

        self.content = content
        if create_date is not None:
            self.create_date = create_date
        if customer_id is not None:
            self.customer_id = customer_id
        if update_date is not None:
            self.update_date = update_date
        self.title = title

    @property
    def content(self):
        """Gets the content of this InlineObject54.  # noqa: E501

          # noqa: E501

        :return: The content of this InlineObject54.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineObject54.

          # noqa: E501

        :param content: The content of this InlineObject54.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def create_date(self):
        """Gets the create_date of this InlineObject54.  # noqa: E501

          # noqa: E501

        :return: The create_date of this InlineObject54.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this InlineObject54.

          # noqa: E501

        :param create_date: The create_date of this InlineObject54.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def customer_id(self):
        """Gets the customer_id of this InlineObject54.  # noqa: E501

          # noqa: E501

        :return: The customer_id of this InlineObject54.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InlineObject54.

          # noqa: E501

        :param customer_id: The customer_id of this InlineObject54.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def update_date(self):
        """Gets the update_date of this InlineObject54.  # noqa: E501

          # noqa: E501

        :return: The update_date of this InlineObject54.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this InlineObject54.

          # noqa: E501

        :param update_date: The update_date of this InlineObject54.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    @property
    def title(self):
        """Gets the title of this InlineObject54.  # noqa: E501

          # noqa: E501

        :return: The title of this InlineObject54.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineObject54.

          # noqa: E501

        :param title: The title of this InlineObject54.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject54):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject54):
            return True

        return self.to_dict() != other.to_dict()
