# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class V3Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v3_alerts_cases_create(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_create(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param InlineObject106 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_create_with_http_info(parent_lookup_alerts, **kwargs)  # noqa: E501

    def v3_alerts_cases_create_with_http_info(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_create_with_http_info(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param InlineObject106 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_delete(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_delete(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_delete_with_http_info(parent_lookup_alerts, **kwargs)  # noqa: E501

    def v3_alerts_cases_delete_with_http_info(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_delete_with_http_info(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_delete_0(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_delete_0(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_delete_0_with_http_info(parent_lookup_alerts, id, **kwargs)  # noqa: E501

    def v3_alerts_cases_delete_0_with_http_info(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_delete_0_with_http_info(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_delete_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_cases_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_list(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_list(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_list_with_http_info(parent_lookup_alerts, **kwargs)  # noqa: E501

    def v3_alerts_cases_list_with_http_info(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_list_with_http_info(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_partial_update(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_partial_update(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject107 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_partial_update_with_http_info(parent_lookup_alerts, id, **kwargs)  # noqa: E501

    def v3_alerts_cases_partial_update_with_http_info(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_partial_update_with_http_info(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject107 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_cases_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_partial_update0(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_partial_update0(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject108 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_partial_update0_with_http_info(parent_lookup_alerts, id, **kwargs)  # noqa: E501

    def v3_alerts_cases_partial_update0_with_http_info(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_partial_update0_with_http_info(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject108 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_cases_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_read(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_read(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_read_with_http_info(parent_lookup_alerts, id, **kwargs)  # noqa: E501

    def v3_alerts_cases_read_with_http_info(self, parent_lookup_alerts, id, **kwargs):  # noqa: E501
        """v3_alerts_cases_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_read_with_http_info(parent_lookup_alerts, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_cases_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_cases_search(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_search(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_cases_search_with_http_info(parent_lookup_alerts, **kwargs)  # noqa: E501

    def v3_alerts_cases_search_with_http_info(self, parent_lookup_alerts, **kwargs):  # noqa: E501
        """v3_alerts_cases_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_cases_search_with_http_info(parent_lookup_alerts, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alerts: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alerts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_cases_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alerts' is set
        if self.api_client.client_side_validation and ('parent_lookup_alerts' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alerts'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alerts` when calling `v3_alerts_cases_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alerts' in local_var_params:
            path_params['parent_lookup_alerts'] = local_var_params['parent_lookup_alerts']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alerts}/cases//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_create(self, **kwargs):  # noqa: E501
        """v3_alerts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject105 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_create_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject105 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_enum_fields(self, **kwargs):  # noqa: E501
        """Lists all fields that describe alerts.  # noqa: E501

        Lists all fields that describe alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_enum_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_enum_fields_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_get_enum_fields_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all fields that describe alerts.  # noqa: E501

        Lists all fields that describe alerts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_enum_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_enum_fields" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_events(self, id, **kwargs):  # noqa: E501
        """Lists alert events for a specific alert.  # noqa: E501

        Lists alert events for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_events(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_events_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_events_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists alert events for a specific alert.  # noqa: E501

        Lists alert events for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_events_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_hx_host_endpoints(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific alert from an HX endpoint.  # noqa: E501

        Retrieves a specific alert from an HX endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_hx_host_endpoints(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_hx_host_endpoints_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_hx_host_endpoints_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific alert from an HX endpoint.  # noqa: E501

        Retrieves a specific alert from an HX endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_hx_host_endpoints_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_hx_host_endpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_hx_host_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_intel_context(self, id, **kwargs):  # noqa: E501
        """Gets the instances and indicators for a specific alert.  # noqa: E501

        Gets the instances and indicators for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_intel_context(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_intel_context_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_intel_context_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the instances and indicators for a specific alert.  # noqa: E501

        Gets the instances and indicators for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_intel_context_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_intel_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_intel_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/context', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_investigative_tips(self, id, **kwargs):  # noqa: E501
        """Lists the investigative tips for a specific alert.  # noqa: E501

        Lists the investigative tips for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_investigative_tips(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_investigative_tips_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_investigative_tips_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists the investigative tips for a specific alert.  # noqa: E501

        Lists the investigative tips for a specific alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_investigative_tips_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_investigative_tips" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_investigative_tips`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/tips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_md_investigation_results(self, id, **kwargs):  # noqa: E501
        """Retrieves Managed Defense investigation results for an alert.  # noqa: E501

        Retrieves Managed Defense investigation results for an alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_md_investigation_results(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_md_investigation_results_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_md_investigation_results_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves Managed Defense investigation results for an alert.  # noqa: E501

        Retrieves Managed Defense investigation results for an alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_md_investigation_results_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_md_investigation_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_md_investigation_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/investigations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_org_metrics(self, **kwargs):  # noqa: E501
        """Lists alert metrics by organization.  # noqa: E501

        Lists alert metrics by organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_org_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_org_metrics_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_get_org_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Lists alert metrics by organization.  # noqa: E501

        Lists alert metrics by organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_org_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_org_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//org_metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_revisions(self, id, **kwargs):  # noqa: E501
        """Returns the revision history.  # noqa: E501

        Returns the revision history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_revisions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_revisions_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_get_revisions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the revision history.  # noqa: E501

        Returns the revision history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_revisions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_revisions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_get_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_get_unique_values(self, **kwargs):  # noqa: E501
        """Lists the number of occurrences of each field value.  # noqa: E501

        Lists the number of occurrences of each field value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_unique_values(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_get_unique_values_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_get_unique_values_with_http_info(self, **kwargs):  # noqa: E501
        """Lists the number of occurrences of each field value.  # noqa: E501

        Lists the number of occurrences of each field value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_get_unique_values_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_get_unique_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_list(self, **kwargs):  # noqa: E501
        """v3_alerts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str alert_threat:
        :param str alert_type:
        :param str alert_type_destination:
        :param str alert_type_source:
        :param str alert_type_srcdst:
        :param str alert_type_summary:
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str created_at:
        :param str created_at__gte:
        :param str created_at__lte:
        :param str distinguishers:
        :param str mongo_id:
        :param str is_suppressed:
        :param str is_threat:
        :param str is_tuned:
        :param str message:
        :param str origin_id:
        :param str organization:
        :param str queues:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str type:
        :param str updated_at:
        :param str updated_at__gte:
        :param str updated_at__lte:
        :param str updated_by:
        :param str metaclasses:
        :param str products:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_list_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str alert_threat:
        :param str alert_type:
        :param str alert_type_destination:
        :param str alert_type_source:
        :param str alert_type_srcdst:
        :param str alert_type_summary:
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str created_at:
        :param str created_at__gte:
        :param str created_at__lte:
        :param str distinguishers:
        :param str mongo_id:
        :param str is_suppressed:
        :param str is_threat:
        :param str is_tuned:
        :param str message:
        :param str origin_id:
        :param str organization:
        :param str queues:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str type:
        :param str updated_at:
        :param str updated_at__gte:
        :param str updated_at__lte:
        :param str updated_by:
        :param str metaclasses:
        :param str products:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'alert_threat', 'alert_type', 'alert_type_destination', 'alert_type_source', 'alert_type_srcdst', 'alert_type_summary', 'assigned_to', 'classification', 'closed_state', 'confidence', 'created_at', 'created_at__gte', 'created_at__lte', 'distinguishers', 'mongo_id', 'is_suppressed', 'is_threat', 'is_tuned', 'message', 'origin_id', 'organization', 'queues', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'type', 'updated_at', 'updated_at__gte', 'updated_at__lte', 'updated_by', 'metaclasses', 'products', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'alert_threat' in local_var_params and local_var_params['alert_threat'] is not None:  # noqa: E501
            query_params.append(('alert_threat', local_var_params['alert_threat']))  # noqa: E501
        if 'alert_type' in local_var_params and local_var_params['alert_type'] is not None:  # noqa: E501
            query_params.append(('alert_type', local_var_params['alert_type']))  # noqa: E501
        if 'alert_type_destination' in local_var_params and local_var_params['alert_type_destination'] is not None:  # noqa: E501
            query_params.append(('alert_type_destination', local_var_params['alert_type_destination']))  # noqa: E501
        if 'alert_type_source' in local_var_params and local_var_params['alert_type_source'] is not None:  # noqa: E501
            query_params.append(('alert_type_source', local_var_params['alert_type_source']))  # noqa: E501
        if 'alert_type_srcdst' in local_var_params and local_var_params['alert_type_srcdst'] is not None:  # noqa: E501
            query_params.append(('alert_type_srcdst', local_var_params['alert_type_srcdst']))  # noqa: E501
        if 'alert_type_summary' in local_var_params and local_var_params['alert_type_summary'] is not None:  # noqa: E501
            query_params.append(('alert_type_summary', local_var_params['alert_type_summary']))  # noqa: E501
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'distinguishers' in local_var_params and local_var_params['distinguishers'] is not None:  # noqa: E501
            query_params.append(('distinguishers', local_var_params['distinguishers']))  # noqa: E501
        if 'mongo_id' in local_var_params and local_var_params['mongo_id'] is not None:  # noqa: E501
            query_params.append(('mongo_id', local_var_params['mongo_id']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_threat' in local_var_params and local_var_params['is_threat'] is not None:  # noqa: E501
            query_params.append(('is_threat', local_var_params['is_threat']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'organization' in local_var_params and local_var_params['organization'] is not None:  # noqa: E501
            query_params.append(('organization', local_var_params['organization']))  # noqa: E501
        if 'queues' in local_var_params and local_var_params['queues'] is not None:  # noqa: E501
            query_params.append(('queues', local_var_params['queues']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'metaclasses' in local_var_params and local_var_params['metaclasses'] is not None:  # noqa: E501
            query_params.append(('metaclasses', local_var_params['metaclasses']))  # noqa: E501
        if 'products' in local_var_params and local_var_params['products'] is not None:  # noqa: E501
            query_params.append(('products', local_var_params['products']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_create(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Adds a note to the specified alert or case.  # noqa: E501

        Adds a note to the specified alert or case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_create(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject109 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_create_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v3_alerts_notes_create_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Adds a note to the specified alert or case.  # noqa: E501

        Adds a note to the specified alert or case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_create_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject109 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_delete(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """Deletes the specified note.  # noqa: E501

        Deletes the specified note. You can only delete notes that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_delete(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_delete_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_alerts_notes_delete_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """Deletes the specified note.  # noqa: E501

        Deletes the specified note. You can only delete notes that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_delete_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_notes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_list(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v3_alerts_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_list(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_list_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v3_alerts_notes_list_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v3_alerts_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_list_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_partial_update(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_partial_update(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject110 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_partial_update_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_alerts_notes_partial_update_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_partial_update_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject110 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_notes_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_partial_update0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_partial_update0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject111 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_partial_update0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_alerts_notes_partial_update0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_partial_update0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject111 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_notes_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_notes_read(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_read(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_notes_read_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_alerts_notes_read_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_alerts_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_notes_read_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_notes_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_alerts_notes_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_notes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_object_id}/notes//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_plays_list(self, parent_lookup_alert, **kwargs):  # noqa: E501
        """v3_alerts_plays_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_list(parent_lookup_alert, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_plays_list_with_http_info(parent_lookup_alert, **kwargs)  # noqa: E501

    def v3_alerts_plays_list_with_http_info(self, parent_lookup_alert, **kwargs):  # noqa: E501
        """v3_alerts_plays_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_list_with_http_info(parent_lookup_alert, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alert', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_plays_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alert' is set
        if self.api_client.client_side_validation and ('parent_lookup_alert' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alert'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alert` when calling `v3_alerts_plays_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alert' in local_var_params:
            path_params['parent_lookup_alert'] = local_var_params['parent_lookup_alert']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alert}/plays/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_plays_read(self, parent_lookup_alert, id, **kwargs):  # noqa: E501
        """v3_alerts_plays_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_read(parent_lookup_alert, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_plays_read_with_http_info(parent_lookup_alert, id, **kwargs)  # noqa: E501

    def v3_alerts_plays_read_with_http_info(self, parent_lookup_alert, id, **kwargs):  # noqa: E501
        """v3_alerts_plays_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_read_with_http_info(parent_lookup_alert, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alert', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_plays_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alert' is set
        if self.api_client.client_side_validation and ('parent_lookup_alert' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alert'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alert` when calling `v3_alerts_plays_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_plays_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alert' in local_var_params:
            path_params['parent_lookup_alert'] = local_var_params['parent_lookup_alert']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alert}/plays//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_plays_search(self, parent_lookup_alert, **kwargs):  # noqa: E501
        """v3_alerts_plays_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_search(parent_lookup_alert, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_plays_search_with_http_info(parent_lookup_alert, **kwargs)  # noqa: E501

    def v3_alerts_plays_search_with_http_info(self, parent_lookup_alert, **kwargs):  # noqa: E501
        """v3_alerts_plays_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_plays_search_with_http_info(parent_lookup_alert, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_alert: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_alert']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_plays_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_alert' is set
        if self.api_client.client_side_validation and ('parent_lookup_alert' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_alert'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_alert` when calling `v3_alerts_plays_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_alert' in local_var_params:
            path_params['parent_lookup_alert'] = local_var_params['parent_lookup_alert']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{parent_lookup_alert}/plays//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_read(self, id, **kwargs):  # noqa: E501
        """v3_alerts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert_threat:
        :param str alert_type:
        :param str alert_type_destination:
        :param str alert_type_source:
        :param str alert_type_srcdst:
        :param str alert_type_summary:
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str created_at:
        :param str created_at__gte:
        :param str created_at__lte:
        :param str distinguishers:
        :param str mongo_id:
        :param str is_suppressed:
        :param str is_threat:
        :param str is_tuned:
        :param str message:
        :param str origin_id:
        :param str organization:
        :param str queues:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str type:
        :param str updated_at:
        :param str updated_at__gte:
        :param str updated_at__lte:
        :param str updated_by:
        :param str metaclasses:
        :param str products:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_alerts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert_threat:
        :param str alert_type:
        :param str alert_type_destination:
        :param str alert_type_source:
        :param str alert_type_srcdst:
        :param str alert_type_summary:
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str created_at:
        :param str created_at__gte:
        :param str created_at__lte:
        :param str distinguishers:
        :param str mongo_id:
        :param str is_suppressed:
        :param str is_threat:
        :param str is_tuned:
        :param str message:
        :param str origin_id:
        :param str organization:
        :param str queues:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str type:
        :param str updated_at:
        :param str updated_at__gte:
        :param str updated_at__lte:
        :param str updated_by:
        :param str metaclasses:
        :param str products:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'alert_threat', 'alert_type', 'alert_type_destination', 'alert_type_source', 'alert_type_srcdst', 'alert_type_summary', 'assigned_to', 'classification', 'closed_state', 'confidence', 'created_at', 'created_at__gte', 'created_at__lte', 'distinguishers', 'mongo_id', 'is_suppressed', 'is_threat', 'is_tuned', 'message', 'origin_id', 'organization', 'queues', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'type', 'updated_at', 'updated_at__gte', 'updated_at__lte', 'updated_by', 'metaclasses', 'products', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'alert_threat' in local_var_params and local_var_params['alert_threat'] is not None:  # noqa: E501
            query_params.append(('alert_threat', local_var_params['alert_threat']))  # noqa: E501
        if 'alert_type' in local_var_params and local_var_params['alert_type'] is not None:  # noqa: E501
            query_params.append(('alert_type', local_var_params['alert_type']))  # noqa: E501
        if 'alert_type_destination' in local_var_params and local_var_params['alert_type_destination'] is not None:  # noqa: E501
            query_params.append(('alert_type_destination', local_var_params['alert_type_destination']))  # noqa: E501
        if 'alert_type_source' in local_var_params and local_var_params['alert_type_source'] is not None:  # noqa: E501
            query_params.append(('alert_type_source', local_var_params['alert_type_source']))  # noqa: E501
        if 'alert_type_srcdst' in local_var_params and local_var_params['alert_type_srcdst'] is not None:  # noqa: E501
            query_params.append(('alert_type_srcdst', local_var_params['alert_type_srcdst']))  # noqa: E501
        if 'alert_type_summary' in local_var_params and local_var_params['alert_type_summary'] is not None:  # noqa: E501
            query_params.append(('alert_type_summary', local_var_params['alert_type_summary']))  # noqa: E501
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'distinguishers' in local_var_params and local_var_params['distinguishers'] is not None:  # noqa: E501
            query_params.append(('distinguishers', local_var_params['distinguishers']))  # noqa: E501
        if 'mongo_id' in local_var_params and local_var_params['mongo_id'] is not None:  # noqa: E501
            query_params.append(('mongo_id', local_var_params['mongo_id']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_threat' in local_var_params and local_var_params['is_threat'] is not None:  # noqa: E501
            query_params.append(('is_threat', local_var_params['is_threat']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'organization' in local_var_params and local_var_params['organization'] is not None:  # noqa: E501
            query_params.append(('organization', local_var_params['organization']))  # noqa: E501
        if 'queues' in local_var_params and local_var_params['queues'] is not None:  # noqa: E501
            query_params.append(('queues', local_var_params['queues']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'metaclasses' in local_var_params and local_var_params['metaclasses'] is not None:  # noqa: E501
            query_params.append(('metaclasses', local_var_params['metaclasses']))  # noqa: E501
        if 'products' in local_var_params and local_var_params['products'] is not None:  # noqa: E501
            query_params.append(('products', local_var_params['products']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_search(self, **kwargs):  # noqa: E501
        """v3_alerts_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_search_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_search_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_create(self, **kwargs):  # noqa: E501
        """v3_alerts_types_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject112 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_create_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_types_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_types_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject112 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_delete(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_types_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'type_id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_types_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'type_id' in local_var_params and local_var_params['type_id'] is not None:  # noqa: E501
            query_params.append(('type_id', local_var_params['type_id']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_list(self, **kwargs):  # noqa: E501
        """v3_alerts_types_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_list_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_types_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_types_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'category', 'is_internal', 'type_id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'type_id' in local_var_params and local_var_params['type_id'] is not None:  # noqa: E501
            query_params.append(('type_id', local_var_params['type_id']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_partial_update(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject113 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_types_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject113 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'type_id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_types_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'type_id' in local_var_params and local_var_params['type_id'] is not None:  # noqa: E501
            query_params.append(('type_id', local_var_params['type_id']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_partial_update0(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject114 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_types_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject114 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'type_id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_types_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'type_id' in local_var_params and local_var_params['type_id'] is not None:  # noqa: E501
            query_params.append(('type_id', local_var_params['type_id']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_read(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_alerts_types_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_alerts_types_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str type_id:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'type_id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_alerts_types_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'type_id' in local_var_params and local_var_params['type_id'] is not None:  # noqa: E501
            query_params.append(('type_id', local_var_params['type_id']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_alerts_types_search(self, **kwargs):  # noqa: E501
        """v3_alerts_types_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_alerts_types_search_with_http_info(**kwargs)  # noqa: E501

    def v3_alerts_types_search_with_http_info(self, **kwargs):  # noqa: E501
        """v3_alerts_types_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_alerts_types_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_alerts_types_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/alerts/types//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_appliances_get_appliance_health(self, **kwargs):  # noqa: E501
        """Provides a summary of the health of your FireEye network appliances.  # noqa: E501

        Provides a summary of the health of your FireEye network appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_get_appliance_health(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_appliances_get_appliance_health_with_http_info(**kwargs)  # noqa: E501

    def v3_appliances_get_appliance_health_with_http_info(self, **kwargs):  # noqa: E501
        """Provides a summary of the health of your FireEye network appliances.  # noqa: E501

        Provides a summary of the health of your FireEye network appliances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_get_appliance_health_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_appliances_get_appliance_health" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/appliances//health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_appliances_list(self, **kwargs):  # noqa: E501
        """v3_appliances_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_appliances_list_with_http_info(**kwargs)  # noqa: E501

    def v3_appliances_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_appliances_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_appliances_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/appliances/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_appliances_read(self, id, **kwargs):  # noqa: E501
        """Searches for appliance by ID (the deviceid from GET /appliances).  # noqa: E501

        Searches for appliance by ID (the deviceid from GET /appliances). :param request: Request object :param args: Arguments :param kwargs: Keyword Arguments :return: Dictionary of results from MqlClient response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_appliances_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_appliances_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Searches for appliance by ID (the deviceid from GET /appliances).  # noqa: E501

        Searches for appliance by ID (the deviceid from GET /appliances). :param request: Request object :param args: Arguments :param kwargs: Keyword Arguments :return: Dictionary of results from MqlClient response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_appliances_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_appliances_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_appliances_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/appliances//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_create(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the parent_lookup that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_create(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param InlineObject118 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_create_with_http_info(parent_lookup_play_execution, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_create_with_http_info(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the parent_lookup that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_create_with_http_info(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param InlineObject118 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_delete(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_delete(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_delete_with_http_info(parent_lookup_play_execution, id, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_delete_with_http_info(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_delete_with_http_info(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'id', 'content_type', 'created_by', 'filename', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_artifacts_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'filename' in local_var_params and local_var_params['filename'] is not None:  # noqa: E501
            query_params.append(('filename', local_var_params['filename']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_list(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_list(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_list_with_http_info(parent_lookup_play_execution, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_list_with_http_info(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_list_with_http_info(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'limit', 'offset', 'content_type', 'created_by', 'filename', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'filename' in local_var_params and local_var_params['filename'] is not None:  # noqa: E501
            query_params.append(('filename', local_var_params['filename']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_partial_update(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_partial_update(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject119 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_partial_update_with_http_info(parent_lookup_play_execution, id, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_partial_update_with_http_info(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_partial_update_with_http_info(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject119 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'id', 'content_type', 'created_by', 'filename', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_artifacts_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'filename' in local_var_params and local_var_params['filename'] is not None:  # noqa: E501
            query_params.append(('filename', local_var_params['filename']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_partial_update0(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_partial_update0(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject120 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_partial_update0_with_http_info(parent_lookup_play_execution, id, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_partial_update0_with_http_info(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_partial_update0_with_http_info(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject120 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'id', 'content_type', 'created_by', 'filename', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_artifacts_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'filename' in local_var_params and local_var_params['filename'] is not None:  # noqa: E501
            query_params.append(('filename', local_var_params['filename']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_read(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_read(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_read_with_http_info(parent_lookup_play_execution, id, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_read_with_http_info(self, parent_lookup_play_execution, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_read_with_http_info(parent_lookup_play_execution, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param str id: (required)
        :param str content_type:
        :param str created_by:
        :param str filename:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution', 'id', 'content_type', 'created_by', 'filename', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_artifacts_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'filename' in local_var_params and local_var_params['filename'] is not None:  # noqa: E501
            query_params.append(('filename', local_var_params['filename']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_artifacts_search(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_search(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_artifacts_search_with_http_info(parent_lookup_play_execution, **kwargs)  # noqa: E501

    def v3_automation_jobs_artifacts_search_with_http_info(self, parent_lookup_play_execution, **kwargs):  # noqa: E501
        """v3_automation_jobs_artifacts_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_artifacts_search_with_http_info(parent_lookup_play_execution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_play_execution: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_play_execution']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_artifacts_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_play_execution' is set
        if self.api_client.client_side_validation and ('parent_lookup_play_execution' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_play_execution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_play_execution` when calling `v3_automation_jobs_artifacts_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_play_execution' in local_var_params:
            path_params['parent_lookup_play_execution'] = local_var_params['parent_lookup_play_execution']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{parent_lookup_play_execution}/artifacts//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_create(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject115 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_create_with_http_info(**kwargs)  # noqa: E501

    def v3_automation_jobs_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject115 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_delete(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_automation_jobs_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'alert__mongo_id', 'created_by', 'status', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'alert__mongo_id' in local_var_params and local_var_params['alert__mongo_id'] is not None:  # noqa: E501
            query_params.append(('alert__mongo_id', local_var_params['alert__mongo_id']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_list(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_list_with_http_info(**kwargs)  # noqa: E501

    def v3_automation_jobs_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'alert__mongo_id', 'created_by', 'status', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'alert__mongo_id' in local_var_params and local_var_params['alert__mongo_id'] is not None:  # noqa: E501
            query_params.append(('alert__mongo_id', local_var_params['alert__mongo_id']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_partial_update(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject116 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_automation_jobs_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject116 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'alert__mongo_id', 'created_by', 'status', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'alert__mongo_id' in local_var_params and local_var_params['alert__mongo_id'] is not None:  # noqa: E501
            query_params.append(('alert__mongo_id', local_var_params['alert__mongo_id']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_partial_update0(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject117 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_automation_jobs_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject117 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'alert__mongo_id', 'created_by', 'status', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'alert__mongo_id' in local_var_params and local_var_params['alert__mongo_id'] is not None:  # noqa: E501
            query_params.append(('alert__mongo_id', local_var_params['alert__mongo_id']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_read(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_automation_jobs_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_automation_jobs_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str alert__mongo_id:
        :param str created_by:
        :param str status:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'alert__mongo_id', 'created_by', 'status', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_automation_jobs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'alert__mongo_id' in local_var_params and local_var_params['alert__mongo_id'] is not None:  # noqa: E501
            query_params.append(('alert__mongo_id', local_var_params['alert__mongo_id']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_automation_jobs_search(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_automation_jobs_search_with_http_info(**kwargs)  # noqa: E501

    def v3_automation_jobs_search_with_http_info(self, **kwargs):  # noqa: E501
        """v3_automation_jobs_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_automation_jobs_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_automation_jobs_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/automation/jobs//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_create(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_create(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param InlineObject125 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_create_with_http_info(parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_create_with_http_info(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_create_with_http_info(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param InlineObject125 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_incidents', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_delete(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Removes all alerts from a case.  # noqa: E501

        Removes all alerts from a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_delete(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_delete_with_http_info(parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_delete_with_http_info(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Removes all alerts from a case.  # noqa: E501

        Removes all alerts from a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_delete_with_http_info(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_incidents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_delete_0(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Removes the specified alert from a case.  # noqa: E501

        Removes the specified alert from a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_delete_0(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_delete_0_with_http_info(id, parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_delete_0_with_http_info(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Removes the specified alert from a case.  # noqa: E501

        Removes the specified alert from a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_delete_0_with_http_info(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_incidents', 'assigned_to', 'classification', 'closed_state', 'confidence', 'is_suppressed', 'is_tuned', 'origin_id', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_alerts_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_list(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_list(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_list_with_http_info(parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_list_with_http_info(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_list_with_http_info(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_incidents', 'limit', 'offset', 'assigned_to', 'classification', 'closed_state', 'confidence', 'is_suppressed', 'is_tuned', 'origin_id', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_partial_update(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_partial_update(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject126 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_partial_update_with_http_info(id, parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_partial_update_with_http_info(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_partial_update_with_http_info(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject126 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_incidents', 'assigned_to', 'classification', 'closed_state', 'confidence', 'is_suppressed', 'is_tuned', 'origin_id', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_alerts_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_partial_update0(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_partial_update0(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject127 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_partial_update0_with_http_info(id, parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_partial_update0_with_http_info(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_partial_update0_with_http_info(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject127 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_incidents', 'assigned_to', 'classification', 'closed_state', 'confidence', 'is_suppressed', 'is_tuned', 'origin_id', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_alerts_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_read(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_read(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_read_with_http_info(id, parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_read_with_http_info(self, id, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_read_with_http_info(id, parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_incidents: (required)
        :param str assigned_to:
        :param float classification:
        :param str closed_state:
        :param str confidence:
        :param str is_suppressed:
        :param str is_tuned:
        :param str origin_id:
        :param str risk:
        :param str severity:
        :param str state:
        :param float threat_type:
        :param str trigger_id:
        :param float trigger_revision:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_incidents', 'assigned_to', 'classification', 'closed_state', 'confidence', 'is_suppressed', 'is_tuned', 'origin_id', 'risk', 'severity', 'state', 'threat_type', 'trigger_id', 'trigger_revision', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_alerts_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'closed_state' in local_var_params and local_var_params['closed_state'] is not None:  # noqa: E501
            query_params.append(('closed_state', local_var_params['closed_state']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'is_suppressed' in local_var_params and local_var_params['is_suppressed'] is not None:  # noqa: E501
            query_params.append(('is_suppressed', local_var_params['is_suppressed']))  # noqa: E501
        if 'is_tuned' in local_var_params and local_var_params['is_tuned'] is not None:  # noqa: E501
            query_params.append(('is_tuned', local_var_params['is_tuned']))  # noqa: E501
        if 'origin_id' in local_var_params and local_var_params['origin_id'] is not None:  # noqa: E501
            query_params.append(('origin_id', local_var_params['origin_id']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'threat_type' in local_var_params and local_var_params['threat_type'] is not None:  # noqa: E501
            query_params.append(('threat_type', local_var_params['threat_type']))  # noqa: E501
        if 'trigger_id' in local_var_params and local_var_params['trigger_id'] is not None:  # noqa: E501
            query_params.append(('trigger_id', local_var_params['trigger_id']))  # noqa: E501
        if 'trigger_revision' in local_var_params and local_var_params['trigger_revision'] is not None:  # noqa: E501
            query_params.append(('trigger_revision', local_var_params['trigger_revision']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_search(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_search(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_search_with_http_info(parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_search_with_http_info(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_search_with_http_info(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_incidents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_alerts_update(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_update(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param InlineObject124 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_alerts_update_with_http_info(parent_lookup_incidents, **kwargs)  # noqa: E501

    def v3_cases_alerts_update_with_http_info(self, parent_lookup_incidents, **kwargs):  # noqa: E501
        """Alerts associated with a case.  # noqa: E501

        Alerts associated with a case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_alerts_update_with_http_info(parent_lookup_incidents, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_incidents: (required)
        :param InlineObject124 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_incidents', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_alerts_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_incidents' is set
        if self.api_client.client_side_validation and ('parent_lookup_incidents' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_incidents'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_incidents` when calling `v3_cases_alerts_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_incidents' in local_var_params:
            path_params['parent_lookup_incidents'] = local_var_params['parent_lookup_incidents']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_incidents}/alerts/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_create(self, **kwargs):  # noqa: E501
        """v3_cases_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject121 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_create_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_cases_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject121 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_delete(self, id, **kwargs):  # noqa: E501
        """v3_cases_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_cases_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'assigned_to', 'created_by', 'id2', 'name', 'priority', 'severity', 'state', 'status', 'tags', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'id2' in local_var_params and local_var_params['id2'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id2']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'priority' in local_var_params and local_var_params['priority'] is not None:  # noqa: E501
            query_params.append(('priority', local_var_params['priority']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_export_all(self, **kwargs):  # noqa: E501
        """Creates an export file in JSON format.  # noqa: E501

        Creates an export file in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_export_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_export_all_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_export_all_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an export file in JSON format.  # noqa: E501

        Creates an export file in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_export_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_export_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_export_single(self, id, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_export_single(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_export_single_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_export_single_with_http_info(self, id, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_export_single_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_export_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_export_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_get_all_existing_case_statuses_with_counts(self, **kwargs):  # noqa: E501
        """Returns an object containing various status values with their respective counts.  # noqa: E501

        Returns an object containing various status values with their respective counts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_all_existing_case_statuses_with_counts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_get_all_existing_case_statuses_with_counts_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_get_all_existing_case_statuses_with_counts_with_http_info(self, **kwargs):  # noqa: E501
        """Returns an object containing various status values with their respective counts.  # noqa: E501

        Returns an object containing various status values with their respective counts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_all_existing_case_statuses_with_counts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_get_all_existing_case_statuses_with_counts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_get_all_tags(self, **kwargs):  # noqa: E501
        """Retrieves the number of tags associated with cases and the tags themselves.  # noqa: E501

        Retrieves the number of tags associated with cases and the tags themselves.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_all_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_get_all_tags_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_get_all_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the number of tags associated with cases and the tags themselves.  # noqa: E501

        Retrieves the number of tags associated with cases and the tags themselves.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_all_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_get_all_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_get_revisions(self, id, **kwargs):  # noqa: E501
        """Returns the revision history.  # noqa: E501

        Returns the revision history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_revisions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_get_revisions_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_get_revisions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the revision history.  # noqa: E501

        Returns the revision history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_get_revisions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_get_revisions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_get_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_list(self, **kwargs):  # noqa: E501
        """v3_cases_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str assigned_to:
        :param str created_by:
        :param str id:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_list_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_cases_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str assigned_to:
        :param str created_by:
        :param str id:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'assigned_to', 'created_by', 'id', 'name', 'priority', 'severity', 'state', 'status', 'tags', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'priority' in local_var_params and local_var_params['priority'] is not None:  # noqa: E501
            query_params.append(('priority', local_var_params['priority']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_create(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Adds a note to the specified alert or case.  # noqa: E501

        Adds a note to the specified alert or case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_create(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject128 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_create_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v3_cases_notes_create_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """Adds a note to the specified alert or case.  # noqa: E501

        Adds a note to the specified alert or case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_create_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param InlineObject128 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_delete(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """Deletes the specified note.  # noqa: E501

        Deletes the specified note. You can only delete notes that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_delete(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_delete_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_cases_notes_delete_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """Deletes the specified note.  # noqa: E501

        Deletes the specified note. You can only delete notes that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_delete_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_notes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_list(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v3_cases_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_list(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_list_with_http_info(parent_lookup_object_id, **kwargs)  # noqa: E501

    def v3_cases_notes_list_with_http_info(self, parent_lookup_object_id, **kwargs):  # noqa: E501
        """v3_cases_notes_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_list_with_http_info(parent_lookup_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_partial_update(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_partial_update(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject129 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_partial_update_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_cases_notes_partial_update_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_partial_update_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject129 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_notes_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_partial_update0(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_partial_update0(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject130 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_partial_update0_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_cases_notes_partial_update0_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_partial_update0_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject130 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_partial_update0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_notes_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_notes_read(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_read(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_notes_read_with_http_info(parent_lookup_object_id, id, **kwargs)  # noqa: E501

    def v3_cases_notes_read_with_http_info(self, parent_lookup_object_id, id, **kwargs):  # noqa: E501
        """v3_cases_notes_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_notes_read_with_http_info(parent_lookup_object_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_object_id: (required)
        :param str id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_object_id', 'id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_notes_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_object_id' is set
        if self.api_client.client_side_validation and ('parent_lookup_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_object_id` when calling `v3_cases_notes_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_notes_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_object_id' in local_var_params:
            path_params['parent_lookup_object_id'] = local_var_params['parent_lookup_object_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{parent_lookup_object_id}/notes//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_partial_update(self, id, **kwargs):  # noqa: E501
        """v3_cases_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject122 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_cases_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject122 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'assigned_to', 'created_by', 'id2', 'name', 'priority', 'severity', 'state', 'status', 'tags', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'id2' in local_var_params and local_var_params['id2'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id2']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'priority' in local_var_params and local_var_params['priority'] is not None:  # noqa: E501
            query_params.append(('priority', local_var_params['priority']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_partial_update0(self, id, **kwargs):  # noqa: E501
        """v3_cases_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject123 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_cases_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject123 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'assigned_to', 'created_by', 'id2', 'name', 'priority', 'severity', 'state', 'status', 'tags', 'updated_by', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'id2' in local_var_params and local_var_params['id2'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id2']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'priority' in local_var_params and local_var_params['priority'] is not None:  # noqa: E501
            query_params.append(('priority', local_var_params['priority']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_read(self, id, **kwargs):  # noqa: E501
        """v3_cases_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_cases_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_cases_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str assigned_to:
        :param str created_by:
        :param str id2:
        :param str name:
        :param str priority:
        :param float severity:
        :param str state:
        :param str status:
        :param str tags:
        :param str updated_by:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'assigned_to', 'created_by', 'id2', 'name', 'priority', 'severity', 'state', 'status', 'tags', 'updated_by', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_cases_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'assigned_to' in local_var_params and local_var_params['assigned_to'] is not None:  # noqa: E501
            query_params.append(('assigned_to', local_var_params['assigned_to']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'id2' in local_var_params and local_var_params['id2'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id2']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'priority' in local_var_params and local_var_params['priority'] is not None:  # noqa: E501
            query_params.append(('priority', local_var_params['priority']))  # noqa: E501
        if 'severity' in local_var_params and local_var_params['severity'] is not None:  # noqa: E501
            query_params.append(('severity', local_var_params['severity']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_cases_search(self, **kwargs):  # noqa: E501
        """v3_cases_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_cases_search_with_http_info(**kwargs)  # noqa: E501

    def v3_cases_search_with_http_info(self, **kwargs):  # noqa: E501
        """v3_cases_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_cases_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_cases_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/cases//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_clone(self, id, **kwargs):  # noqa: E501
        """Clones the specified dashboard, including all widgets.  # noqa: E501

        Clones the specified dashboard, including all widgets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_clone(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject134 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_clone_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_clone_with_http_info(self, id, **kwargs):  # noqa: E501
        """Clones the specified dashboard, including all widgets.  # noqa: E501

        Clones the specified dashboard, including all widgets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_clone_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject134 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_create(self, **kwargs):  # noqa: E501
        """Creates a dashboard.  # noqa: E501

        Creates a dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject131 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_create_with_http_info(**kwargs)  # noqa: E501

    def v3_dashboards_create_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a dashboard.  # noqa: E501

        Creates a dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject131 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_delete(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'is_deleted', 'is_internal', 'is_public', 'tags', 'title', 'created_at', 'created_by', 'updated_at', 'description', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'is_deleted' in local_var_params and local_var_params['is_deleted'] is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_create(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_create(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject137 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_create_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_create_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_create_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject137 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_delete(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_delete(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_delete_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_delete_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_delete_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_delete_0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_delete_0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_delete_0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_delete_0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_delete_0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_favorite_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_list(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_list(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_list_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_list_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_list_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_partial_update(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_partial_update(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param InlineObject138 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_partial_update_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_partial_update_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_partial_update_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param InlineObject138 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_favorite_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_partial_update0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_partial_update0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param InlineObject139 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_partial_update0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_partial_update0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_partial_update0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param InlineObject139 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_favorite_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_read(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_read(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_read_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_read_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_read_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_favorite_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_favorite_update(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_update(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject136 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_favorite_update_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_favorite_update_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_favorite_update_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject136 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_favorite_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_favorite_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/favorite/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_get_all_tags(self, **kwargs):  # noqa: E501
        """Lists all tags associated with dashboards.  # noqa: E501

        Lists all tags associated with dashboards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_get_all_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_get_all_tags_with_http_info(**kwargs)  # noqa: E501

    def v3_dashboards_get_all_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all tags associated with dashboards.  # noqa: E501

        Lists all tags associated with dashboards.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_get_all_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_get_all_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_list_with_http_info(**kwargs)  # noqa: E501

    def v3_dashboards_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'is_deleted', 'is_internal', 'is_public', 'tags', 'title', 'created_at', 'created_by', 'updated_at', 'description', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'is_deleted' in local_var_params and local_var_params['is_deleted'] is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject132 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject132 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'is_deleted', 'is_internal', 'is_public', 'tags', 'title', 'created_at', 'created_by', 'updated_at', 'description', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'is_deleted' in local_var_params and local_var_params['is_deleted'] is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject133 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject133 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'is_deleted', 'is_internal', 'is_public', 'tags', 'title', 'created_at', 'created_by', 'updated_at', 'description', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'is_deleted' in local_var_params and local_var_params['is_deleted'] is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_read(self, id, **kwargs):  # noqa: E501
        """Retrieves the specified dashboard.  # noqa: E501

        Retrieves the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the specified dashboard.  # noqa: E501

        Retrieves the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str is_deleted:
        :param str is_internal:
        :param str is_public:
        :param str tags:
        :param str title:
        :param str created_at:
        :param str created_by:
        :param str updated_at:
        :param str description:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'is_deleted', 'is_internal', 'is_public', 'tags', 'title', 'created_at', 'created_by', 'updated_at', 'description', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'is_deleted' in local_var_params and local_var_params['is_deleted'] is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_create(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_create(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject140 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_create_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_create_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_create_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject140 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_delete(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_delete(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_delete_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_delete_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_delete_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_delete_0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_delete_0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_delete_0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_delete_0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_delete_0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_reports_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_export_pdf(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_export_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_export_pdf(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_export_pdf_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_export_pdf_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_export_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_export_pdf_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_export_pdf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_reports_export_pdf`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_export_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_list(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_list(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_list_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_list_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_list_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'limit', 'offset', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_partial_update(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_partial_update(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject141 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_partial_update_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_partial_update_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_partial_update_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject141 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_reports_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_partial_update0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_partial_update0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject142 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_partial_update0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_partial_update0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_partial_update0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject142 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_reports_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_read(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Override to include widget result serializer  # noqa: E501

        Override to include widget result serializer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_read(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_read_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_read_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Override to include widget result serializer  # noqa: E501

        Override to include widget result serializer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_read_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_reports_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_reports_search(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_search(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_reports_search_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_reports_search_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """v3_dashboards_reports_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_reports_search_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_reports_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_reports_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/reports//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_create(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_create(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject144 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_create_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_create_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_create_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject144 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_delete(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_delete(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_delete_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_delete_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_delete_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_delete_0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_delete_0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_delete_0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_delete_0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_delete_0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_schedule_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_list(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_list(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_list_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_list_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_list_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'limit', 'offset', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_partial_update(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_partial_update(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject145 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_partial_update_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_partial_update_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_partial_update_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject145 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_schedule_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_partial_update0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_partial_update0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject146 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_partial_update0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_partial_update0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_partial_update0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject146 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_schedule_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_read(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_read(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_read_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_read_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_read_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_schedule_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedule_update(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_update(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject143 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedule_update_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_schedule_update_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedule_update_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject143 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedule_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_schedule_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/schedule/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_schedules_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedules_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_schedules_list_with_http_info(**kwargs)  # noqa: E501

    def v3_dashboards_schedules_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_schedules_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str dashboard:
        :param str email_recipients:
        :param str email_password:
        :param str email_pdf:
        :param str is_enabled:
        :param str latest_run:
        :param str repeat:
        :param str repeat_on: Multiple values may be separated by commas.
        :param str run_at:
        :param str dashboard_title:
        :param str is_internal:
        :param str is_public:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'dashboard', 'email_recipients', 'email_password', 'email_pdf', 'is_enabled', 'latest_run', 'repeat', 'repeat_on', 'run_at', 'dashboard_title', 'is_internal', 'is_public', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_schedules_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'email_recipients' in local_var_params and local_var_params['email_recipients'] is not None:  # noqa: E501
            query_params.append(('email_recipients', local_var_params['email_recipients']))  # noqa: E501
        if 'email_password' in local_var_params and local_var_params['email_password'] is not None:  # noqa: E501
            query_params.append(('email_password', local_var_params['email_password']))  # noqa: E501
        if 'email_pdf' in local_var_params and local_var_params['email_pdf'] is not None:  # noqa: E501
            query_params.append(('email_pdf', local_var_params['email_pdf']))  # noqa: E501
        if 'is_enabled' in local_var_params and local_var_params['is_enabled'] is not None:  # noqa: E501
            query_params.append(('is_enabled', local_var_params['is_enabled']))  # noqa: E501
        if 'latest_run' in local_var_params and local_var_params['latest_run'] is not None:  # noqa: E501
            query_params.append(('latest_run', local_var_params['latest_run']))  # noqa: E501
        if 'repeat' in local_var_params and local_var_params['repeat'] is not None:  # noqa: E501
            query_params.append(('repeat', local_var_params['repeat']))  # noqa: E501
        if 'repeat_on' in local_var_params and local_var_params['repeat_on'] is not None:  # noqa: E501
            query_params.append(('repeat_on', local_var_params['repeat_on']))  # noqa: E501
        if 'run_at' in local_var_params and local_var_params['run_at'] is not None:  # noqa: E501
            query_params.append(('run_at', local_var_params['run_at']))  # noqa: E501
        if 'dashboard_title' in local_var_params and local_var_params['dashboard_title'] is not None:  # noqa: E501
            query_params.append(('dashboard_title', local_var_params['dashboard_title']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards/schedules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_search(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_search_with_http_info(**kwargs)  # noqa: E501

    def v3_dashboards_search_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_subscribe(self, id, **kwargs):  # noqa: E501
        """Subscribes/Unsubscribes the current user from receiving  # noqa: E501

        Subscribes/Unsubscribes the current user from receiving email notifications on a dashboard report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_subscribe(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject135 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_subscribe_with_http_info(id, **kwargs)  # noqa: E501

    def v3_dashboards_subscribe_with_http_info(self, id, **kwargs):  # noqa: E501
        """Subscribes/Unsubscribes the current user from receiving  # noqa: E501

        Subscribes/Unsubscribes the current user from receiving email notifications on a dashboard report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_subscribe_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject135 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_subscribe" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_subscribe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{id}/subscribe', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_create(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Creates a widget for the specified dashboard.  # noqa: E501

        Creates a widget for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_create(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject148 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_create_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_create_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Creates a widget for the specified dashboard.  # noqa: E501

        Creates a widget for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_create_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject148 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_delete(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Deletes all widgets from the specified dashboard.  # noqa: E501

        Deletes all widgets from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_delete(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_delete_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_delete_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Deletes all widgets from the specified dashboard.  # noqa: E501

        Deletes all widgets from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_delete_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_delete_0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Deletes a widget from the specified dashboard.  # noqa: E501

        Deletes a widget from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_delete_0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_delete_0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_delete_0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Deletes a widget from the specified dashboard.  # noqa: E501

        Deletes a widget from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_delete_0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_widgets_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_list(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_list(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_list_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_list_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_list_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_partial_update(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_partial_update(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject149 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_partial_update_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_partial_update_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_partial_update_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject149 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_widgets_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_partial_update0(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_partial_update0(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject150 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_partial_update0_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_partial_update0_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_partial_update0_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject150 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_widgets_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_perform_search(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Returns the results of a dashboard widget.  # noqa: E501

        Returns the results of a dashboard widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_perform_search(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_perform_search_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_perform_search_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Returns the results of a dashboard widget.  # noqa: E501

        Returns the results of a dashboard widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_perform_search_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_perform_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_widgets_perform_search`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_perform_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//{id}/results/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_read(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_read(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_read_with_http_info(id, parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_read_with_http_info(self, id, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_read_with_http_info(id, parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_dashboard: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_dashboard', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_dashboards_widgets_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_search(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_search(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_search_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_search_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_search_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dashboards_widgets_update(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Updates all widgets for the specified dashboard.  # noqa: E501

        Updates all widgets for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_update(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject147 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dashboards_widgets_update_with_http_info(parent_lookup_dashboard, **kwargs)  # noqa: E501

    def v3_dashboards_widgets_update_with_http_info(self, parent_lookup_dashboard, **kwargs):  # noqa: E501
        """Updates all widgets for the specified dashboard.  # noqa: E501

        Updates all widgets for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dashboards_widgets_update_with_http_info(parent_lookup_dashboard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_dashboard: (required)
        :param InlineObject147 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_dashboard', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dashboards_widgets_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_dashboard' is set
        if self.api_client.client_side_validation and ('parent_lookup_dashboard' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_dashboard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_dashboard` when calling `v3_dashboards_widgets_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_dashboard' in local_var_params:
            path_params['parent_lookup_dashboard'] = local_var_params['parent_lookup_dashboard']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/dashboards//{parent_lookup_dashboard}/widgets/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_domains_resolve_list(self, **kwargs):  # noqa: E501
        """v3_domains_resolve_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_domains_resolve_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_domains_resolve_list_with_http_info(**kwargs)  # noqa: E501

    def v3_domains_resolve_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_domains_resolve_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_domains_resolve_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_domains_resolve_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/domains/resolve', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_fields_analytics_list(self, **kwargs):  # noqa: E501
        """v3_fields_analytics_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_fields_analytics_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_fields_analytics_list_with_http_info(**kwargs)  # noqa: E501

    def v3_fields_analytics_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_fields_analytics_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_fields_analytics_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fields_analytics_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/fields/analytics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_indicators_stream_list(self, **kwargs):  # noqa: E501
        """v3_indicators_stream_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_indicators_stream_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_indicators_stream_list_with_http_info(**kwargs)  # noqa: E501

    def v3_indicators_stream_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_indicators_stream_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_indicators_stream_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_indicators_stream_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/indicators/stream/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_indicators_stream_read(self, id, **kwargs):  # noqa: E501
        """v3_indicators_stream_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_indicators_stream_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_indicators_stream_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_indicators_stream_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_indicators_stream_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_indicators_stream_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str query: Mongo JSON query syntax used to filter for specific results. See https://docs.mongodb.com/manual/reference/operator/query-comparison/ for more information on Mongo JSON query operators. Here is an example of the syntax for this filter:  ?query={\"state\":{\"$in\":[\"Open\",\"Reopened\"]},\"suppressed\":false}
        :param str sort: Comma-separated list of field names to sort the results by. For example: \"createDate\" or \"-updateDate,riskOrder\"
        :param str fields: Comma-separated list of field names to only select or exclude from the resulting data.
        :param str includes: Comma-separated list of field names to expand an ID into a full object representation of the related data.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'query', 'sort', 'fields', 'includes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_indicators_stream_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_indicators_stream_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'includes' in local_var_params and local_var_params['includes'] is not None:  # noqa: E501
            query_params.append(('includes', local_var_params['includes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/indicators/stream//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_intel_context_characteristics_list(self, **kwargs):  # noqa: E501
        """v3_intel_context_characteristics_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_intel_context_characteristics_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_intel_context_characteristics_list_with_http_info(**kwargs)  # noqa: E501

    def v3_intel_context_characteristics_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_intel_context_characteristics_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_intel_context_characteristics_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_intel_context_characteristics_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/intel/context/characteristics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_create(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject151 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_create_with_http_info(**kwargs)  # noqa: E501

    def v3_lists_create_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject151 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_delete(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_lists_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'created_at', 'description', 'is_active', 'is_internal', 'is_protected', 'name', 'short_name', 'type', 'updated_at', 'usage', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'is_active' in local_var_params and local_var_params['is_active'] is not None:  # noqa: E501
            query_params.append(('is_active', local_var_params['is_active']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'short_name' in local_var_params and local_var_params['short_name'] is not None:  # noqa: E501
            query_params.append(('short_name', local_var_params['short_name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_export_all(self, **kwargs):  # noqa: E501
        """Creates an export file in JSON format.  # noqa: E501

        Creates an export file in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_export_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_export_all_with_http_info(**kwargs)  # noqa: E501

    def v3_lists_export_all_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an export file in JSON format.  # noqa: E501

        Creates an export file in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_export_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_export_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_export_single(self, id, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_export_single(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_export_single_with_http_info(id, **kwargs)  # noqa: E501

    def v3_lists_export_single_with_http_info(self, id, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_export_single_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_export_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_export_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_create(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_create(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param InlineObject154 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_create_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_create_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_create_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param InlineObject154 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_delete(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Deletes list items from the specified list. You cannot delete items from internal or protected lists.  # noqa: E501

        Deletes list items from the specified list. You cannot delete items from internal or protected lists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_delete(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_delete_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_delete_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Deletes list items from the specified list. You cannot delete items from internal or protected lists.  # noqa: E501

        Deletes list items from the specified list. You cannot delete items from internal or protected lists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_delete_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_delete_0(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_delete_0(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_delete_0_with_http_info(id, parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_delete_0_with_http_info(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_delete_0_with_http_info(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_list', 'list_type', 'list', 'notes', 'risk', 'type', 'usage', 'value', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_items_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []
        if 'list_type' in local_var_params and local_var_params['list_type'] is not None:  # noqa: E501
            query_params.append(('list_type', local_var_params['list_type']))  # noqa: E501
        if 'list' in local_var_params and local_var_params['list'] is not None:  # noqa: E501
            query_params.append(('list', local_var_params['list']))  # noqa: E501
        if 'notes' in local_var_params and local_var_params['notes'] is not None:  # noqa: E501
            query_params.append(('notes', local_var_params['notes']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_export(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports the specified list as a JSON file.  # noqa: E501

        Exports the specified list as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_export(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_export_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_export_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports the specified list as a JSON file.  # noqa: E501

        Exports the specified list as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_export_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_export" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_export_single(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_export_single(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_export_single_with_http_info(id, parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_export_single_with_http_info(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports the specified case to a JSON file.  # noqa: E501

        Exports the specified case to a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_export_single_with_http_info(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_export_single" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_items_export_single`")  # noqa: E501
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_export_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_list(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_list(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_list_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_list_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_list_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list', 'limit', 'offset', 'list_type', 'list', 'notes', 'risk', 'type', 'usage', 'value', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'list_type' in local_var_params and local_var_params['list_type'] is not None:  # noqa: E501
            query_params.append(('list_type', local_var_params['list_type']))  # noqa: E501
        if 'list' in local_var_params and local_var_params['list'] is not None:  # noqa: E501
            query_params.append(('list', local_var_params['list']))  # noqa: E501
        if 'notes' in local_var_params and local_var_params['notes'] is not None:  # noqa: E501
            query_params.append(('notes', local_var_params['notes']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_partial_update(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_partial_update(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject156 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_partial_update_with_http_info(id, parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_partial_update_with_http_info(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_partial_update_with_http_info(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject156 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_list', 'list_type', 'list', 'notes', 'risk', 'type', 'usage', 'value', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_items_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []
        if 'list_type' in local_var_params and local_var_params['list_type'] is not None:  # noqa: E501
            query_params.append(('list_type', local_var_params['list_type']))  # noqa: E501
        if 'list' in local_var_params and local_var_params['list'] is not None:  # noqa: E501
            query_params.append(('list', local_var_params['list']))  # noqa: E501
        if 'notes' in local_var_params and local_var_params['notes'] is not None:  # noqa: E501
            query_params.append(('notes', local_var_params['notes']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_partial_update0(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_partial_update0(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject157 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_partial_update0_with_http_info(id, parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_partial_update0_with_http_info(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_partial_update0_with_http_info(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject157 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_list', 'list_type', 'list', 'notes', 'risk', 'type', 'usage', 'value', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_items_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []
        if 'list_type' in local_var_params and local_var_params['list_type'] is not None:  # noqa: E501
            query_params.append(('list_type', local_var_params['list_type']))  # noqa: E501
        if 'list' in local_var_params and local_var_params['list'] is not None:  # noqa: E501
            query_params.append(('list', local_var_params['list']))  # noqa: E501
        if 'notes' in local_var_params and local_var_params['notes'] is not None:  # noqa: E501
            query_params.append(('notes', local_var_params['notes']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_read(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_read(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_read_with_http_info(id, parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_read_with_http_info(self, id, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_read_with_http_info(id, parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_list: (required)
        :param str list_type:
        :param str list:
        :param str notes:
        :param str risk:
        :param str type:
        :param str usage: Multiple values may be separated by commas.
        :param str value:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_list', 'list_type', 'list', 'notes', 'risk', 'type', 'usage', 'value', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_items_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []
        if 'list_type' in local_var_params and local_var_params['list_type'] is not None:  # noqa: E501
            query_params.append(('list_type', local_var_params['list_type']))  # noqa: E501
        if 'list' in local_var_params and local_var_params['list'] is not None:  # noqa: E501
            query_params.append(('list', local_var_params['list']))  # noqa: E501
        if 'notes' in local_var_params and local_var_params['notes'] is not None:  # noqa: E501
            query_params.append(('notes', local_var_params['notes']))  # noqa: E501
        if 'risk' in local_var_params and local_var_params['risk'] is not None:  # noqa: E501
            query_params.append(('risk', local_var_params['risk']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_search(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_search(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_search_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_search_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Exports list items as a JSON file.  # noqa: E501

        Exports list items as a JSON file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_search_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_types_list(self, **kwargs):  # noqa: E501
        """Returns all list item types and their labels.  # noqa: E501

        Returns all list item types and their labels.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_types_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_types_list_with_http_info(**kwargs)  # noqa: E501

    def v3_lists_items_types_list_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all list item types and their labels.  # noqa: E501

        Returns all list item types and their labels.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_types_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_types_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists/items/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_items_upload(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Imports list items into the specified list.  # noqa: E501

        Imports list items into the specified list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_upload(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param InlineObject155 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_items_upload_with_http_info(parent_lookup_list, **kwargs)  # noqa: E501

    def v3_lists_items_upload_with_http_info(self, parent_lookup_list, **kwargs):  # noqa: E501
        """Imports list items into the specified list.  # noqa: E501

        Imports list items into the specified list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_items_upload_with_http_info(parent_lookup_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_list: (required)
        :param InlineObject155 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_list', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_items_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_list' is set
        if self.api_client.client_side_validation and ('parent_lookup_list' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_list'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_list` when calling `v3_lists_items_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_list' in local_var_params:
            path_params['parent_lookup_list'] = local_var_params['parent_lookup_list']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{parent_lookup_list}/items//import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_list(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_list_with_http_info(**kwargs)  # noqa: E501

    def v3_lists_list_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'created_at', 'description', 'is_active', 'is_internal', 'is_protected', 'name', 'short_name', 'type', 'updated_at', 'usage', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'is_active' in local_var_params and local_var_params['is_active'] is not None:  # noqa: E501
            query_params.append(('is_active', local_var_params['is_active']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'short_name' in local_var_params and local_var_params['short_name'] is not None:  # noqa: E501
            query_params.append(('short_name', local_var_params['short_name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_partial_update(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject152 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_lists_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject152 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'created_at', 'description', 'is_active', 'is_internal', 'is_protected', 'name', 'short_name', 'type', 'updated_at', 'usage', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'is_active' in local_var_params and local_var_params['is_active'] is not None:  # noqa: E501
            query_params.append(('is_active', local_var_params['is_active']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'short_name' in local_var_params and local_var_params['short_name'] is not None:  # noqa: E501
            query_params.append(('short_name', local_var_params['short_name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_partial_update0(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject153 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_lists_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject153 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'created_at', 'description', 'is_active', 'is_internal', 'is_protected', 'name', 'short_name', 'type', 'updated_at', 'usage', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'is_active' in local_var_params and local_var_params['is_active'] is not None:  # noqa: E501
            query_params.append(('is_active', local_var_params['is_active']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'short_name' in local_var_params and local_var_params['short_name'] is not None:  # noqa: E501
            query_params.append(('short_name', local_var_params['short_name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_read(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_lists_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str created_at:
        :param str description:
        :param str is_active:
        :param str is_internal:
        :param str is_protected:
        :param str name:
        :param str short_name:
        :param str type:
        :param str updated_at:
        :param str usage: Multiple values may be separated by commas.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'created_at', 'description', 'is_active', 'is_internal', 'is_protected', 'name', 'short_name', 'type', 'updated_at', 'usage', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_lists_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'is_active' in local_var_params and local_var_params['is_active'] is not None:  # noqa: E501
            query_params.append(('is_active', local_var_params['is_active']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'short_name' in local_var_params and local_var_params['short_name'] is not None:  # noqa: E501
            query_params.append(('short_name', local_var_params['short_name']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'usage' in local_var_params and local_var_params['usage'] is not None:  # noqa: E501
            query_params.append(('usage', local_var_params['usage']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_lists_search(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_lists_search_with_http_info(**kwargs)  # noqa: E501

    def v3_lists_search_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Lists.  You can search for specific lists by name,  # noqa: E501

        Returns a list of Lists.  You can search for specific lists by name, short_name, type, or description.  Results can be ordered by name, short_name, type, is_internal, is_protected, is_active, created_at, updated_at, description, or item_count. The response does not inlcude list items. To get a list of list items, use GET /v3/lists/export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_lists_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_lists_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/lists//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_patterndb_create(self, **kwargs):  # noqa: E501
        """v3_patterndb_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_patterndb_create_with_http_info(**kwargs)  # noqa: E501

    def v3_patterndb_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_patterndb_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_patterndb_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/patterndb/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_patterndb_delete(self, id, **kwargs):  # noqa: E501
        """v3_patterndb_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_patterndb_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_patterndb_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_patterndb_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_patterndb_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_patterndb_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/patterndb//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_patterndb_export(self, id, **kwargs):  # noqa: E501
        """v3_patterndb_export  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_export(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_patterndb_export_with_http_info(id, **kwargs)  # noqa: E501

    def v3_patterndb_export_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_patterndb_export  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_export_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_patterndb_export" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_patterndb_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/patterndb//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_patterndb_list(self, **kwargs):  # noqa: E501
        """v3_patterndb_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_patterndb_list_with_http_info(**kwargs)  # noqa: E501

    def v3_patterndb_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_patterndb_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_patterndb_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_patterndb_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/patterndb/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject158 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_create_with_http_info(**kwargs)  # noqa: E501

    def v3_playbooks_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject158 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_delete(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_list_with_http_info(**kwargs)  # noqa: E501

    def v3_playbooks_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject159 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject159 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject160 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject160 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_plays_create(self, id, **kwargs):  # noqa: E501
        """Override the default create method to add playbook_id  # noqa: E501

        Override the default create method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_plays_create(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject161 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_plays_create_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_plays_create_with_http_info(self, id, **kwargs):  # noqa: E501
        """Override the default create method to add playbook_id  # noqa: E501

        Override the default create method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_plays_create_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject161 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_plays_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_plays_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks/{id}/plays/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_plays_list(self, id, **kwargs):  # noqa: E501
        """Override the default list method to add playbook_id  # noqa: E501

        Override the default list method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_plays_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_plays_list_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_plays_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Override the default list method to add playbook_id  # noqa: E501

        Override the default list method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_plays_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_plays_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_plays_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks/{id}/plays/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_playbooks_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_playbooks_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_playbooks_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Playbooks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_playbooks_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_playbooks_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_playbooks_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/playbooks//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_create(self, **kwargs):  # noqa: E501
        """Override the default create method to add playbook_id  # noqa: E501

        Override the default create method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject162 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_create_with_http_info(**kwargs)  # noqa: E501

    def v3_plays_create_with_http_info(self, **kwargs):  # noqa: E501
        """Override the default create method to add playbook_id  # noqa: E501

        Override the default create method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject162 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_delete(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_plays_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_plays_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_list(self, **kwargs):  # noqa: E501
        """Override the default list method to add playbook_id  # noqa: E501

        Override the default list method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_list_with_http_info(**kwargs)  # noqa: E501

    def v3_plays_list_with_http_info(self, **kwargs):  # noqa: E501
        """Override the default list method to add playbook_id  # noqa: E501

        Override the default list method to add playbook_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject163 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_plays_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject163 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_plays_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject164 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_plays_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject164 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_plays_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_plays_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_plays_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_plays_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing Plays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_plays_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_plays_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_plays_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/plays//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_preferences_cms_url(self, **kwargs):  # noqa: E501
        """Specifies the Network (CMS) URL used by Helix.  # noqa: E501

        Specifies the Network (CMS) URL used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_cms_url(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_preferences_cms_url_with_http_info(**kwargs)  # noqa: E501

    def v3_preferences_cms_url_with_http_info(self, **kwargs):  # noqa: E501
        """Specifies the Network (CMS) URL used by Helix.  # noqa: E501

        Specifies the Network (CMS) URL used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_cms_url_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_preferences_cms_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/preferences//cms_url', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_preferences_etp_url(self, **kwargs):  # noqa: E501
        """Specifies the Email (ETP) URL used by Helix.  # noqa: E501

        Specifies the Email (ETP) URL used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_etp_url(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_preferences_etp_url_with_http_info(**kwargs)  # noqa: E501

    def v3_preferences_etp_url_with_http_info(self, **kwargs):  # noqa: E501
        """Specifies the Email (ETP) URL used by Helix.  # noqa: E501

        Specifies the Email (ETP) URL used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_etp_url_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_preferences_etp_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/preferences//etp_url', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_preferences_hx_url(self, **kwargs):  # noqa: E501
        """Specifies the Endpoint (HX) URLs used by Helix.  # noqa: E501

        Specifies the Endpoint (HX) URLs used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_hx_url(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_preferences_hx_url_with_http_info(**kwargs)  # noqa: E501

    def v3_preferences_hx_url_with_http_info(self, **kwargs):  # noqa: E501
        """Specifies the Endpoint (HX) URLs used by Helix.  # noqa: E501

        Specifies the Endpoint (HX) URLs used by Helix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_preferences_hx_url_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_preferences_hx_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/preferences//hx_url', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_create(self, **kwargs):  # noqa: E501
        """v3_reports_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject165 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_create_with_http_info(**kwargs)  # noqa: E501

    def v3_reports_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_reports_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject165 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_delete(self, **kwargs):  # noqa: E501
        """v3_reports_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_delete_with_http_info(**kwargs)  # noqa: E501

    def v3_reports_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v3_reports_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_delete_0(self, id, **kwargs):  # noqa: E501
        """v3_reports_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_reports_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_reports_delete_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_reports_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_export_pdf(self, id, **kwargs):  # noqa: E501
        """v3_reports_export_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_export_pdf(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_export_pdf_with_http_info(id, **kwargs)  # noqa: E501

    def v3_reports_export_pdf_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_reports_export_pdf  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_export_pdf_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_export_pdf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_reports_export_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_list(self, **kwargs):  # noqa: E501
        """v3_reports_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_list_with_http_info(**kwargs)  # noqa: E501

    def v3_reports_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_reports_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_partial_update(self, id, **kwargs):  # noqa: E501
        """v3_reports_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject166 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_reports_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_reports_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject166 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_reports_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_partial_update0(self, id, **kwargs):  # noqa: E501
        """v3_reports_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject167 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_reports_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_reports_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject167 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_reports_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_read(self, id, **kwargs):  # noqa: E501
        """Override to include widget result serializer  # noqa: E501

        Override to include widget result serializer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_reports_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Override to include widget result serializer  # noqa: E501

        Override to include widget result serializer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str updated_by:
        :param str finished_at:
        :param str finished_at__lt:
        :param str finished_at__lte:
        :param str finished_at__gt:
        :param str finished_at__gte:
        :param str query_end:
        :param str query_end__lt:
        :param str query_end__lte:
        :param str query_end__gt:
        :param str query_end__gte:
        :param str updated_at:
        :param str updated_at__lt:
        :param str updated_at__lte:
        :param str updated_at__gt:
        :param str updated_at__gte:
        :param float duration:
        :param float duration__lt:
        :param float duration__lte:
        :param float duration__gt:
        :param float duration__gte:
        :param str started_at:
        :param str started_at__lt:
        :param str started_at__lte:
        :param str started_at__gt:
        :param str started_at__gte:
        :param str created_at:
        :param str created_at__lt:
        :param str created_at__lte:
        :param str created_at__gt:
        :param str created_at__gte:
        :param str created_by:
        :param str state__iexact:
        :param str dashboard:
        :param str query_start:
        :param str query_start__lt:
        :param str query_start__lte:
        :param str query_start__gt:
        :param str query_start__gte:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'updated_by', 'finished_at', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'query_end', 'query_end__lt', 'query_end__lte', 'query_end__gt', 'query_end__gte', 'updated_at', 'updated_at__lt', 'updated_at__lte', 'updated_at__gt', 'updated_at__gte', 'duration', 'duration__lt', 'duration__lte', 'duration__gt', 'duration__gte', 'started_at', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'created_at', 'created_at__lt', 'created_at__lte', 'created_at__gt', 'created_at__gte', 'created_by', 'state__iexact', 'dashboard', 'query_start', 'query_start__lt', 'query_start__lte', 'query_start__gt', 'query_start__gte', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_reports_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'finished_at' in local_var_params and local_var_params['finished_at'] is not None:  # noqa: E501
            query_params.append(('finished_at', local_var_params['finished_at']))  # noqa: E501
        if 'finished_at__lt' in local_var_params and local_var_params['finished_at__lt'] is not None:  # noqa: E501
            query_params.append(('finished_at__lt', local_var_params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in local_var_params and local_var_params['finished_at__lte'] is not None:  # noqa: E501
            query_params.append(('finished_at__lte', local_var_params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in local_var_params and local_var_params['finished_at__gt'] is not None:  # noqa: E501
            query_params.append(('finished_at__gt', local_var_params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in local_var_params and local_var_params['finished_at__gte'] is not None:  # noqa: E501
            query_params.append(('finished_at__gte', local_var_params['finished_at__gte']))  # noqa: E501
        if 'query_end' in local_var_params and local_var_params['query_end'] is not None:  # noqa: E501
            query_params.append(('query_end', local_var_params['query_end']))  # noqa: E501
        if 'query_end__lt' in local_var_params and local_var_params['query_end__lt'] is not None:  # noqa: E501
            query_params.append(('query_end__lt', local_var_params['query_end__lt']))  # noqa: E501
        if 'query_end__lte' in local_var_params and local_var_params['query_end__lte'] is not None:  # noqa: E501
            query_params.append(('query_end__lte', local_var_params['query_end__lte']))  # noqa: E501
        if 'query_end__gt' in local_var_params and local_var_params['query_end__gt'] is not None:  # noqa: E501
            query_params.append(('query_end__gt', local_var_params['query_end__gt']))  # noqa: E501
        if 'query_end__gte' in local_var_params and local_var_params['query_end__gte'] is not None:  # noqa: E501
            query_params.append(('query_end__gte', local_var_params['query_end__gte']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'updated_at__lt' in local_var_params and local_var_params['updated_at__lt'] is not None:  # noqa: E501
            query_params.append(('updated_at__lt', local_var_params['updated_at__lt']))  # noqa: E501
        if 'updated_at__lte' in local_var_params and local_var_params['updated_at__lte'] is not None:  # noqa: E501
            query_params.append(('updated_at__lte', local_var_params['updated_at__lte']))  # noqa: E501
        if 'updated_at__gt' in local_var_params and local_var_params['updated_at__gt'] is not None:  # noqa: E501
            query_params.append(('updated_at__gt', local_var_params['updated_at__gt']))  # noqa: E501
        if 'updated_at__gte' in local_var_params and local_var_params['updated_at__gte'] is not None:  # noqa: E501
            query_params.append(('updated_at__gte', local_var_params['updated_at__gte']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'duration__lt' in local_var_params and local_var_params['duration__lt'] is not None:  # noqa: E501
            query_params.append(('duration__lt', local_var_params['duration__lt']))  # noqa: E501
        if 'duration__lte' in local_var_params and local_var_params['duration__lte'] is not None:  # noqa: E501
            query_params.append(('duration__lte', local_var_params['duration__lte']))  # noqa: E501
        if 'duration__gt' in local_var_params and local_var_params['duration__gt'] is not None:  # noqa: E501
            query_params.append(('duration__gt', local_var_params['duration__gt']))  # noqa: E501
        if 'duration__gte' in local_var_params and local_var_params['duration__gte'] is not None:  # noqa: E501
            query_params.append(('duration__gte', local_var_params['duration__gte']))  # noqa: E501
        if 'started_at' in local_var_params and local_var_params['started_at'] is not None:  # noqa: E501
            query_params.append(('started_at', local_var_params['started_at']))  # noqa: E501
        if 'started_at__lt' in local_var_params and local_var_params['started_at__lt'] is not None:  # noqa: E501
            query_params.append(('started_at__lt', local_var_params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in local_var_params and local_var_params['started_at__lte'] is not None:  # noqa: E501
            query_params.append(('started_at__lte', local_var_params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in local_var_params and local_var_params['started_at__gt'] is not None:  # noqa: E501
            query_params.append(('started_at__gt', local_var_params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in local_var_params and local_var_params['started_at__gte'] is not None:  # noqa: E501
            query_params.append(('started_at__gte', local_var_params['started_at__gte']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'created_at__lt' in local_var_params and local_var_params['created_at__lt'] is not None:  # noqa: E501
            query_params.append(('created_at__lt', local_var_params['created_at__lt']))  # noqa: E501
        if 'created_at__lte' in local_var_params and local_var_params['created_at__lte'] is not None:  # noqa: E501
            query_params.append(('created_at__lte', local_var_params['created_at__lte']))  # noqa: E501
        if 'created_at__gt' in local_var_params and local_var_params['created_at__gt'] is not None:  # noqa: E501
            query_params.append(('created_at__gt', local_var_params['created_at__gt']))  # noqa: E501
        if 'created_at__gte' in local_var_params and local_var_params['created_at__gte'] is not None:  # noqa: E501
            query_params.append(('created_at__gte', local_var_params['created_at__gte']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'state__iexact' in local_var_params and local_var_params['state__iexact'] is not None:  # noqa: E501
            query_params.append(('state__iexact', local_var_params['state__iexact']))  # noqa: E501
        if 'dashboard' in local_var_params and local_var_params['dashboard'] is not None:  # noqa: E501
            query_params.append(('dashboard', local_var_params['dashboard']))  # noqa: E501
        if 'query_start' in local_var_params and local_var_params['query_start'] is not None:  # noqa: E501
            query_params.append(('query_start', local_var_params['query_start']))  # noqa: E501
        if 'query_start__lt' in local_var_params and local_var_params['query_start__lt'] is not None:  # noqa: E501
            query_params.append(('query_start__lt', local_var_params['query_start__lt']))  # noqa: E501
        if 'query_start__lte' in local_var_params and local_var_params['query_start__lte'] is not None:  # noqa: E501
            query_params.append(('query_start__lte', local_var_params['query_start__lte']))  # noqa: E501
        if 'query_start__gt' in local_var_params and local_var_params['query_start__gt'] is not None:  # noqa: E501
            query_params.append(('query_start__gt', local_var_params['query_start__gt']))  # noqa: E501
        if 'query_start__gte' in local_var_params and local_var_params['query_start__gte'] is not None:  # noqa: E501
            query_params.append(('query_start__gte', local_var_params['query_start__gte']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_search(self, **kwargs):  # noqa: E501
        """v3_reports_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_search_with_http_info(**kwargs)  # noqa: E501

    def v3_reports_search_with_http_info(self, **kwargs):  # noqa: E501
        """v3_reports_search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_create(self, parent_lookup_report, **kwargs):  # noqa: E501
        """v3_reports_widgets_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_create(parent_lookup_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param InlineObject168 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_create_with_http_info(parent_lookup_report, **kwargs)  # noqa: E501

    def v3_reports_widgets_create_with_http_info(self, parent_lookup_report, **kwargs):  # noqa: E501
        """v3_reports_widgets_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_create_with_http_info(parent_lookup_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param InlineObject168 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_delete(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_delete(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_delete_with_http_info(parent_lookup_report, widget__id, **kwargs)  # noqa: E501

    def v3_reports_widgets_delete_with_http_info(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_delete_with_http_info(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'widget__id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_delete`")  # noqa: E501
        # verify the required parameter 'widget__id' is set
        if self.api_client.client_side_validation and ('widget__id' not in local_var_params or  # noqa: E501
                                                        local_var_params['widget__id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `widget__id` when calling `v3_reports_widgets_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501
        if 'widget__id' in local_var_params:
            path_params['widget__id'] = local_var_params['widget__id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets//{widget__id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_list(self, parent_lookup_report, **kwargs):  # noqa: E501
        """v3_reports_widgets_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_list(parent_lookup_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_list_with_http_info(parent_lookup_report, **kwargs)  # noqa: E501

    def v3_reports_widgets_list_with_http_info(self, parent_lookup_report, **kwargs):  # noqa: E501
        """v3_reports_widgets_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_list_with_http_info(parent_lookup_report, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'limit', 'offset', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_partial_update(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_partial_update(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject169 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_partial_update_with_http_info(parent_lookup_report, widget__id, **kwargs)  # noqa: E501

    def v3_reports_widgets_partial_update_with_http_info(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_partial_update_with_http_info(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject169 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'widget__id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_partial_update`")  # noqa: E501
        # verify the required parameter 'widget__id' is set
        if self.api_client.client_side_validation and ('widget__id' not in local_var_params or  # noqa: E501
                                                        local_var_params['widget__id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `widget__id` when calling `v3_reports_widgets_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501
        if 'widget__id' in local_var_params:
            path_params['widget__id'] = local_var_params['widget__id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets//{widget__id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_partial_update0(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_partial_update0(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject170 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_partial_update0_with_http_info(parent_lookup_report, widget__id, **kwargs)  # noqa: E501

    def v3_reports_widgets_partial_update0_with_http_info(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_partial_update0_with_http_info(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject170 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'widget__id', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_partial_update0`")  # noqa: E501
        # verify the required parameter 'widget__id' is set
        if self.api_client.client_side_validation and ('widget__id' not in local_var_params or  # noqa: E501
                                                        local_var_params['widget__id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `widget__id` when calling `v3_reports_widgets_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501
        if 'widget__id' in local_var_params:
            path_params['widget__id'] = local_var_params['widget__id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets//{widget__id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_read(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_read(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_read_with_http_info(parent_lookup_report, widget__id, **kwargs)  # noqa: E501

    def v3_reports_widgets_read_with_http_info(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_read_with_http_info(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'widget__id', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_read`")  # noqa: E501
        # verify the required parameter 'widget__id' is set
        if self.api_client.client_side_validation and ('widget__id' not in local_var_params or  # noqa: E501
                                                        local_var_params['widget__id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `widget__id` when calling `v3_reports_widgets_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501
        if 'widget__id' in local_var_params:
            path_params['widget__id'] = local_var_params['widget__id']  # noqa: E501

        query_params = []
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets//{widget__id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_reports_widgets_view_results(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_view_results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_view_results(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_reports_widgets_view_results_with_http_info(parent_lookup_report, widget__id, **kwargs)  # noqa: E501

    def v3_reports_widgets_view_results_with_http_info(self, parent_lookup_report, widget__id, **kwargs):  # noqa: E501
        """v3_reports_widgets_view_results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_reports_widgets_view_results_with_http_info(parent_lookup_report, widget__id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_report: (required)
        :param str widget__id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_report', 'widget__id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_reports_widgets_view_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_report' is set
        if self.api_client.client_side_validation and ('parent_lookup_report' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_report'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_report` when calling `v3_reports_widgets_view_results`")  # noqa: E501
        # verify the required parameter 'widget__id' is set
        if self.api_client.client_side_validation and ('widget__id' not in local_var_params or  # noqa: E501
                                                        local_var_params['widget__id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `widget__id` when calling `v3_reports_widgets_view_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_report' in local_var_params:
            path_params['parent_lookup_report'] = local_var_params['parent_lookup_report']  # noqa: E501
        if 'widget__id' in local_var_params:
            path_params['widget__id'] = local_var_params['widget__id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/reports//{parent_lookup_report}/widgets//{widget__id}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_assertions_list(self, **kwargs):  # noqa: E501
        """Lists rule assertions, including:  # noqa: E501

        Lists rule assertions, including: name -- name to use when you reference assertions with dependencies in subsequent rules seconds_valid -- duration that the assertion remains active and can be referenced by dependencies fields -- value to be stored by the assertion, such as srcipv4  An assertion is a variable created by a rule when its MQL query and threshold values match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_assertions_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_assertions_list_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_assertions_list_with_http_info(self, **kwargs):  # noqa: E501
        """Lists rule assertions, including:  # noqa: E501

        Lists rule assertions, including: name -- name to use when you reference assertions with dependencies in subsequent rules seconds_valid -- duration that the assertion remains active and can be referenced by dependencies fields -- value to be stored by the assertion, such as srcipv4  An assertion is a variable created by a rule when its MQL query and threshold values match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_assertions_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_assertions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/assertions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_assertions_read(self, id, **kwargs):  # noqa: E501
        """Lists rule assertions, including:  # noqa: E501

        Lists rule assertions, including: name -- name to use when you reference assertions with dependencies in subsequent rules seconds_valid -- duration that the assertion remains active and can be referenced by dependencies fields -- value to be stored by the assertion, such as srcipv4  An assertion is a variable created by a rule when its MQL query and threshold values match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_assertions_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_assertions_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_rules_assertions_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists rule assertions, including:  # noqa: E501

        Lists rule assertions, including: name -- name to use when you reference assertions with dependencies in subsequent rules seconds_valid -- duration that the assertion remains active and can be referenced by dependencies fields -- value to be stored by the assertion, such as srcipv4  An assertion is a variable created by a rule when its MQL query and threshold values match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_assertions_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_assertions_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_rules_assertions_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/assertions//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_create(self, **kwargs):  # noqa: E501
        """v3_rules_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_create_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_rules_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_dependencies_list(self, **kwargs):  # noqa: E501
        """Lists rule dependencies, including:  # noqa: E501

        Lists rule dependencies, including: assertion_name -- name of the assertion that must be active in order for this rule to generate       another assertion, another dependency, alert, or log rule_type -- rule type source_fields -- value that must resolve in order for this rule to generate another assertion,       another dependency, alert, or log, such as domain or hostname       A dependency is a variable that causes a rule hit to not generate an alert (or a log) unless  an equivalent assertion exists and is active. An assertion and a dependency are equivalent  if they have the same name and entry in their respective assertion fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_dependencies_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_dependencies_list_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_dependencies_list_with_http_info(self, **kwargs):  # noqa: E501
        """Lists rule dependencies, including:  # noqa: E501

        Lists rule dependencies, including: assertion_name -- name of the assertion that must be active in order for this rule to generate       another assertion, another dependency, alert, or log rule_type -- rule type source_fields -- value that must resolve in order for this rule to generate another assertion,       another dependency, alert, or log, such as domain or hostname       A dependency is a variable that causes a rule hit to not generate an alert (or a log) unless  an equivalent assertion exists and is active. An assertion and a dependency are equivalent  if they have the same name and entry in their respective assertion fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_dependencies_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_dependencies_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/dependencies/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_dependencies_read(self, id, **kwargs):  # noqa: E501
        """Lists rule dependencies, including:  # noqa: E501

        Lists rule dependencies, including: assertion_name -- name of the assertion that must be active in order for this rule to generate       another assertion, another dependency, alert, or log rule_type -- rule type source_fields -- value that must resolve in order for this rule to generate another assertion,       another dependency, alert, or log, such as domain or hostname       A dependency is a variable that causes a rule hit to not generate an alert (or a log) unless  an equivalent assertion exists and is active. An assertion and a dependency are equivalent  if they have the same name and entry in their respective assertion fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_dependencies_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_dependencies_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_rules_dependencies_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists rule dependencies, including:  # noqa: E501

        Lists rule dependencies, including: assertion_name -- name of the assertion that must be active in order for this rule to generate       another assertion, another dependency, alert, or log rule_type -- rule type source_fields -- value that must resolve in order for this rule to generate another assertion,       another dependency, alert, or log, such as domain or hostname       A dependency is a variable that causes a rule hit to not generate an alert (or a log) unless  an equivalent assertion exists and is active. An assertion and a dependency are equivalent  if they have the same name and entry in their respective assertion fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_dependencies_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_dependencies_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_rules_dependencies_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/dependencies//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_get_enabled_rule_percentages_history(self, **kwargs):  # noqa: E501
        """Calculates a collection of hourly values from the current hour the method is called and the zeroed-out time from today.  # noqa: E501

        Calculates a collection of hourly values from the current hour the method is called and the zeroed-out time from today. Each object represents each day within the range that is specified by the days parameter in the GET call. Each object includes the number of covered_classes, internal_event_classes (total_classes), enabled_covered_rules, enabled_uncovered_rules, and disabled_rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_enabled_rule_percentages_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_get_enabled_rule_percentages_history_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_get_enabled_rule_percentages_history_with_http_info(self, **kwargs):  # noqa: E501
        """Calculates a collection of hourly values from the current hour the method is called and the zeroed-out time from today.  # noqa: E501

        Calculates a collection of hourly values from the current hour the method is called and the zeroed-out time from today. Each object represents each day within the range that is specified by the days parameter in the GET call. Each object includes the number of covered_classes, internal_event_classes (total_classes), enabled_covered_rules, enabled_uncovered_rules, and disabled_rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_enabled_rule_percentages_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_get_enabled_rule_percentages_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules//stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_get_revisions(self, id, **kwargs):  # noqa: E501
        """Returns the revision history of the specified rule.  # noqa: E501

        Returns the revision history of the specified rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_revisions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_get_revisions_with_http_info(id, **kwargs)  # noqa: E501

    def v3_rules_get_revisions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the revision history of the specified rule.  # noqa: E501

        Returns the revision history of the specified rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_revisions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_get_revisions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_rules_get_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules//{id}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_get_rules_recommendations(self, **kwargs):  # noqa: E501
        """Provides class/field recommendations based on the number of impacted rules.  # noqa: E501

        Provides class/field recommendations based on the number of impacted rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_rules_recommendations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_get_rules_recommendations_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_get_rules_recommendations_with_http_info(self, **kwargs):  # noqa: E501
        """Provides class/field recommendations based on the number of impacted rules.  # noqa: E501

        Provides class/field recommendations based on the number of impacted rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_get_rules_recommendations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_get_rules_recommendations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules//recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_list(self, **kwargs):  # noqa: E501
        """v3_rules_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_list_with_http_info(**kwargs)  # noqa: E501

    def v3_rules_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_rules_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_rules_read(self, id, **kwargs):  # noqa: E501
        """v3_rules_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_rules_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_rules_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_rules_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_rules_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_rules_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_rules_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/rules//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_create(self, **kwargs):  # noqa: E501
        """Creates a new search. Defining `is_favorite` is optional.  # noqa: E501

        Creates a new search. Defining `is_favorite` is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject171 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_create_with_http_info(**kwargs)  # noqa: E501

    def v3_search_saved_create_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new search. Defining `is_favorite` is optional.  # noqa: E501

        Creates a new search. Defining `is_favorite` is optional.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject171 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_delete(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_saved_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'query_ast', 'name', 'description', 'query', 'category', 'table', 'is_protected', 'is_public', 'is_hidden', 'is_favorite', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'query_ast' in local_var_params and local_var_params['query_ast'] is not None:  # noqa: E501
            query_params.append(('query_ast', local_var_params['query_ast']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'is_hidden' in local_var_params and local_var_params['is_hidden'] is not None:  # noqa: E501
            query_params.append(('is_hidden', local_var_params['is_hidden']))  # noqa: E501
        if 'is_favorite' in local_var_params and local_var_params['is_favorite'] is not None:  # noqa: E501
            query_params.append(('is_favorite', local_var_params['is_favorite']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_create(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_create(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject174 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_create_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_create_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_create_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject174 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_delete(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_delete(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_delete_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_delete_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_delete_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_delete_0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_delete_0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_delete_0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_delete_0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_delete_0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_favorite_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_list(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_list(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_list_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_list_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_list_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_partial_update(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_partial_update(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject175 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_partial_update_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_partial_update_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_partial_update_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject175 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_favorite_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_partial_update0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_partial_update0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject176 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_partial_update0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_partial_update0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_partial_update0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject176 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_favorite_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_favorite_read(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_read(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_favorite_read_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_favorite_read_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing search favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_favorite_read_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_favorite_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_favorite_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_favorite_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/favorite//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_list_with_http_info(**kwargs)  # noqa: E501

    def v3_search_saved_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'query_ast', 'name', 'description', 'query', 'category', 'table', 'is_protected', 'is_public', 'is_hidden', 'is_favorite', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'query_ast' in local_var_params and local_var_params['query_ast'] is not None:  # noqa: E501
            query_params.append(('query_ast', local_var_params['query_ast']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'is_hidden' in local_var_params and local_var_params['is_hidden'] is not None:  # noqa: E501
            query_params.append(('is_hidden', local_var_params['is_hidden']))  # noqa: E501
        if 'is_favorite' in local_var_params and local_var_params['is_favorite'] is not None:  # noqa: E501
            query_params.append(('is_favorite', local_var_params['is_favorite']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject172 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_saved_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject172 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'query_ast', 'name', 'description', 'query', 'category', 'table', 'is_protected', 'is_public', 'is_hidden', 'is_favorite', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'query_ast' in local_var_params and local_var_params['query_ast'] is not None:  # noqa: E501
            query_params.append(('query_ast', local_var_params['query_ast']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'is_hidden' in local_var_params and local_var_params['is_hidden'] is not None:  # noqa: E501
            query_params.append(('is_hidden', local_var_params['is_hidden']))  # noqa: E501
        if 'is_favorite' in local_var_params and local_var_params['is_favorite'] is not None:  # noqa: E501
            query_params.append(('is_favorite', local_var_params['is_favorite']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject173 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_saved_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject173 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'query_ast', 'name', 'description', 'query', 'category', 'table', 'is_protected', 'is_public', 'is_hidden', 'is_favorite', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'query_ast' in local_var_params and local_var_params['query_ast'] is not None:  # noqa: E501
            query_params.append(('query_ast', local_var_params['query_ast']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'is_hidden' in local_var_params and local_var_params['is_hidden'] is not None:  # noqa: E501
            query_params.append(('is_hidden', local_var_params['is_hidden']))  # noqa: E501
        if 'is_favorite' in local_var_params and local_var_params['is_favorite'] is not None:  # noqa: E501
            query_params.append(('is_favorite', local_var_params['is_favorite']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_saved_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str site:
        :param str created_at:
        :param str updated_at:
        :param str created_by:
        :param str updated_by:
        :param str query_ast:
        :param str name:
        :param str description:
        :param str query:
        :param str category:
        :param str table:
        :param str is_protected:
        :param str is_public:
        :param str is_hidden:
        :param str is_favorite:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'site', 'created_at', 'updated_at', 'created_by', 'updated_by', 'query_ast', 'name', 'description', 'query', 'category', 'table', 'is_protected', 'is_public', 'is_hidden', 'is_favorite', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'site' in local_var_params and local_var_params['site'] is not None:  # noqa: E501
            query_params.append(('site', local_var_params['site']))  # noqa: E501
        if 'created_at' in local_var_params and local_var_params['created_at'] is not None:  # noqa: E501
            query_params.append(('created_at', local_var_params['created_at']))  # noqa: E501
        if 'updated_at' in local_var_params and local_var_params['updated_at'] is not None:  # noqa: E501
            query_params.append(('updated_at', local_var_params['updated_at']))  # noqa: E501
        if 'created_by' in local_var_params and local_var_params['created_by'] is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if 'updated_by' in local_var_params and local_var_params['updated_by'] is not None:  # noqa: E501
            query_params.append(('updated_by', local_var_params['updated_by']))  # noqa: E501
        if 'query_ast' in local_var_params and local_var_params['query_ast'] is not None:  # noqa: E501
            query_params.append(('query_ast', local_var_params['query_ast']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'query' in local_var_params and local_var_params['query'] is not None:  # noqa: E501
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'is_protected' in local_var_params and local_var_params['is_protected'] is not None:  # noqa: E501
            query_params.append(('is_protected', local_var_params['is_protected']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'is_hidden' in local_var_params and local_var_params['is_hidden'] is not None:  # noqa: E501
            query_params.append(('is_hidden', local_var_params['is_hidden']))  # noqa: E501
        if 'is_favorite' in local_var_params and local_var_params['is_favorite'] is not None:  # noqa: E501
            query_params.append(('is_favorite', local_var_params['is_favorite']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_create(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_create(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject178 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_create_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_create_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Overrides the default 'create' method in order to associate the  # noqa: E501

        Overrides the default 'create' method in order to associate the list_id that may be in the URL parameters due to nested routes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_create_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject178 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_delete(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_delete(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_delete_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_delete_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_delete_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_delete_0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_delete_0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_delete_0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_delete_0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_delete_0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_delete_0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_jobs_download(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Downloads the results of a scheduled search job as a zip file.  # noqa: E501

        Downloads the results of a scheduled search job as a zip file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_download(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_jobs_download_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_jobs_download_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Downloads the results of a scheduled search job as a zip file.  # noqa: E501

        Downloads the results of a scheduled search job as a zip file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_download_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_jobs_download" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_jobs_download`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_jobs_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/jobs//{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_jobs_list(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Endpoint for accessing scheduled search jobs.  # noqa: E501

        Endpoint for accessing scheduled search jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_list(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str state:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_jobs_list_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_jobs_list_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Endpoint for accessing scheduled search jobs.  # noqa: E501

        Endpoint for accessing scheduled search jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_list_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str state:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'limit', 'offset', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_jobs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_jobs_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_jobs_read(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Endpoint for accessing scheduled search jobs.  # noqa: E501

        Endpoint for accessing scheduled search jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_read(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str state:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_jobs_read_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_jobs_read_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """Endpoint for accessing scheduled search jobs.  # noqa: E501

        Endpoint for accessing scheduled search jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_jobs_read_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param str state:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_jobs_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_jobs_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_jobs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/jobs//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_list(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_list(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_list_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_list_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_list_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_partial_update(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_partial_update(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject179 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_partial_update_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_partial_update_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_partial_update_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject179 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_partial_update`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_partial_update0(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_partial_update0(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject180 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_partial_update0_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_partial_update0_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_partial_update0_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param InlineObject180 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_partial_update0`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_read(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_read(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_read_with_http_info(id, parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_read_with_http_info(self, id, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_read_with_http_info(id, parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str parent_lookup_saved_search: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'parent_lookup_saved_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_saved_schedule_read`")  # noqa: E501
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_schedule_update(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_update(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject177 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_schedule_update_with_http_info(parent_lookup_saved_search, **kwargs)  # noqa: E501

    def v3_search_saved_schedule_update_with_http_info(self, parent_lookup_saved_search, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing scheduled searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_schedule_update_with_http_info(parent_lookup_saved_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str parent_lookup_saved_search: (required)
        :param InlineObject177 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_lookup_saved_search', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_schedule_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent_lookup_saved_search' is set
        if self.api_client.client_side_validation and ('parent_lookup_saved_search' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent_lookup_saved_search'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent_lookup_saved_search` when calling `v3_search_saved_schedule_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent_lookup_saved_search' in local_var_params:
            path_params['parent_lookup_saved_search'] = local_var_params['parent_lookup_saved_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//{parent_lookup_saved_search}/schedule/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_saved_search(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_saved_search_with_http_info(**kwargs)  # noqa: E501

    def v3_search_saved_search_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing saved searches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_saved_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_saved_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/saved//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_stats_get_indexing_latency(self, **kwargs):  # noqa: E501
        """v3_search_stats_get_indexing_latency  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_stats_get_indexing_latency(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_stats_get_indexing_latency_with_http_info(**kwargs)  # noqa: E501

    def v3_search_stats_get_indexing_latency_with_http_info(self, **kwargs):  # noqa: E501
        """v3_search_stats_get_indexing_latency  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_stats_get_indexing_latency_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_stats_get_indexing_latency" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/stats/indexing/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_create(self, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject181 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_create_with_http_info(**kwargs)  # noqa: E501

    def v3_search_tables_create_with_http_info(self, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject181 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_delete(self, id, **kwargs):  # noqa: E501
        """Deletes the specified search table. You can only delete tables that you created.  # noqa: E501

        Deletes the specified search table. You can only delete tables that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_tables_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the specified search table. You can only delete tables that you created.  # noqa: E501

        Deletes the specified search table. You can only delete tables that you created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_tables_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_list(self, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_list_with_http_info(**kwargs)  # noqa: E501

    def v3_search_tables_list_with_http_info(self, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_partial_update(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject182 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_tables_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject182 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_tables_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_partial_update0(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject183 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_tables_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param InlineObject183 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_tables_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_search_tables_read(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_search_tables_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_search_tables_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Endpoint for accessing search tables.  # noqa: E501

        Endpoint for accessing search tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_search_tables_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_search_tables_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_search_tables_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/search/tables//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_senders_create(self, **kwargs):  # noqa: E501
        """v3_senders_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_senders_create_with_http_info(**kwargs)  # noqa: E501

    def v3_senders_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_senders_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_senders_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/senders//', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_senders_delete(self, **kwargs):  # noqa: E501
        """v3_senders_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_senders_delete_with_http_info(**kwargs)  # noqa: E501

    def v3_senders_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v3_senders_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_senders_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/senders//', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_senders_enable_delete(self, **kwargs):  # noqa: E501
        """v3_senders_enable_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_enable_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_senders_enable_delete_with_http_info(**kwargs)  # noqa: E501

    def v3_senders_enable_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v3_senders_enable_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_enable_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_senders_enable_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/senders/enable/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_senders_enable_update(self, **kwargs):  # noqa: E501
        """v3_senders_enable_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_enable_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_senders_enable_update_with_http_info(**kwargs)  # noqa: E501

    def v3_senders_enable_update_with_http_info(self, **kwargs):  # noqa: E501
        """v3_senders_enable_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_enable_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_senders_enable_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/senders/enable/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_senders_read(self, **kwargs):  # noqa: E501
        """v3_senders_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_senders_read_with_http_info(**kwargs)  # noqa: E501

    def v3_senders_read_with_http_info(self, **kwargs):  # noqa: E501
        """v3_senders_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_senders_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_senders_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/senders//', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_create(self, **kwargs):  # noqa: E501
        """v3_sensors_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject184 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_create_with_http_info(**kwargs)  # noqa: E501

    def v3_sensors_create_with_http_info(self, **kwargs):  # noqa: E501
        """v3_sensors_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject184 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_delete(self, id, **kwargs):  # noqa: E501
        """v3_sensors_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_delete_with_http_info(id, **kwargs)  # noqa: E501

    def v3_sensors_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_sensors_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'interval', 'meta_cbid', 'status', 'status_order', 'hostname', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_sensors_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'interval' in local_var_params and local_var_params['interval'] is not None:  # noqa: E501
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'meta_cbid' in local_var_params and local_var_params['meta_cbid'] is not None:  # noqa: E501
            query_params.append(('meta_cbid', local_var_params['meta_cbid']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'status_order' in local_var_params and local_var_params['status_order'] is not None:  # noqa: E501
            query_params.append(('status_order', local_var_params['status_order']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_get_sensor_status(self, **kwargs):  # noqa: E501
        """Returns the status of your FireEye sensors.  # noqa: E501

        Returns the status of your FireEye sensors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_get_sensor_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_get_sensor_status_with_http_info(**kwargs)  # noqa: E501

    def v3_sensors_get_sensor_status_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the status of your FireEye sensors.  # noqa: E501

        Returns the status of your FireEye sensors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_get_sensor_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_get_sensor_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors//status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_list(self, **kwargs):  # noqa: E501
        """Lists your FireEye sensors, including metrics for input events and average CPU and memory usage.  # noqa: E501

        Lists your FireEye sensors, including metrics for input events and average CPU and memory usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_list_with_http_info(**kwargs)  # noqa: E501

    def v3_sensors_list_with_http_info(self, **kwargs):  # noqa: E501
        """Lists your FireEye sensors, including metrics for input events and average CPU and memory usage.  # noqa: E501

        Lists your FireEye sensors, including metrics for input events and average CPU and memory usage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'interval', 'meta_cbid', 'status', 'status_order', 'hostname', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'interval' in local_var_params and local_var_params['interval'] is not None:  # noqa: E501
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'meta_cbid' in local_var_params and local_var_params['meta_cbid'] is not None:  # noqa: E501
            query_params.append(('meta_cbid', local_var_params['meta_cbid']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'status_order' in local_var_params and local_var_params['status_order'] is not None:  # noqa: E501
            query_params.append(('status_order', local_var_params['status_order']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_partial_update(self, id, **kwargs):  # noqa: E501
        """v3_sensors_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject185 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_sensors_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_sensors_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject185 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'interval', 'meta_cbid', 'status', 'status_order', 'hostname', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_sensors_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'interval' in local_var_params and local_var_params['interval'] is not None:  # noqa: E501
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'meta_cbid' in local_var_params and local_var_params['meta_cbid'] is not None:  # noqa: E501
            query_params.append(('meta_cbid', local_var_params['meta_cbid']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'status_order' in local_var_params and local_var_params['status_order'] is not None:  # noqa: E501
            query_params.append(('status_order', local_var_params['status_order']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_partial_update0(self, id, **kwargs):  # noqa: E501
        """v3_sensors_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject186 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_sensors_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_sensors_partial_update0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject186 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'interval', 'meta_cbid', 'status', 'status_order', 'hostname', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_sensors_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'interval' in local_var_params and local_var_params['interval'] is not None:  # noqa: E501
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'meta_cbid' in local_var_params and local_var_params['meta_cbid'] is not None:  # noqa: E501
            query_params.append(('meta_cbid', local_var_params['meta_cbid']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'status_order' in local_var_params and local_var_params['status_order'] is not None:  # noqa: E501
            query_params.append(('status_order', local_var_params['status_order']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_sensors_read(self, id, **kwargs):  # noqa: E501
        """v3_sensors_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_sensors_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_sensors_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_sensors_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_sensors_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str interval:
        :param str meta_cbid:
        :param str status:
        :param float status_order:
        :param str hostname:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'interval', 'meta_cbid', 'status', 'status_order', 'hostname', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_sensors_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_sensors_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'interval' in local_var_params and local_var_params['interval'] is not None:  # noqa: E501
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'meta_cbid' in local_var_params and local_var_params['meta_cbid'] is not None:  # noqa: E501
            query_params.append(('meta_cbid', local_var_params['meta_cbid']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'status_order' in local_var_params and local_var_params['status_order'] is not None:  # noqa: E501
            query_params.append(('status_order', local_var_params['status_order']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/sensors//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_tags_list(self, **kwargs):  # noqa: E501
        """v3_tags_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_tags_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_tags_list_with_http_info(**kwargs)  # noqa: E501

    def v3_tags_list_with_http_info(self, **kwargs):  # noqa: E501
        """v3_tags_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_tags_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_tags_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/tags/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_tasks_status_read(self, id, **kwargs):  # noqa: E501
        """v3_tasks_status_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_tasks_status_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_tasks_status_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_tasks_status_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """v3_tasks_status_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_tasks_status_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_tasks_status_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_tasks_status_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/tasks/status/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_user_challenge_query(self, **kwargs):  # noqa: E501
        """Returns a token to use for Talk to an Expert.  # noqa: E501

        Returns a token to use for Talk to an Expert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_challenge_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_user_challenge_query_with_http_info(**kwargs)  # noqa: E501

    def v3_user_challenge_query_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a token to use for Talk to an Expert.  # noqa: E501

        Returns a token to use for Talk to an Expert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_challenge_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_user_challenge_query" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/user//challenge-query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_user_customer_support_chat(self, **kwargs):  # noqa: E501
        """Connects to SFDC to chat with FireEye Support.  # noqa: E501

        Connects to SFDC to chat with FireEye Support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_customer_support_chat(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_user_customer_support_chat_with_http_info(**kwargs)  # noqa: E501

    def v3_user_customer_support_chat_with_http_info(self, **kwargs):  # noqa: E501
        """Connects to SFDC to chat with FireEye Support.  # noqa: E501

        Connects to SFDC to chat with FireEye Support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_customer_support_chat_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_user_customer_support_chat" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/user//chat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_user_eod_chat(self, **kwargs):  # noqa: E501
        """Returns Expert on Demand contact information for authorized users.  # noqa: E501

        Returns Expert on Demand contact information for authorized users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_eod_chat(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_user_eod_chat_with_http_info(**kwargs)  # noqa: E501

    def v3_user_eod_chat_with_http_info(self, **kwargs):  # noqa: E501
        """Returns Expert on Demand contact information for authorized users.  # noqa: E501

        Returns Expert on Demand contact information for authorized users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_user_eod_chat_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_user_eod_chat" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/user//expert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_create(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject188 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_create_with_http_info(**kwargs)  # noqa: E501

    def v3_widgets_templates_create_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject188 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_delete(self, **kwargs):  # noqa: E501
        """Deletes all widgets from the specified dashboard.  # noqa: E501

        Deletes all widgets from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_delete_with_http_info(**kwargs)  # noqa: E501

    def v3_widgets_templates_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all widgets from the specified dashboard.  # noqa: E501

        Deletes all widgets from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_delete_0(self, id, **kwargs):  # noqa: E501
        """Deletes a widget from the specified dashboard.  # noqa: E501

        Deletes a widget from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_delete_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_delete_0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_widgets_templates_delete_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a widget from the specified dashboard.  # noqa: E501

        Deletes a widget from the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_delete_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'is_public', 'type', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_delete_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_widgets_templates_delete_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_list(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_list_with_http_info(**kwargs)  # noqa: E501

    def v3_widgets_templates_list_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'category', 'is_internal', 'is_public', 'type', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_partial_update(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject189 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def v3_widgets_templates_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject189 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'is_public', 'type', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_widgets_templates_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_partial_update0(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_partial_update0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject190 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_partial_update0_with_http_info(id, **kwargs)  # noqa: E501

    def v3_widgets_templates_partial_update0_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_partial_update0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param InlineObject190 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'is_public', 'type', 'order_by', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_partial_update0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_widgets_templates_partial_update0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_perform_search(self, id, **kwargs):  # noqa: E501
        """Returns the results of a dashboard widget.  # noqa: E501

        Returns the results of a dashboard widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_perform_search(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_perform_search_with_http_info(id, **kwargs)  # noqa: E501

    def v3_widgets_templates_perform_search_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the results of a dashboard widget.  # noqa: E501

        Returns the results of a dashboard widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_perform_search_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_perform_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_widgets_templates_perform_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//{id}/results/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_read(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_read_with_http_info(id, **kwargs)  # noqa: E501

    def v3_widgets_templates_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: (required)
        :param str category:
        :param str is_internal:
        :param str is_public:
        :param str type:
        :param str order_by: Which field to use when ordering the results.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'category', 'is_internal', 'is_public', 'type', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v3_widgets_templates_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'category' in local_var_params and local_var_params['category'] is not None:  # noqa: E501
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'is_internal' in local_var_params and local_var_params['is_internal'] is not None:  # noqa: E501
            query_params.append(('is_internal', local_var_params['is_internal']))  # noqa: E501
        if 'is_public' in local_var_params and local_var_params['is_public'] is not None:  # noqa: E501
            query_params.append(('is_public', local_var_params['is_public']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_search(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_search_with_http_info(**kwargs)  # noqa: E501

    def v3_widgets_templates_search_with_http_info(self, **kwargs):  # noqa: E501
        """View for tying together the serializer, authentication, permission and  # noqa: E501

        View for tying together the serializer, authentication, permission and data restrictions for accessing WidgetTemplates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates//search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_widgets_templates_update(self, **kwargs):  # noqa: E501
        """Updates all widgets for the specified dashboard.  # noqa: E501

        Updates all widgets for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject187 data:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_widgets_templates_update_with_http_info(**kwargs)  # noqa: E501

    def v3_widgets_templates_update_with_http_info(self, **kwargs):  # noqa: E501
        """Updates all widgets for the specified dashboard.  # noqa: E501

        Updates all widgets for the specified dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_widgets_templates_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InlineObject187 data:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_widgets_templates_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/helix/id/hexzsq689/api/v3/widgets/templates/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
