# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject58(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'pcap_url': 'str',
        'dstip': 'str',
        'sensor_id': 'str',
        'is_s3_upload': 'bool',
        'start_time': 'str',
        'create_date': 'str',
        'srcport': 'int',
        'connection_id': 'str',
        'transcript_first_viewed_at': 'str',
        'transcript_url': 'str',
        'state': 'str',
        's3_presign_url': 'str',
        'end_time': 'str',
        'update_date': 'str',
        'srcip': 'str',
        'customer_id': 'str',
        'dstport': 'int',
        'updated_by': 'str',
        'percent_complete': 'int',
        'reference_id': 'str'
    }

    attribute_map = {
        'created_by': '_createdBy',
        'pcap_url': 'pcap_url',
        'dstip': 'dstip',
        'sensor_id': 'sensor_id',
        'is_s3_upload': 'is_s3_upload',
        'start_time': 'start_time',
        'create_date': 'createDate',
        'srcport': 'srcport',
        'connection_id': 'connection_id',
        'transcript_first_viewed_at': 'transcript_first_viewed_at',
        'transcript_url': 'transcript_url',
        'state': 'state',
        's3_presign_url': 's3_presign_url',
        'end_time': 'end_time',
        'update_date': 'updateDate',
        'srcip': 'srcip',
        'customer_id': 'customer_id',
        'dstport': 'dstport',
        'updated_by': '_updatedBy',
        'percent_complete': 'percent_complete',
        'reference_id': 'reference_id'
    }

    def __init__(self, created_by=None, pcap_url=None, dstip=None, sensor_id=None, is_s3_upload=None, start_time=None, create_date=None, srcport=None, connection_id=None, transcript_first_viewed_at=None, transcript_url=None, state=None, s3_presign_url=None, end_time=None, update_date=None, srcip=None, customer_id=None, dstport=None, updated_by=None, percent_complete=None, reference_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject58 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._pcap_url = None
        self._dstip = None
        self._sensor_id = None
        self._is_s3_upload = None
        self._start_time = None
        self._create_date = None
        self._srcport = None
        self._connection_id = None
        self._transcript_first_viewed_at = None
        self._transcript_url = None
        self._state = None
        self._s3_presign_url = None
        self._end_time = None
        self._update_date = None
        self._srcip = None
        self._customer_id = None
        self._dstport = None
        self._updated_by = None
        self._percent_complete = None
        self._reference_id = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if pcap_url is not None:
            self.pcap_url = pcap_url
        if dstip is not None:
            self.dstip = dstip
        if sensor_id is not None:
            self.sensor_id = sensor_id
        if is_s3_upload is not None:
            self.is_s3_upload = is_s3_upload
        if start_time is not None:
            self.start_time = start_time
        if create_date is not None:
            self.create_date = create_date
        if srcport is not None:
            self.srcport = srcport
        if connection_id is not None:
            self.connection_id = connection_id
        if transcript_first_viewed_at is not None:
            self.transcript_first_viewed_at = transcript_first_viewed_at
        if transcript_url is not None:
            self.transcript_url = transcript_url
        if state is not None:
            self.state = state
        if s3_presign_url is not None:
            self.s3_presign_url = s3_presign_url
        if end_time is not None:
            self.end_time = end_time
        if update_date is not None:
            self.update_date = update_date
        if srcip is not None:
            self.srcip = srcip
        if customer_id is not None:
            self.customer_id = customer_id
        if dstport is not None:
            self.dstport = dstport
        if updated_by is not None:
            self.updated_by = updated_by
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def created_by(self):
        """Gets the created_by of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The created_by of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InlineObject58.

          # noqa: E501

        :param created_by: The created_by of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def pcap_url(self):
        """Gets the pcap_url of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The pcap_url of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._pcap_url

    @pcap_url.setter
    def pcap_url(self, pcap_url):
        """Sets the pcap_url of this InlineObject58.

          # noqa: E501

        :param pcap_url: The pcap_url of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._pcap_url = pcap_url

    @property
    def dstip(self):
        """Gets the dstip of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The dstip of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._dstip

    @dstip.setter
    def dstip(self, dstip):
        """Sets the dstip of this InlineObject58.

          # noqa: E501

        :param dstip: The dstip of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._dstip = dstip

    @property
    def sensor_id(self):
        """Gets the sensor_id of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The sensor_id of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id):
        """Sets the sensor_id of this InlineObject58.

          # noqa: E501

        :param sensor_id: The sensor_id of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._sensor_id = sensor_id

    @property
    def is_s3_upload(self):
        """Gets the is_s3_upload of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The is_s3_upload of this InlineObject58.  # noqa: E501
        :rtype: bool
        """
        return self._is_s3_upload

    @is_s3_upload.setter
    def is_s3_upload(self, is_s3_upload):
        """Sets the is_s3_upload of this InlineObject58.

          # noqa: E501

        :param is_s3_upload: The is_s3_upload of this InlineObject58.  # noqa: E501
        :type: bool
        """

        self._is_s3_upload = is_s3_upload

    @property
    def start_time(self):
        """Gets the start_time of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The start_time of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineObject58.

          # noqa: E501

        :param start_time: The start_time of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def create_date(self):
        """Gets the create_date of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The create_date of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this InlineObject58.

          # noqa: E501

        :param create_date: The create_date of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def srcport(self):
        """Gets the srcport of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The srcport of this InlineObject58.  # noqa: E501
        :rtype: int
        """
        return self._srcport

    @srcport.setter
    def srcport(self, srcport):
        """Sets the srcport of this InlineObject58.

          # noqa: E501

        :param srcport: The srcport of this InlineObject58.  # noqa: E501
        :type: int
        """

        self._srcport = srcport

    @property
    def connection_id(self):
        """Gets the connection_id of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The connection_id of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this InlineObject58.

          # noqa: E501

        :param connection_id: The connection_id of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def transcript_first_viewed_at(self):
        """Gets the transcript_first_viewed_at of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The transcript_first_viewed_at of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._transcript_first_viewed_at

    @transcript_first_viewed_at.setter
    def transcript_first_viewed_at(self, transcript_first_viewed_at):
        """Sets the transcript_first_viewed_at of this InlineObject58.

          # noqa: E501

        :param transcript_first_viewed_at: The transcript_first_viewed_at of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._transcript_first_viewed_at = transcript_first_viewed_at

    @property
    def transcript_url(self):
        """Gets the transcript_url of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The transcript_url of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._transcript_url

    @transcript_url.setter
    def transcript_url(self, transcript_url):
        """Sets the transcript_url of this InlineObject58.

          # noqa: E501

        :param transcript_url: The transcript_url of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._transcript_url = transcript_url

    @property
    def state(self):
        """Gets the state of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The state of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineObject58.

          # noqa: E501

        :param state: The state of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def s3_presign_url(self):
        """Gets the s3_presign_url of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The s3_presign_url of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._s3_presign_url

    @s3_presign_url.setter
    def s3_presign_url(self, s3_presign_url):
        """Sets the s3_presign_url of this InlineObject58.

          # noqa: E501

        :param s3_presign_url: The s3_presign_url of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._s3_presign_url = s3_presign_url

    @property
    def end_time(self):
        """Gets the end_time of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The end_time of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineObject58.

          # noqa: E501

        :param end_time: The end_time of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def update_date(self):
        """Gets the update_date of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The update_date of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this InlineObject58.

          # noqa: E501

        :param update_date: The update_date of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    @property
    def srcip(self):
        """Gets the srcip of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The srcip of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._srcip

    @srcip.setter
    def srcip(self, srcip):
        """Sets the srcip of this InlineObject58.

          # noqa: E501

        :param srcip: The srcip of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._srcip = srcip

    @property
    def customer_id(self):
        """Gets the customer_id of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The customer_id of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InlineObject58.

          # noqa: E501

        :param customer_id: The customer_id of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def dstport(self):
        """Gets the dstport of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The dstport of this InlineObject58.  # noqa: E501
        :rtype: int
        """
        return self._dstport

    @dstport.setter
    def dstport(self, dstport):
        """Sets the dstport of this InlineObject58.

          # noqa: E501

        :param dstport: The dstport of this InlineObject58.  # noqa: E501
        :type: int
        """

        self._dstport = dstport

    @property
    def updated_by(self):
        """Gets the updated_by of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The updated_by of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this InlineObject58.

          # noqa: E501

        :param updated_by: The updated_by of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def percent_complete(self):
        """Gets the percent_complete of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The percent_complete of this InlineObject58.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this InlineObject58.

          # noqa: E501

        :param percent_complete: The percent_complete of this InlineObject58.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def reference_id(self):
        """Gets the reference_id of this InlineObject58.  # noqa: E501

          # noqa: E501

        :return: The reference_id of this InlineObject58.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InlineObject58.

          # noqa: E501

        :param reference_id: The reference_id of this InlineObject58.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject58):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject58):
            return True

        return self.to_dict() != other.to_dict()
