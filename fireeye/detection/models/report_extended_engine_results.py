# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.detection.configuration import Configuration


class ReportExtendedEngineResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'av_lookup': 'ReportExtendedEngineResultsAvLookup',
        'dti_lookup': 'ReportExtendedEngineResultsDtiLookup',
        'fireml': 'ReportExtendedEngineResultsFireml',
        'avs_lookup': 'ReportExtendedEngineResultsAvsLookup',
        'dynamic_analysis': 'ReportExtendedEngineResultsDynamicAnalysis'
    }

    attribute_map = {
        'av_lookup': 'av_lookup',
        'dti_lookup': 'dti_lookup',
        'fireml': 'fireml',
        'avs_lookup': 'avs_lookup',
        'dynamic_analysis': 'dynamic_analysis'
    }

    def __init__(self, av_lookup=None, dti_lookup=None, fireml=None, avs_lookup=None, dynamic_analysis=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._av_lookup = None
        self._dti_lookup = None
        self._fireml = None
        self._avs_lookup = None
        self._dynamic_analysis = None
        self.discriminator = None

        if av_lookup is not None:
            self.av_lookup = av_lookup
        if dti_lookup is not None:
            self.dti_lookup = dti_lookup
        if fireml is not None:
            self.fireml = fireml
        if avs_lookup is not None:
            self.avs_lookup = avs_lookup
        self.dynamic_analysis = dynamic_analysis

    @property
    def av_lookup(self):
        """Gets the av_lookup of this ReportExtendedEngineResults.  # noqa: E501


        :return: The av_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :rtype: ReportExtendedEngineResultsAvLookup
        """
        return self._av_lookup

    @av_lookup.setter
    def av_lookup(self, av_lookup):
        """Sets the av_lookup of this ReportExtendedEngineResults.


        :param av_lookup: The av_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :type: ReportExtendedEngineResultsAvLookup
        """

        self._av_lookup = av_lookup

    @property
    def dti_lookup(self):
        """Gets the dti_lookup of this ReportExtendedEngineResults.  # noqa: E501


        :return: The dti_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :rtype: ReportExtendedEngineResultsDtiLookup
        """
        return self._dti_lookup

    @dti_lookup.setter
    def dti_lookup(self, dti_lookup):
        """Sets the dti_lookup of this ReportExtendedEngineResults.


        :param dti_lookup: The dti_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :type: ReportExtendedEngineResultsDtiLookup
        """

        self._dti_lookup = dti_lookup

    @property
    def fireml(self):
        """Gets the fireml of this ReportExtendedEngineResults.  # noqa: E501


        :return: The fireml of this ReportExtendedEngineResults.  # noqa: E501
        :rtype: ReportExtendedEngineResultsFireml
        """
        return self._fireml

    @fireml.setter
    def fireml(self, fireml):
        """Sets the fireml of this ReportExtendedEngineResults.


        :param fireml: The fireml of this ReportExtendedEngineResults.  # noqa: E501
        :type: ReportExtendedEngineResultsFireml
        """

        self._fireml = fireml

    @property
    def avs_lookup(self):
        """Gets the avs_lookup of this ReportExtendedEngineResults.  # noqa: E501


        :return: The avs_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :rtype: ReportExtendedEngineResultsAvsLookup
        """
        return self._avs_lookup

    @avs_lookup.setter
    def avs_lookup(self, avs_lookup):
        """Sets the avs_lookup of this ReportExtendedEngineResults.


        :param avs_lookup: The avs_lookup of this ReportExtendedEngineResults.  # noqa: E501
        :type: ReportExtendedEngineResultsAvsLookup
        """

        self._avs_lookup = avs_lookup

    @property
    def dynamic_analysis(self):
        """Gets the dynamic_analysis of this ReportExtendedEngineResults.  # noqa: E501


        :return: The dynamic_analysis of this ReportExtendedEngineResults.  # noqa: E501
        :rtype: ReportExtendedEngineResultsDynamicAnalysis
        """
        return self._dynamic_analysis

    @dynamic_analysis.setter
    def dynamic_analysis(self, dynamic_analysis):
        """Sets the dynamic_analysis of this ReportExtendedEngineResults.


        :param dynamic_analysis: The dynamic_analysis of this ReportExtendedEngineResults.  # noqa: E501
        :type: ReportExtendedEngineResultsDynamicAnalysis
        """
        if self.local_vars_configuration.client_side_validation and dynamic_analysis is None:  # noqa: E501
            raise ValueError("Invalid value for `dynamic_analysis`, must not be `None`")  # noqa: E501

        self._dynamic_analysis = dynamic_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResults):
            return True

        return self.to_dict() != other.to_dict()
