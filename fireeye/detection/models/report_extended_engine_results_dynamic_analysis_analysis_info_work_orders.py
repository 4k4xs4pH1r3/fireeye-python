# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.detection.configuration import Configuration


class ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signature': 'str',
        'note': 'str',
        'job_id': 'int',
        'version': 'str',
        'os_changes': 'ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoOsChanges',
        'network_anomaly': 'list[ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoNetworkAnomaly]'
    }

    attribute_map = {
        'signature': 'signature',
        'note': 'note',
        'job_id': 'job_id',
        'version': 'version',
        'os_changes': 'os_changes',
        'network_anomaly': 'network_anomaly'
    }

    def __init__(self, signature=None, note=None, job_id=None, version=None, os_changes=None, network_anomaly=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._signature = None
        self._note = None
        self._job_id = None
        self._version = None
        self._os_changes = None
        self._network_anomaly = None
        self.discriminator = None

        self.signature = signature
        if note is not None:
            self.note = note
        self.job_id = job_id
        self.version = version
        self.os_changes = os_changes
        if network_anomaly is not None:
            self.network_anomaly = network_anomaly

    @property
    def signature(self):
        """Gets the signature of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501


        :return: The signature of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.


        :param signature: The signature of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and signature is None:  # noqa: E501
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def note(self):
        """Gets the note of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501

        Information related to different extracted artifacts like vnc recording, pcap, vm extracted files  # noqa: E501

        :return: The note of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.

        Information related to different extracted artifacts like vnc recording, pcap, vm extracted files  # noqa: E501

        :param note: The note of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def job_id(self):
        """Gets the job_id of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501

        Id assigned to Dynamic analysis job  # noqa: E501

        :return: The job_id of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.

        Id assigned to Dynamic analysis job  # noqa: E501

        :param job_id: The job_id of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def version(self):
        """Gets the version of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501


        :return: The version of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.


        :param version: The version of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def os_changes(self):
        """Gets the os_changes of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501


        :return: The os_changes of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoOsChanges
        """
        return self._os_changes

    @os_changes.setter
    def os_changes(self, os_changes):
        """Sets the os_changes of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.


        :param os_changes: The os_changes of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoOsChanges
        """
        if self.local_vars_configuration.client_side_validation and os_changes is None:  # noqa: E501
            raise ValueError("Invalid value for `os_changes`, must not be `None`")  # noqa: E501

        self._os_changes = os_changes

    @property
    def network_anomaly(self):
        """Gets the network_anomaly of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501


        :return: The network_anomaly of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :rtype: list[ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoNetworkAnomaly]
        """
        return self._network_anomaly

    @network_anomaly.setter
    def network_anomaly(self, network_anomaly):
        """Sets the network_anomaly of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.


        :param network_anomaly: The network_anomaly of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders.  # noqa: E501
        :type: list[ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoNetworkAnomaly]
        """

        self._network_anomaly = network_anomaly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoWorkOrders):
            return True

        return self.to_dict() != other.to_dict()
