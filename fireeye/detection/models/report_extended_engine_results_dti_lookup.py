# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from detection.configuration import Configuration


class ReportExtendedEngineResultsDtiLookup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signature_name': 'list[str]',
        'verdict': 'str',
        'overall_weight': 'int',
        'additional_info': 'object'
    }

    attribute_map = {
        'signature_name': 'signature_name',
        'verdict': 'verdict',
        'overall_weight': 'overall_weight',
        'additional_info': 'additional_info'
    }

    def __init__(self, signature_name=None, verdict=None, overall_weight=None, additional_info=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsDtiLookup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._signature_name = None
        self._verdict = None
        self._overall_weight = None
        self._additional_info = None
        self.discriminator = None

        self.signature_name = signature_name
        self.verdict = verdict
        if overall_weight is not None:
            self.overall_weight = overall_weight
        if additional_info is not None:
            self.additional_info = additional_info

    @property
    def signature_name(self):
        """Gets the signature_name of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501

        zero or more signature names based on all the submission results, from analysis engine  # noqa: E501

        :return: The signature_name of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :rtype: list[str]
        """
        return self._signature_name

    @signature_name.setter
    def signature_name(self, signature_name):
        """Sets the signature_name of this ReportExtendedEngineResultsDtiLookup.

        zero or more signature names based on all the submission results, from analysis engine  # noqa: E501

        :param signature_name: The signature_name of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and signature_name is None:  # noqa: E501
            raise ValueError("Invalid value for `signature_name`, must not be `None`")  # noqa: E501

        self._signature_name = signature_name

    @property
    def verdict(self):
        """Gets the verdict of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501

        AV's verdict for this file.  # noqa: E501

        :return: The verdict of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :rtype: str
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this ReportExtendedEngineResultsDtiLookup.

        AV's verdict for this file.  # noqa: E501

        :param verdict: The verdict of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and verdict is None:  # noqa: E501
            raise ValueError("Invalid value for `verdict`, must not be `None`")  # noqa: E501
        allowed_values = ["MALICIOUS", "NON-MALICIOUS", "RISK-AWARE", "not-found"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and verdict not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"  # noqa: E501
                .format(verdict, allowed_values)
            )

        self._verdict = verdict

    @property
    def overall_weight(self):
        """Gets the overall_weight of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501

        Weight assigned by analysis engine to object after analysis  # noqa: E501

        :return: The overall_weight of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :rtype: int
        """
        return self._overall_weight

    @overall_weight.setter
    def overall_weight(self, overall_weight):
        """Sets the overall_weight of this ReportExtendedEngineResultsDtiLookup.

        Weight assigned by analysis engine to object after analysis  # noqa: E501

        :param overall_weight: The overall_weight of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :type: int
        """

        self._overall_weight = overall_weight

    @property
    def additional_info(self):
        """Gets the additional_info of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501

        Any additional information related to analysis. Mostly Null  # noqa: E501

        :return: The additional_info of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :rtype: object
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this ReportExtendedEngineResultsDtiLookup.

        Any additional information related to analysis. Mostly Null  # noqa: E501

        :param additional_info: The additional_info of this ReportExtendedEngineResultsDtiLookup.  # noqa: E501
        :type: object
        """

        self._additional_info = additional_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsDtiLookup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsDtiLookup):
            return True

        return self.to_dict() != other.to_dict()
