# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.detection.configuration import Configuration


class ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sa_engine': 'str',
        'signature_name': 'str',
        'signature_iden': 'int',
        'weight': 'int'
    }

    attribute_map = {
        'sa_engine': 'sa_engine',
        'signature_name': 'signature_name',
        'signature_iden': 'signature_iden',
        'weight': 'weight'
    }

    def __init__(self, sa_engine=None, signature_name=None, signature_iden=None, weight=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sa_engine = None
        self._signature_name = None
        self._signature_iden = None
        self._weight = None
        self.discriminator = None

        if sa_engine is not None:
            self.sa_engine = sa_engine
        if signature_name is not None:
            self.signature_name = signature_name
        if signature_iden is not None:
            self.signature_iden = signature_iden
        if weight is not None:
            self.weight = weight

    @property
    def sa_engine(self):
        """Gets the sa_engine of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501

        Static Analysis engine name.  # noqa: E501

        :return: The sa_engine of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :rtype: str
        """
        return self._sa_engine

    @sa_engine.setter
    def sa_engine(self, sa_engine):
        """Sets the sa_engine of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.

        Static Analysis engine name.  # noqa: E501

        :param sa_engine: The sa_engine of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :type: str
        """

        self._sa_engine = sa_engine

    @property
    def signature_name(self):
        """Gets the signature_name of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501

        The signature by which this malware is known.  # noqa: E501

        :return: The signature_name of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :rtype: str
        """
        return self._signature_name

    @signature_name.setter
    def signature_name(self, signature_name):
        """Sets the signature_name of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.

        The signature by which this malware is known.  # noqa: E501

        :param signature_name: The signature_name of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :type: str
        """

        self._signature_name = signature_name

    @property
    def signature_iden(self):
        """Gets the signature_iden of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501

        Signature Id defined for signature name. Mostly the field will be blank or null  # noqa: E501

        :return: The signature_iden of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :rtype: int
        """
        return self._signature_iden

    @signature_iden.setter
    def signature_iden(self, signature_iden):
        """Sets the signature_iden of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.

        Signature Id defined for signature name. Mostly the field will be blank or null  # noqa: E501

        :param signature_iden: The signature_iden of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :type: int
        """

        self._signature_iden = signature_iden

    @property
    def weight(self):
        """Gets the weight of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501

        weight of rule hit for object  # noqa: E501

        :return: The weight of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.

        weight of rule hit for object  # noqa: E501

        :param weight: The weight of this ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysisAnalysisInfoChkSum):
            return True

        return self.to_dict() != other.to_dict()
