# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from detection.configuration import Configuration


class ReportExtendedEngineResultsDynamicAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'is_malicious': 'bool',
        'signature': 'str',
        'analysis_info': 'ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo',
        'files_analysed': 'int',
        'overall_weight': 'int',
        'total_duration': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'is_malicious': 'is_malicious',
        'signature': 'signature',
        'analysis_info': 'analysis_info',
        'files_analysed': 'files_analysed',
        'overall_weight': 'overall_weight',
        'total_duration': 'total_duration'
    }

    def __init__(self, uuid=None, is_malicious=None, signature=None, analysis_info=None, files_analysed=None, overall_weight=None, total_duration=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsDynamicAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._is_malicious = None
        self._signature = None
        self._analysis_info = None
        self._files_analysed = None
        self._overall_weight = None
        self._total_duration = None
        self.discriminator = None

        self.uuid = uuid
        self.is_malicious = is_malicious
        if signature is not None:
            self.signature = signature
        self.analysis_info = analysis_info
        self.files_analysed = files_analysed
        self.overall_weight = overall_weight
        self.total_duration = total_duration

    @property
    def uuid(self):
        """Gets the uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        UUID of the analysis job.  # noqa: E501

        :return: The uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ReportExtendedEngineResultsDynamicAnalysis.

        UUID of the analysis job.  # noqa: E501

        :param uuid: The uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def is_malicious(self):
        """Gets the is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        Result of analysis.  Either malicious or not malicious.  # noqa: E501

        :return: The is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_malicious

    @is_malicious.setter
    def is_malicious(self, is_malicious):
        """Sets the is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.

        Result of analysis.  Either malicious or not malicious.  # noqa: E501

        :param is_malicious: The is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_malicious is None:  # noqa: E501
            raise ValueError("Invalid value for `is_malicious`, must not be `None`")  # noqa: E501
        allowed_values = [true, false]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and is_malicious not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `is_malicious` ({0}), must be one of {1}"  # noqa: E501
                .format(is_malicious, allowed_values)
            )

        self._is_malicious = is_malicious

    @property
    def signature(self):
        """Gets the signature of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        signature names based on all the submission results, from Dynamic Analysis  # noqa: E501

        :return: The signature of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ReportExtendedEngineResultsDynamicAnalysis.

        signature names based on all the submission results, from Dynamic Analysis  # noqa: E501

        :param signature: The signature of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def analysis_info(self):
        """Gets the analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501


        :return: The analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo
        """
        return self._analysis_info

    @analysis_info.setter
    def analysis_info(self, analysis_info):
        """Sets the analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.


        :param analysis_info: The analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo
        """
        if self.local_vars_configuration.client_side_validation and analysis_info is None:  # noqa: E501
            raise ValueError("Invalid value for `analysis_info`, must not be `None`")  # noqa: E501

        self._analysis_info = analysis_info

    @property
    def files_analysed(self):
        """Gets the files_analysed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        Number of objects analysed including primary and extracted objects  # noqa: E501

        :return: The files_analysed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._files_analysed

    @files_analysed.setter
    def files_analysed(self, files_analysed):
        """Sets the files_analysed of this ReportExtendedEngineResultsDynamicAnalysis.

        Number of objects analysed including primary and extracted objects  # noqa: E501

        :param files_analysed: The files_analysed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and files_analysed is None:  # noqa: E501
            raise ValueError("Invalid value for `files_analysed`, must not be `None`")  # noqa: E501

        self._files_analysed = files_analysed

    @property
    def overall_weight(self):
        """Gets the overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        Maximum weight amongst weights assigned to different triggered rules while dynamic analysis  # noqa: E501

        :return: The overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._overall_weight

    @overall_weight.setter
    def overall_weight(self, overall_weight):
        """Sets the overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.

        Maximum weight amongst weights assigned to different triggered rules while dynamic analysis  # noqa: E501

        :param overall_weight: The overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overall_weight is None:  # noqa: E501
            raise ValueError("Invalid value for `overall_weight`, must not be `None`")  # noqa: E501

        self._overall_weight = overall_weight

    @property
    def total_duration(self):
        """Gets the total_duration of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        Total time spend during Dynamic Analysis in seconds  # noqa: E501

        :return: The total_duration of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this ReportExtendedEngineResultsDynamicAnalysis.

        Total time spend during Dynamic Analysis in seconds  # noqa: E501

        :param total_duration: The total_duration of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_duration is None:  # noqa: E501
            raise ValueError("Invalid value for `total_duration`, must not be `None`")  # noqa: E501

        self._total_duration = total_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysis):
            return True

        return self.to_dict() != other.to_dict()
