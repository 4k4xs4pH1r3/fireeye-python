# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.helix.configuration import Configuration


class InlineObject172(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'query_ast': 'str',
        'description': 'str',
        'is_public': 'bool',
        'is_protected': 'bool',
        'query': 'str',
        'table': 'str',
        'is_hidden': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'category': 'category',
        'query_ast': 'query_ast',
        'description': 'description',
        'is_public': 'is_public',
        'is_protected': 'is_protected',
        'query': 'query',
        'table': 'table',
        'is_hidden': 'is_hidden',
        'name': 'name'
    }

    def __init__(self, category=None, query_ast=None, description=None, is_public=None, is_protected=None, query=None, table=None, is_hidden=None, name=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject172 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._query_ast = None
        self._description = None
        self._is_public = None
        self._is_protected = None
        self._query = None
        self._table = None
        self._is_hidden = None
        self._name = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if query_ast is not None:
            self.query_ast = query_ast
        if description is not None:
            self.description = description
        if is_public is not None:
            self.is_public = is_public
        if is_protected is not None:
            self.is_protected = is_protected
        self.query = query
        if table is not None:
            self.table = table
        if is_hidden is not None:
            self.is_hidden = is_hidden
        self.name = name

    @property
    def category(self):
        """Gets the category of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The category of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineObject172.

          # noqa: E501

        :param category: The category of this InlineObject172.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def query_ast(self):
        """Gets the query_ast of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The query_ast of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._query_ast

    @query_ast.setter
    def query_ast(self, query_ast):
        """Sets the query_ast of this InlineObject172.

          # noqa: E501

        :param query_ast: The query_ast of this InlineObject172.  # noqa: E501
        :type: str
        """

        self._query_ast = query_ast

    @property
    def description(self):
        """Gets the description of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The description of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineObject172.

          # noqa: E501

        :param description: The description of this InlineObject172.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_public(self):
        """Gets the is_public of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The is_public of this InlineObject172.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this InlineObject172.

          # noqa: E501

        :param is_public: The is_public of this InlineObject172.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_protected(self):
        """Gets the is_protected of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The is_protected of this InlineObject172.  # noqa: E501
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this InlineObject172.

          # noqa: E501

        :param is_protected: The is_protected of this InlineObject172.  # noqa: E501
        :type: bool
        """

        self._is_protected = is_protected

    @property
    def query(self):
        """Gets the query of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The query of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this InlineObject172.

          # noqa: E501

        :param query: The query of this InlineObject172.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and query is None:  # noqa: E501
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def table(self):
        """Gets the table of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The table of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this InlineObject172.

          # noqa: E501

        :param table: The table of this InlineObject172.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def is_hidden(self):
        """Gets the is_hidden of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The is_hidden of this InlineObject172.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this InlineObject172.

          # noqa: E501

        :param is_hidden: The is_hidden of this InlineObject172.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def name(self):
        """Gets the name of this InlineObject172.  # noqa: E501

          # noqa: E501

        :return: The name of this InlineObject172.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject172.

          # noqa: E501

        :param name: The name of this InlineObject172.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject172):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject172):
            return True

        return self.to_dict() != other.to_dict()
