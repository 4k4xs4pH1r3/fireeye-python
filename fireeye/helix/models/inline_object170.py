# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.helix.configuration import Configuration


class InlineObject170(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'widget': 'str',
        'error_message': 'str',
        'report': 'str',
        'document_type': 'str',
        'document_index': 'str',
        'document_id': 'str'
    }

    attribute_map = {
        'widget': 'widget',
        'error_message': 'error_message',
        'report': 'report',
        'document_type': 'document_type',
        'document_index': 'document_index',
        'document_id': 'document_id'
    }

    def __init__(self, widget=None, error_message=None, report=None, document_type=None, document_index=None, document_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject170 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._widget = None
        self._error_message = None
        self._report = None
        self._document_type = None
        self._document_index = None
        self._document_id = None
        self.discriminator = None

        if widget is not None:
            self.widget = widget
        if error_message is not None:
            self.error_message = error_message
        if report is not None:
            self.report = report
        if document_type is not None:
            self.document_type = document_type
        if document_index is not None:
            self.document_index = document_index
        if document_id is not None:
            self.document_id = document_id

    @property
    def widget(self):
        """Gets the widget of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The widget of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this InlineObject170.

          # noqa: E501

        :param widget: The widget of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._widget = widget

    @property
    def error_message(self):
        """Gets the error_message of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The error_message of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineObject170.

          # noqa: E501

        :param error_message: The error_message of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def report(self):
        """Gets the report of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The report of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this InlineObject170.

          # noqa: E501

        :param report: The report of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._report = report

    @property
    def document_type(self):
        """Gets the document_type of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The document_type of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this InlineObject170.

          # noqa: E501

        :param document_type: The document_type of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def document_index(self):
        """Gets the document_index of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The document_index of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._document_index

    @document_index.setter
    def document_index(self, document_index):
        """Sets the document_index of this InlineObject170.

          # noqa: E501

        :param document_index: The document_index of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._document_index = document_index

    @property
    def document_id(self):
        """Gets the document_id of this InlineObject170.  # noqa: E501

          # noqa: E501

        :return: The document_id of this InlineObject170.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this InlineObject170.

          # noqa: E501

        :param document_id: The document_id of this InlineObject170.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject170):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject170):
            return True

        return self.to_dict() != other.to_dict()
