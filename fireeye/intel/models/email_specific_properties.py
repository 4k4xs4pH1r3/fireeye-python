# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class EmailSpecificProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'str',
        'to': 'list[str]',
        'received_lines': 'list[str]',
        'label': 'str',
        'subject': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'received_lines': 'received_lines',
        'label': 'label',
        'subject': 'subject'
    }

    def __init__(self, _from=None, to=None, received_lines=None, label=None, subject=None, local_vars_configuration=None):  # noqa: E501
        """EmailSpecificProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._to = None
        self._received_lines = None
        self._label = None
        self._subject = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if received_lines is not None:
            self.received_lines = received_lines
        if label is not None:
            self.label = label
        if subject is not None:
            self.subject = subject

    @property
    def _from(self):
        """Gets the _from of this EmailSpecificProperties.  # noqa: E501


        :return: The _from of this EmailSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailSpecificProperties.


        :param _from: The _from of this EmailSpecificProperties.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this EmailSpecificProperties.  # noqa: E501


        :return: The to of this EmailSpecificProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailSpecificProperties.


        :param to: The to of this EmailSpecificProperties.  # noqa: E501
        :type: list[str]
        """

        self._to = to

    @property
    def received_lines(self):
        """Gets the received_lines of this EmailSpecificProperties.  # noqa: E501


        :return: The received_lines of this EmailSpecificProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._received_lines

    @received_lines.setter
    def received_lines(self, received_lines):
        """Sets the received_lines of this EmailSpecificProperties.


        :param received_lines: The received_lines of this EmailSpecificProperties.  # noqa: E501
        :type: list[str]
        """

        self._received_lines = received_lines

    @property
    def label(self):
        """Gets the label of this EmailSpecificProperties.  # noqa: E501


        :return: The label of this EmailSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EmailSpecificProperties.


        :param label: The label of this EmailSpecificProperties.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def subject(self):
        """Gets the subject of this EmailSpecificProperties.  # noqa: E501


        :return: The subject of this EmailSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailSpecificProperties.


        :param subject: The subject of this EmailSpecificProperties.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailSpecificProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailSpecificProperties):
            return True

        return self.to_dict() != other.to_dict()
