# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class CommonContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'analysis_conclusion': 'AnalysisConclusion',
        'labels': 'list[str]',
        'is_family': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'analysis_conclusion': 'analysis_conclusion',
        'labels': 'labels',
        'is_family': 'is_family',
        'description': 'description'
    }

    def __init__(self, name=None, analysis_conclusion=None, labels=None, is_family=None, description=None, local_vars_configuration=None):  # noqa: E501
        """CommonContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._analysis_conclusion = None
        self._labels = None
        self._is_family = None
        self._description = None
        self.discriminator = None

        self.name = name
        self.analysis_conclusion = analysis_conclusion
        if labels is not None:
            self.labels = labels
        if is_family is not None:
            self.is_family = is_family
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this CommonContext.  # noqa: E501


        :return: The name of this CommonContext.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonContext.


        :param name: The name of this CommonContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def analysis_conclusion(self):
        """Gets the analysis_conclusion of this CommonContext.  # noqa: E501


        :return: The analysis_conclusion of this CommonContext.  # noqa: E501
        :rtype: AnalysisConclusion
        """
        return self._analysis_conclusion

    @analysis_conclusion.setter
    def analysis_conclusion(self, analysis_conclusion):
        """Sets the analysis_conclusion of this CommonContext.


        :param analysis_conclusion: The analysis_conclusion of this CommonContext.  # noqa: E501
        :type: AnalysisConclusion
        """
        if self.local_vars_configuration.client_side_validation and analysis_conclusion is None:  # noqa: E501
            raise ValueError("Invalid value for `analysis_conclusion`, must not be `None`")  # noqa: E501

        self._analysis_conclusion = analysis_conclusion

    @property
    def labels(self):
        """Gets the labels of this CommonContext.  # noqa: E501


        :return: The labels of this CommonContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CommonContext.


        :param labels: The labels of this CommonContext.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def is_family(self):
        """Gets the is_family of this CommonContext.  # noqa: E501


        :return: The is_family of this CommonContext.  # noqa: E501
        :rtype: bool
        """
        return self._is_family

    @is_family.setter
    def is_family(self, is_family):
        """Sets the is_family of this CommonContext.


        :param is_family: The is_family of this CommonContext.  # noqa: E501
        :type: bool
        """

        self._is_family = is_family

    @property
    def description(self):
        """Gets the description of this CommonContext.  # noqa: E501


        :return: The description of this CommonContext.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonContext.


        :param description: The description of this CommonContext.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonContext):
            return True

        return self.to_dict() != other.to_dict()
