# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class EndpointCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'can_read': 'bool',
        'can_write': 'bool',
        'media_types': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'can_read': 'can_read',
        'can_write': 'can_write',
        'media_types': 'media_types'
    }

    def __init__(self, id=None, title=None, description=None, can_read=None, can_write=False, media_types=None, local_vars_configuration=None):  # noqa: E501
        """EndpointCollection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._description = None
        self._can_read = None
        self._can_write = None
        self._media_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if can_read is not None:
            self.can_read = can_read
        if can_write is not None:
            self.can_write = can_write
        if media_types is not None:
            self.media_types = media_types

    @property
    def id(self):
        """Gets the id of this EndpointCollection.  # noqa: E501


        :return: The id of this EndpointCollection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndpointCollection.


        :param id: The id of this EndpointCollection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this EndpointCollection.  # noqa: E501


        :return: The title of this EndpointCollection.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EndpointCollection.


        :param title: The title of this EndpointCollection.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EndpointCollection.  # noqa: E501


        :return: The description of this EndpointCollection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EndpointCollection.


        :param description: The description of this EndpointCollection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def can_read(self):
        """Gets the can_read of this EndpointCollection.  # noqa: E501


        :return: The can_read of this EndpointCollection.  # noqa: E501
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this EndpointCollection.


        :param can_read: The can_read of this EndpointCollection.  # noqa: E501
        :type: bool
        """

        self._can_read = can_read

    @property
    def can_write(self):
        """Gets the can_write of this EndpointCollection.  # noqa: E501


        :return: The can_write of this EndpointCollection.  # noqa: E501
        :rtype: bool
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write):
        """Sets the can_write of this EndpointCollection.


        :param can_write: The can_write of this EndpointCollection.  # noqa: E501
        :type: bool
        """

        self._can_write = can_write

    @property
    def media_types(self):
        """Gets the media_types of this EndpointCollection.  # noqa: E501


        :return: The media_types of this EndpointCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """Sets the media_types of this EndpointCollection.


        :param media_types: The media_types of this EndpointCollection.  # noqa: E501
        :type: list[str]
        """

        self._media_types = media_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointCollection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointCollection):
            return True

        return self.to_dict() != other.to_dict()
