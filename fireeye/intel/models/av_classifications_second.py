# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class AvClassificationsSecond(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'av_vendor': 'str',
        'av_product': 'str',
        'av_version': 'str',
        'engine_version': 'str',
        'definition': 'str',
        'submitted': 'str',
        'scanned': 'str',
        'classification_name': 'str',
        'is_detected': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'av_vendor': 'av_vendor',
        'av_product': 'av_product',
        'av_version': 'av_version',
        'engine_version': 'engine_version',
        'definition': 'definition',
        'submitted': 'submitted',
        'scanned': 'scanned',
        'classification_name': 'classification_name',
        'is_detected': 'is_detected'
    }

    def __init__(self, id=None, av_vendor=None, av_product=None, av_version=None, engine_version=None, definition=None, submitted=None, scanned=None, classification_name=None, is_detected=None, local_vars_configuration=None):  # noqa: E501
        """AvClassificationsSecond - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._av_vendor = None
        self._av_product = None
        self._av_version = None
        self._engine_version = None
        self._definition = None
        self._submitted = None
        self._scanned = None
        self._classification_name = None
        self._is_detected = None
        self.discriminator = None

        self.id = id
        self.av_vendor = av_vendor
        self.av_product = av_product
        if av_version is not None:
            self.av_version = av_version
        if engine_version is not None:
            self.engine_version = engine_version
        if definition is not None:
            self.definition = definition
        if submitted is not None:
            self.submitted = submitted
        if scanned is not None:
            self.scanned = scanned
        if classification_name is not None:
            self.classification_name = classification_name
        self.is_detected = is_detected

    @property
    def id(self):
        """Gets the id of this AvClassificationsSecond.  # noqa: E501


        :return: The id of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AvClassificationsSecond.


        :param id: The id of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def av_vendor(self):
        """Gets the av_vendor of this AvClassificationsSecond.  # noqa: E501


        :return: The av_vendor of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._av_vendor

    @av_vendor.setter
    def av_vendor(self, av_vendor):
        """Sets the av_vendor of this AvClassificationsSecond.


        :param av_vendor: The av_vendor of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and av_vendor is None:  # noqa: E501
            raise ValueError("Invalid value for `av_vendor`, must not be `None`")  # noqa: E501

        self._av_vendor = av_vendor

    @property
    def av_product(self):
        """Gets the av_product of this AvClassificationsSecond.  # noqa: E501


        :return: The av_product of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._av_product

    @av_product.setter
    def av_product(self, av_product):
        """Sets the av_product of this AvClassificationsSecond.


        :param av_product: The av_product of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and av_product is None:  # noqa: E501
            raise ValueError("Invalid value for `av_product`, must not be `None`")  # noqa: E501

        self._av_product = av_product

    @property
    def av_version(self):
        """Gets the av_version of this AvClassificationsSecond.  # noqa: E501


        :return: The av_version of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._av_version

    @av_version.setter
    def av_version(self, av_version):
        """Sets the av_version of this AvClassificationsSecond.


        :param av_version: The av_version of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._av_version = av_version

    @property
    def engine_version(self):
        """Gets the engine_version of this AvClassificationsSecond.  # noqa: E501


        :return: The engine_version of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this AvClassificationsSecond.


        :param engine_version: The engine_version of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._engine_version = engine_version

    @property
    def definition(self):
        """Gets the definition of this AvClassificationsSecond.  # noqa: E501


        :return: The definition of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AvClassificationsSecond.


        :param definition: The definition of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def submitted(self):
        """Gets the submitted of this AvClassificationsSecond.  # noqa: E501


        :return: The submitted of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._submitted

    @submitted.setter
    def submitted(self, submitted):
        """Sets the submitted of this AvClassificationsSecond.


        :param submitted: The submitted of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._submitted = submitted

    @property
    def scanned(self):
        """Gets the scanned of this AvClassificationsSecond.  # noqa: E501


        :return: The scanned of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._scanned

    @scanned.setter
    def scanned(self, scanned):
        """Sets the scanned of this AvClassificationsSecond.


        :param scanned: The scanned of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._scanned = scanned

    @property
    def classification_name(self):
        """Gets the classification_name of this AvClassificationsSecond.  # noqa: E501


        :return: The classification_name of this AvClassificationsSecond.  # noqa: E501
        :rtype: str
        """
        return self._classification_name

    @classification_name.setter
    def classification_name(self, classification_name):
        """Sets the classification_name of this AvClassificationsSecond.


        :param classification_name: The classification_name of this AvClassificationsSecond.  # noqa: E501
        :type: str
        """

        self._classification_name = classification_name

    @property
    def is_detected(self):
        """Gets the is_detected of this AvClassificationsSecond.  # noqa: E501


        :return: The is_detected of this AvClassificationsSecond.  # noqa: E501
        :rtype: bool
        """
        return self._is_detected

    @is_detected.setter
    def is_detected(self, is_detected):
        """Sets the is_detected of this AvClassificationsSecond.


        :param is_detected: The is_detected of this AvClassificationsSecond.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_detected is None:  # noqa: E501
            raise ValueError("Invalid value for `is_detected`, must not be `None`")  # noqa: E501

        self._is_detected = is_detected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvClassificationsSecond):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvClassificationsSecond):
            return True

        return self.to_dict() != other.to_dict()
