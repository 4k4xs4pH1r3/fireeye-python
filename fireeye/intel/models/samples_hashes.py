# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class SamplesHashes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sha256': 'str',
        'md5': 'str'
    }

    attribute_map = {
        'sha256': 'sha256',
        'md5': 'MD5'
    }

    def __init__(self, sha256=None, md5=None, local_vars_configuration=None):  # noqa: E501
        """SamplesHashes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sha256 = None
        self._md5 = None
        self.discriminator = None

        if sha256 is not None:
            self.sha256 = sha256
        if md5 is not None:
            self.md5 = md5

    @property
    def sha256(self):
        """Gets the sha256 of this SamplesHashes.  # noqa: E501


        :return: The sha256 of this SamplesHashes.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this SamplesHashes.


        :param sha256: The sha256 of this SamplesHashes.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def md5(self):
        """Gets the md5 of this SamplesHashes.  # noqa: E501


        :return: The md5 of this SamplesHashes.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this SamplesHashes.


        :param md5: The md5 of this SamplesHashes.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamplesHashes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamplesHashes):
            return True

        return self.to_dict() != other.to_dict()
