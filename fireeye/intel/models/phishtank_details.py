# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class PhishtankDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rir': 'str',
        'country': 'str',
        'cidr_block': 'str',
        'ip_address': 'str',
        'detail_time': 'str',
        'announcing_network': 'str'
    }

    attribute_map = {
        'rir': 'rir',
        'country': 'country',
        'cidr_block': 'cidr_block',
        'ip_address': 'ip_address',
        'detail_time': 'detail_time',
        'announcing_network': 'announcing_network'
    }

    def __init__(self, rir=None, country=None, cidr_block=None, ip_address=None, detail_time=None, announcing_network=None, local_vars_configuration=None):  # noqa: E501
        """PhishtankDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rir = None
        self._country = None
        self._cidr_block = None
        self._ip_address = None
        self._detail_time = None
        self._announcing_network = None
        self.discriminator = None

        if rir is not None:
            self.rir = rir
        if country is not None:
            self.country = country
        if cidr_block is not None:
            self.cidr_block = cidr_block
        if ip_address is not None:
            self.ip_address = ip_address
        if detail_time is not None:
            self.detail_time = detail_time
        if announcing_network is not None:
            self.announcing_network = announcing_network

    @property
    def rir(self):
        """Gets the rir of this PhishtankDetails.  # noqa: E501


        :return: The rir of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._rir

    @rir.setter
    def rir(self, rir):
        """Sets the rir of this PhishtankDetails.


        :param rir: The rir of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._rir = rir

    @property
    def country(self):
        """Gets the country of this PhishtankDetails.  # noqa: E501


        :return: The country of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PhishtankDetails.


        :param country: The country of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def cidr_block(self):
        """Gets the cidr_block of this PhishtankDetails.  # noqa: E501


        :return: The cidr_block of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this PhishtankDetails.


        :param cidr_block: The cidr_block of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._cidr_block = cidr_block

    @property
    def ip_address(self):
        """Gets the ip_address of this PhishtankDetails.  # noqa: E501


        :return: The ip_address of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PhishtankDetails.


        :param ip_address: The ip_address of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def detail_time(self):
        """Gets the detail_time of this PhishtankDetails.  # noqa: E501


        :return: The detail_time of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._detail_time

    @detail_time.setter
    def detail_time(self, detail_time):
        """Sets the detail_time of this PhishtankDetails.


        :param detail_time: The detail_time of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._detail_time = detail_time

    @property
    def announcing_network(self):
        """Gets the announcing_network of this PhishtankDetails.  # noqa: E501


        :return: The announcing_network of this PhishtankDetails.  # noqa: E501
        :rtype: str
        """
        return self._announcing_network

    @announcing_network.setter
    def announcing_network(self, announcing_network):
        """Sets the announcing_network of this PhishtankDetails.


        :param announcing_network: The announcing_network of this PhishtankDetails.  # noqa: E501
        :type: str
        """

        self._announcing_network = announcing_network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhishtankDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhishtankDetails):
            return True

        return self.to_dict() != other.to_dict()
