# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class AvResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product': 'str',
        'scanned': 'datetime',
        'total_malicious': 'float',
        'total_scanned': 'float'
    }

    attribute_map = {
        'product': 'product',
        'scanned': 'scanned',
        'total_malicious': 'total_malicious',
        'total_scanned': 'total_scanned'
    }

    def __init__(self, product=None, scanned=None, total_malicious=None, total_scanned=None, local_vars_configuration=None):  # noqa: E501
        """AvResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product = None
        self._scanned = None
        self._total_malicious = None
        self._total_scanned = None
        self.discriminator = None

        self.product = product
        if scanned is not None:
            self.scanned = scanned
        self.total_malicious = total_malicious
        self.total_scanned = total_scanned

    @property
    def product(self):
        """Gets the product of this AvResults.  # noqa: E501


        :return: The product of this AvResults.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AvResults.


        :param product: The product of this AvResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product is None:  # noqa: E501
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def scanned(self):
        """Gets the scanned of this AvResults.  # noqa: E501


        :return: The scanned of this AvResults.  # noqa: E501
        :rtype: datetime
        """
        return self._scanned

    @scanned.setter
    def scanned(self, scanned):
        """Sets the scanned of this AvResults.


        :param scanned: The scanned of this AvResults.  # noqa: E501
        :type: datetime
        """

        self._scanned = scanned

    @property
    def total_malicious(self):
        """Gets the total_malicious of this AvResults.  # noqa: E501


        :return: The total_malicious of this AvResults.  # noqa: E501
        :rtype: float
        """
        return self._total_malicious

    @total_malicious.setter
    def total_malicious(self, total_malicious):
        """Sets the total_malicious of this AvResults.


        :param total_malicious: The total_malicious of this AvResults.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_malicious is None:  # noqa: E501
            raise ValueError("Invalid value for `total_malicious`, must not be `None`")  # noqa: E501

        self._total_malicious = total_malicious

    @property
    def total_scanned(self):
        """Gets the total_scanned of this AvResults.  # noqa: E501


        :return: The total_scanned of this AvResults.  # noqa: E501
        :rtype: float
        """
        return self._total_scanned

    @total_scanned.setter
    def total_scanned(self, total_scanned):
        """Sets the total_scanned of this AvResults.


        :param total_scanned: The total_scanned of this AvResults.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_scanned is None:  # noqa: E501
            raise ValueError("Invalid value for `total_scanned`, must not be `None`")  # noqa: E501

        self._total_scanned = total_scanned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvResults):
            return True

        return self.to_dict() != other.to_dict()
