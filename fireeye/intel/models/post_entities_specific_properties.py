# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class PostEntitiesSpecificProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'relevant_reports': 'list[object]',
        'type': 'str',
        'object_id': 'str',
        'description': 'str',
        'keyword': 'str',
        'report': 'object'
    }

    attribute_map = {
        'relevant_reports': 'relevant_reports',
        'type': 'type',
        'object_id': 'object_id',
        'description': 'description',
        'keyword': 'keyword',
        'report': 'report'
    }

    def __init__(self, relevant_reports=None, type=None, object_id=None, description=None, keyword=None, report=None, local_vars_configuration=None):  # noqa: E501
        """PostEntitiesSpecificProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._relevant_reports = None
        self._type = None
        self._object_id = None
        self._description = None
        self._keyword = None
        self._report = None
        self.discriminator = None

        if relevant_reports is not None:
            self.relevant_reports = relevant_reports
        if type is not None:
            self.type = type
        if object_id is not None:
            self.object_id = object_id
        if description is not None:
            self.description = description
        if keyword is not None:
            self.keyword = keyword
        if report is not None:
            self.report = report

    @property
    def relevant_reports(self):
        """Gets the relevant_reports of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The relevant_reports of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: list[object]
        """
        return self._relevant_reports

    @relevant_reports.setter
    def relevant_reports(self, relevant_reports):
        """Sets the relevant_reports of this PostEntitiesSpecificProperties.


        :param relevant_reports: The relevant_reports of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: list[object]
        """

        self._relevant_reports = relevant_reports

    @property
    def type(self):
        """Gets the type of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The type of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostEntitiesSpecificProperties.


        :param type: The type of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def object_id(self):
        """Gets the object_id of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The object_id of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this PostEntitiesSpecificProperties.


        :param object_id: The object_id of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def description(self):
        """Gets the description of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The description of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostEntitiesSpecificProperties.


        :param description: The description of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def keyword(self):
        """Gets the keyword of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The keyword of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this PostEntitiesSpecificProperties.


        :param keyword: The keyword of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def report(self):
        """Gets the report of this PostEntitiesSpecificProperties.  # noqa: E501


        :return: The report of this PostEntitiesSpecificProperties.  # noqa: E501
        :rtype: object
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this PostEntitiesSpecificProperties.


        :param report: The report of this PostEntitiesSpecificProperties.  # noqa: E501
        :type: object
        """

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostEntitiesSpecificProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostEntitiesSpecificProperties):
            return True

        return self.to_dict() != other.to_dict()
