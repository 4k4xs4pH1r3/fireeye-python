# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class AttackPatternsAttackPatterns(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'initial_access': 'list[AttackPattern]',
        'execution': 'list[AttackPattern]',
        'persistence': 'list[AttackPattern]',
        'privilege_escalation': 'list[AttackPattern]',
        'defense_evasion': 'list[AttackPattern]',
        'credential_access': 'list[AttackPattern]',
        'discovery': 'list[AttackPattern]',
        'lateral_movement': 'list[AttackPattern]',
        'collection': 'list[AttackPattern]',
        'exfiltration': 'list[AttackPattern]',
        'command_and_control': 'list[AttackPattern]',
        'impact': 'list[AttackPattern]'
    }

    attribute_map = {
        'initial_access': 'Initial Access',
        'execution': 'Execution',
        'persistence': 'Persistence',
        'privilege_escalation': 'Privilege Escalation',
        'defense_evasion': 'Defense Evasion',
        'credential_access': 'Credential Access',
        'discovery': 'Discovery',
        'lateral_movement': 'Lateral Movement',
        'collection': 'Collection',
        'exfiltration': 'Exfiltration',
        'command_and_control': 'Command and Control',
        'impact': 'Impact'
    }

    def __init__(self, initial_access=None, execution=None, persistence=None, privilege_escalation=None, defense_evasion=None, credential_access=None, discovery=None, lateral_movement=None, collection=None, exfiltration=None, command_and_control=None, impact=None, local_vars_configuration=None):  # noqa: E501
        """AttackPatternsAttackPatterns - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._initial_access = None
        self._execution = None
        self._persistence = None
        self._privilege_escalation = None
        self._defense_evasion = None
        self._credential_access = None
        self._discovery = None
        self._lateral_movement = None
        self._collection = None
        self._exfiltration = None
        self._command_and_control = None
        self._impact = None
        self.discriminator = None

        if initial_access is not None:
            self.initial_access = initial_access
        if execution is not None:
            self.execution = execution
        if persistence is not None:
            self.persistence = persistence
        if privilege_escalation is not None:
            self.privilege_escalation = privilege_escalation
        if defense_evasion is not None:
            self.defense_evasion = defense_evasion
        if credential_access is not None:
            self.credential_access = credential_access
        if discovery is not None:
            self.discovery = discovery
        if lateral_movement is not None:
            self.lateral_movement = lateral_movement
        if collection is not None:
            self.collection = collection
        if exfiltration is not None:
            self.exfiltration = exfiltration
        if command_and_control is not None:
            self.command_and_control = command_and_control
        if impact is not None:
            self.impact = impact

    @property
    def initial_access(self):
        """Gets the initial_access of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The initial_access of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._initial_access

    @initial_access.setter
    def initial_access(self, initial_access):
        """Sets the initial_access of this AttackPatternsAttackPatterns.


        :param initial_access: The initial_access of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._initial_access = initial_access

    @property
    def execution(self):
        """Gets the execution of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The execution of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this AttackPatternsAttackPatterns.


        :param execution: The execution of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._execution = execution

    @property
    def persistence(self):
        """Gets the persistence of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The persistence of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._persistence

    @persistence.setter
    def persistence(self, persistence):
        """Sets the persistence of this AttackPatternsAttackPatterns.


        :param persistence: The persistence of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._persistence = persistence

    @property
    def privilege_escalation(self):
        """Gets the privilege_escalation of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The privilege_escalation of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._privilege_escalation

    @privilege_escalation.setter
    def privilege_escalation(self, privilege_escalation):
        """Sets the privilege_escalation of this AttackPatternsAttackPatterns.


        :param privilege_escalation: The privilege_escalation of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._privilege_escalation = privilege_escalation

    @property
    def defense_evasion(self):
        """Gets the defense_evasion of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The defense_evasion of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._defense_evasion

    @defense_evasion.setter
    def defense_evasion(self, defense_evasion):
        """Sets the defense_evasion of this AttackPatternsAttackPatterns.


        :param defense_evasion: The defense_evasion of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._defense_evasion = defense_evasion

    @property
    def credential_access(self):
        """Gets the credential_access of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The credential_access of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._credential_access

    @credential_access.setter
    def credential_access(self, credential_access):
        """Sets the credential_access of this AttackPatternsAttackPatterns.


        :param credential_access: The credential_access of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._credential_access = credential_access

    @property
    def discovery(self):
        """Gets the discovery of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The discovery of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this AttackPatternsAttackPatterns.


        :param discovery: The discovery of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._discovery = discovery

    @property
    def lateral_movement(self):
        """Gets the lateral_movement of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The lateral_movement of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._lateral_movement

    @lateral_movement.setter
    def lateral_movement(self, lateral_movement):
        """Sets the lateral_movement of this AttackPatternsAttackPatterns.


        :param lateral_movement: The lateral_movement of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._lateral_movement = lateral_movement

    @property
    def collection(self):
        """Gets the collection of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The collection of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this AttackPatternsAttackPatterns.


        :param collection: The collection of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._collection = collection

    @property
    def exfiltration(self):
        """Gets the exfiltration of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The exfiltration of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._exfiltration

    @exfiltration.setter
    def exfiltration(self, exfiltration):
        """Sets the exfiltration of this AttackPatternsAttackPatterns.


        :param exfiltration: The exfiltration of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._exfiltration = exfiltration

    @property
    def command_and_control(self):
        """Gets the command_and_control of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The command_and_control of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._command_and_control

    @command_and_control.setter
    def command_and_control(self, command_and_control):
        """Sets the command_and_control of this AttackPatternsAttackPatterns.


        :param command_and_control: The command_and_control of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._command_and_control = command_and_control

    @property
    def impact(self):
        """Gets the impact of this AttackPatternsAttackPatterns.  # noqa: E501


        :return: The impact of this AttackPatternsAttackPatterns.  # noqa: E501
        :rtype: list[AttackPattern]
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this AttackPatternsAttackPatterns.


        :param impact: The impact of this AttackPatternsAttackPatterns.  # noqa: E501
        :type: list[AttackPattern]
        """

        self._impact = impact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttackPatternsAttackPatterns):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttackPatternsAttackPatterns):
            return True

        return self.to_dict() != other.to_dict()
