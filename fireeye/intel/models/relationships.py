# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class Relationships(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'source_ref': 'str',
        'target_ref': 'str',
        'relationship_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'source_ref': 'source_ref',
        'target_ref': 'target_ref',
        'relationship_type': 'relationship_type'
    }

    def __init__(self, type=None, id=None, source_ref=None, target_ref=None, relationship_type=None, local_vars_configuration=None):  # noqa: E501
        """Relationships - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._source_ref = None
        self._target_ref = None
        self._relationship_type = None
        self.discriminator = None

        self.type = type
        self.id = id
        self.source_ref = source_ref
        self.target_ref = target_ref
        self.relationship_type = relationship_type

    @property
    def type(self):
        """Gets the type of this Relationships.  # noqa: E501


        :return: The type of this Relationships.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Relationships.


        :param type: The type of this Relationships.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this Relationships.  # noqa: E501


        :return: The id of this Relationships.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relationships.


        :param id: The id of this Relationships.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source_ref(self):
        """Gets the source_ref of this Relationships.  # noqa: E501


        :return: The source_ref of this Relationships.  # noqa: E501
        :rtype: str
        """
        return self._source_ref

    @source_ref.setter
    def source_ref(self, source_ref):
        """Sets the source_ref of this Relationships.


        :param source_ref: The source_ref of this Relationships.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `source_ref`, must not be `None`")  # noqa: E501

        self._source_ref = source_ref

    @property
    def target_ref(self):
        """Gets the target_ref of this Relationships.  # noqa: E501


        :return: The target_ref of this Relationships.  # noqa: E501
        :rtype: str
        """
        return self._target_ref

    @target_ref.setter
    def target_ref(self, target_ref):
        """Sets the target_ref of this Relationships.


        :param target_ref: The target_ref of this Relationships.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `target_ref`, must not be `None`")  # noqa: E501

        self._target_ref = target_ref

    @property
    def relationship_type(self):
        """Gets the relationship_type of this Relationships.  # noqa: E501


        :return: The relationship_type of this Relationships.  # noqa: E501
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this Relationships.


        :param relationship_type: The relationship_type of this Relationships.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and relationship_type is None:  # noqa: E501
            raise ValueError("Invalid value for `relationship_type`, must not be `None`")  # noqa: E501

        self._relationship_type = relationship_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relationships):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Relationships):
            return True

        return self.to_dict() != other.to_dict()
