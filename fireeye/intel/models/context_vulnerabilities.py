# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class ContextVulnerabilities(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'vulnerability_id': 'str',
        'description': 'str',
        'url': 'str',
        'affected_products': 'list[str]',
        'remediation': 'Remediation'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'vulnerability_id': 'vulnerability_id',
        'description': 'description',
        'url': 'url',
        'affected_products': 'affectedProducts',
        'remediation': 'remediation'
    }

    def __init__(self, type=None, id=None, vulnerability_id=None, description=None, url=None, affected_products=None, remediation=None, local_vars_configuration=None):  # noqa: E501
        """ContextVulnerabilities - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._vulnerability_id = None
        self._description = None
        self._url = None
        self._affected_products = None
        self._remediation = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        self.vulnerability_id = vulnerability_id
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if affected_products is not None:
            self.affected_products = affected_products
        if remediation is not None:
            self.remediation = remediation

    @property
    def type(self):
        """Gets the type of this ContextVulnerabilities.  # noqa: E501


        :return: The type of this ContextVulnerabilities.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContextVulnerabilities.


        :param type: The type of this ContextVulnerabilities.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this ContextVulnerabilities.  # noqa: E501


        :return: The id of this ContextVulnerabilities.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContextVulnerabilities.


        :param id: The id of this ContextVulnerabilities.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this ContextVulnerabilities.  # noqa: E501


        :return: The vulnerability_id of this ContextVulnerabilities.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this ContextVulnerabilities.


        :param vulnerability_id: The vulnerability_id of this ContextVulnerabilities.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vulnerability_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vulnerability_id`, must not be `None`")  # noqa: E501

        self._vulnerability_id = vulnerability_id

    @property
    def description(self):
        """Gets the description of this ContextVulnerabilities.  # noqa: E501


        :return: The description of this ContextVulnerabilities.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContextVulnerabilities.


        :param description: The description of this ContextVulnerabilities.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this ContextVulnerabilities.  # noqa: E501


        :return: The url of this ContextVulnerabilities.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContextVulnerabilities.


        :param url: The url of this ContextVulnerabilities.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def affected_products(self):
        """Gets the affected_products of this ContextVulnerabilities.  # noqa: E501


        :return: The affected_products of this ContextVulnerabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_products

    @affected_products.setter
    def affected_products(self, affected_products):
        """Sets the affected_products of this ContextVulnerabilities.


        :param affected_products: The affected_products of this ContextVulnerabilities.  # noqa: E501
        :type: list[str]
        """

        self._affected_products = affected_products

    @property
    def remediation(self):
        """Gets the remediation of this ContextVulnerabilities.  # noqa: E501


        :return: The remediation of this ContextVulnerabilities.  # noqa: E501
        :rtype: Remediation
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this ContextVulnerabilities.


        :param remediation: The remediation of this ContextVulnerabilities.  # noqa: E501
        :type: Remediation
        """

        self._remediation = remediation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContextVulnerabilities):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContextVulnerabilities):
            return True

        return self.to_dict() != other.to_dict()
