# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class NewsSpecificProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'report_id': 'str',
        'title': 'str',
        'media_comment': 'str',
        'media_link': 'str',
        'media_outlet': 'str',
        'analyst_comment': 'str',
        'judgment': 'str',
        'related_reports': 'list[object]'
    }

    attribute_map = {
        'report_id': 'report_id',
        'title': 'title',
        'media_comment': 'media_comment',
        'media_link': 'media_link',
        'media_outlet': 'media_outlet',
        'analyst_comment': 'analyst_comment',
        'judgment': 'judgment',
        'related_reports': 'related_reports'
    }

    def __init__(self, report_id=None, title=None, media_comment=None, media_link=None, media_outlet=None, analyst_comment=None, judgment=None, related_reports=None, local_vars_configuration=None):  # noqa: E501
        """NewsSpecificProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._report_id = None
        self._title = None
        self._media_comment = None
        self._media_link = None
        self._media_outlet = None
        self._analyst_comment = None
        self._judgment = None
        self._related_reports = None
        self.discriminator = None

        if report_id is not None:
            self.report_id = report_id
        if title is not None:
            self.title = title
        if media_comment is not None:
            self.media_comment = media_comment
        if media_link is not None:
            self.media_link = media_link
        if media_outlet is not None:
            self.media_outlet = media_outlet
        if analyst_comment is not None:
            self.analyst_comment = analyst_comment
        if judgment is not None:
            self.judgment = judgment
        if related_reports is not None:
            self.related_reports = related_reports

    @property
    def report_id(self):
        """Gets the report_id of this NewsSpecificProperties.  # noqa: E501


        :return: The report_id of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this NewsSpecificProperties.


        :param report_id: The report_id of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def title(self):
        """Gets the title of this NewsSpecificProperties.  # noqa: E501


        :return: The title of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewsSpecificProperties.


        :param title: The title of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def media_comment(self):
        """Gets the media_comment of this NewsSpecificProperties.  # noqa: E501


        :return: The media_comment of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._media_comment

    @media_comment.setter
    def media_comment(self, media_comment):
        """Sets the media_comment of this NewsSpecificProperties.


        :param media_comment: The media_comment of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._media_comment = media_comment

    @property
    def media_link(self):
        """Gets the media_link of this NewsSpecificProperties.  # noqa: E501


        :return: The media_link of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._media_link

    @media_link.setter
    def media_link(self, media_link):
        """Sets the media_link of this NewsSpecificProperties.


        :param media_link: The media_link of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._media_link = media_link

    @property
    def media_outlet(self):
        """Gets the media_outlet of this NewsSpecificProperties.  # noqa: E501


        :return: The media_outlet of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._media_outlet

    @media_outlet.setter
    def media_outlet(self, media_outlet):
        """Sets the media_outlet of this NewsSpecificProperties.


        :param media_outlet: The media_outlet of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._media_outlet = media_outlet

    @property
    def analyst_comment(self):
        """Gets the analyst_comment of this NewsSpecificProperties.  # noqa: E501


        :return: The analyst_comment of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._analyst_comment

    @analyst_comment.setter
    def analyst_comment(self, analyst_comment):
        """Sets the analyst_comment of this NewsSpecificProperties.


        :param analyst_comment: The analyst_comment of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._analyst_comment = analyst_comment

    @property
    def judgment(self):
        """Gets the judgment of this NewsSpecificProperties.  # noqa: E501


        :return: The judgment of this NewsSpecificProperties.  # noqa: E501
        :rtype: str
        """
        return self._judgment

    @judgment.setter
    def judgment(self, judgment):
        """Sets the judgment of this NewsSpecificProperties.


        :param judgment: The judgment of this NewsSpecificProperties.  # noqa: E501
        :type: str
        """

        self._judgment = judgment

    @property
    def related_reports(self):
        """Gets the related_reports of this NewsSpecificProperties.  # noqa: E501


        :return: The related_reports of this NewsSpecificProperties.  # noqa: E501
        :rtype: list[object]
        """
        return self._related_reports

    @related_reports.setter
    def related_reports(self, related_reports):
        """Sets the related_reports of this NewsSpecificProperties.


        :param related_reports: The related_reports of this NewsSpecificProperties.  # noqa: E501
        :type: list[object]
        """

        self._related_reports = related_reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsSpecificProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewsSpecificProperties):
            return True

        return self.to_dict() != other.to_dict()
