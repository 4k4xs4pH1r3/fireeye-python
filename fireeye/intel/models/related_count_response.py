# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class RelatedCountResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ioc': 'object',
        'actor': 'int',
        'malware': 'int',
        'report': 'int',
        'location': 'int',
        'indicator': 'int',
        'file': 'int',
        'domain': 'int',
        'url': 'int',
        'ip': 'int',
        'email': 'int',
        'attack_pattern': 'int',
        'tool': 'int',
        'infrastructure': 'int',
        'industry': 'int',
        'campaign': 'int',
        'software': 'int',
        'cve': 'int',
        'intrusion_set': 'int',
        'socket_addr': 'int',
        'network_traffic': 'int',
        'windows_registry_key': 'int',
        'course_of_action': 'int'
    }

    attribute_map = {
        'ioc': 'ioc',
        'actor': 'actor',
        'malware': 'malware',
        'report': 'report',
        'location': 'location',
        'indicator': 'indicator',
        'file': 'file',
        'domain': 'domain',
        'url': 'url',
        'ip': 'ip',
        'email': 'email',
        'attack_pattern': 'attack-pattern',
        'tool': 'tool',
        'infrastructure': 'infrastructure',
        'industry': 'industry',
        'campaign': 'campaign',
        'software': 'software',
        'cve': 'cve',
        'intrusion_set': 'intrusion-set',
        'socket_addr': 'socket-addr',
        'network_traffic': 'network-traffic',
        'windows_registry_key': 'windows-registry-key',
        'course_of_action': 'course-of-action'
    }

    def __init__(self, ioc=None, actor=None, malware=None, report=None, location=None, indicator=None, file=None, domain=None, url=None, ip=None, email=None, attack_pattern=None, tool=None, infrastructure=None, industry=None, campaign=None, software=None, cve=None, intrusion_set=None, socket_addr=None, network_traffic=None, windows_registry_key=None, course_of_action=None, local_vars_configuration=None):  # noqa: E501
        """RelatedCountResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ioc = None
        self._actor = None
        self._malware = None
        self._report = None
        self._location = None
        self._indicator = None
        self._file = None
        self._domain = None
        self._url = None
        self._ip = None
        self._email = None
        self._attack_pattern = None
        self._tool = None
        self._infrastructure = None
        self._industry = None
        self._campaign = None
        self._software = None
        self._cve = None
        self._intrusion_set = None
        self._socket_addr = None
        self._network_traffic = None
        self._windows_registry_key = None
        self._course_of_action = None
        self.discriminator = None

        if ioc is not None:
            self.ioc = ioc
        if actor is not None:
            self.actor = actor
        if malware is not None:
            self.malware = malware
        if report is not None:
            self.report = report
        if location is not None:
            self.location = location
        if indicator is not None:
            self.indicator = indicator
        if file is not None:
            self.file = file
        if domain is not None:
            self.domain = domain
        if url is not None:
            self.url = url
        if ip is not None:
            self.ip = ip
        if email is not None:
            self.email = email
        if attack_pattern is not None:
            self.attack_pattern = attack_pattern
        if tool is not None:
            self.tool = tool
        if infrastructure is not None:
            self.infrastructure = infrastructure
        if industry is not None:
            self.industry = industry
        if campaign is not None:
            self.campaign = campaign
        if software is not None:
            self.software = software
        if cve is not None:
            self.cve = cve
        if intrusion_set is not None:
            self.intrusion_set = intrusion_set
        if socket_addr is not None:
            self.socket_addr = socket_addr
        if network_traffic is not None:
            self.network_traffic = network_traffic
        if windows_registry_key is not None:
            self.windows_registry_key = windows_registry_key
        if course_of_action is not None:
            self.course_of_action = course_of_action

    @property
    def ioc(self):
        """Gets the ioc of this RelatedCountResponse.  # noqa: E501


        :return: The ioc of this RelatedCountResponse.  # noqa: E501
        :rtype: object
        """
        return self._ioc

    @ioc.setter
    def ioc(self, ioc):
        """Sets the ioc of this RelatedCountResponse.


        :param ioc: The ioc of this RelatedCountResponse.  # noqa: E501
        :type: object
        """

        self._ioc = ioc

    @property
    def actor(self):
        """Gets the actor of this RelatedCountResponse.  # noqa: E501


        :return: The actor of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this RelatedCountResponse.


        :param actor: The actor of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._actor = actor

    @property
    def malware(self):
        """Gets the malware of this RelatedCountResponse.  # noqa: E501


        :return: The malware of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._malware

    @malware.setter
    def malware(self, malware):
        """Sets the malware of this RelatedCountResponse.


        :param malware: The malware of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._malware = malware

    @property
    def report(self):
        """Gets the report of this RelatedCountResponse.  # noqa: E501


        :return: The report of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this RelatedCountResponse.


        :param report: The report of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._report = report

    @property
    def location(self):
        """Gets the location of this RelatedCountResponse.  # noqa: E501


        :return: The location of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RelatedCountResponse.


        :param location: The location of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def indicator(self):
        """Gets the indicator of this RelatedCountResponse.  # noqa: E501


        :return: The indicator of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this RelatedCountResponse.


        :param indicator: The indicator of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._indicator = indicator

    @property
    def file(self):
        """Gets the file of this RelatedCountResponse.  # noqa: E501


        :return: The file of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this RelatedCountResponse.


        :param file: The file of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._file = file

    @property
    def domain(self):
        """Gets the domain of this RelatedCountResponse.  # noqa: E501


        :return: The domain of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RelatedCountResponse.


        :param domain: The domain of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._domain = domain

    @property
    def url(self):
        """Gets the url of this RelatedCountResponse.  # noqa: E501


        :return: The url of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RelatedCountResponse.


        :param url: The url of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._url = url

    @property
    def ip(self):
        """Gets the ip of this RelatedCountResponse.  # noqa: E501


        :return: The ip of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RelatedCountResponse.


        :param ip: The ip of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._ip = ip

    @property
    def email(self):
        """Gets the email of this RelatedCountResponse.  # noqa: E501


        :return: The email of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RelatedCountResponse.


        :param email: The email of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._email = email

    @property
    def attack_pattern(self):
        """Gets the attack_pattern of this RelatedCountResponse.  # noqa: E501


        :return: The attack_pattern of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._attack_pattern

    @attack_pattern.setter
    def attack_pattern(self, attack_pattern):
        """Sets the attack_pattern of this RelatedCountResponse.


        :param attack_pattern: The attack_pattern of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._attack_pattern = attack_pattern

    @property
    def tool(self):
        """Gets the tool of this RelatedCountResponse.  # noqa: E501


        :return: The tool of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this RelatedCountResponse.


        :param tool: The tool of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._tool = tool

    @property
    def infrastructure(self):
        """Gets the infrastructure of this RelatedCountResponse.  # noqa: E501


        :return: The infrastructure of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._infrastructure

    @infrastructure.setter
    def infrastructure(self, infrastructure):
        """Sets the infrastructure of this RelatedCountResponse.


        :param infrastructure: The infrastructure of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._infrastructure = infrastructure

    @property
    def industry(self):
        """Gets the industry of this RelatedCountResponse.  # noqa: E501


        :return: The industry of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this RelatedCountResponse.


        :param industry: The industry of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._industry = industry

    @property
    def campaign(self):
        """Gets the campaign of this RelatedCountResponse.  # noqa: E501


        :return: The campaign of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this RelatedCountResponse.


        :param campaign: The campaign of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._campaign = campaign

    @property
    def software(self):
        """Gets the software of this RelatedCountResponse.  # noqa: E501


        :return: The software of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this RelatedCountResponse.


        :param software: The software of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._software = software

    @property
    def cve(self):
        """Gets the cve of this RelatedCountResponse.  # noqa: E501


        :return: The cve of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this RelatedCountResponse.


        :param cve: The cve of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._cve = cve

    @property
    def intrusion_set(self):
        """Gets the intrusion_set of this RelatedCountResponse.  # noqa: E501


        :return: The intrusion_set of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._intrusion_set

    @intrusion_set.setter
    def intrusion_set(self, intrusion_set):
        """Sets the intrusion_set of this RelatedCountResponse.


        :param intrusion_set: The intrusion_set of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._intrusion_set = intrusion_set

    @property
    def socket_addr(self):
        """Gets the socket_addr of this RelatedCountResponse.  # noqa: E501


        :return: The socket_addr of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._socket_addr

    @socket_addr.setter
    def socket_addr(self, socket_addr):
        """Sets the socket_addr of this RelatedCountResponse.


        :param socket_addr: The socket_addr of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._socket_addr = socket_addr

    @property
    def network_traffic(self):
        """Gets the network_traffic of this RelatedCountResponse.  # noqa: E501


        :return: The network_traffic of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._network_traffic

    @network_traffic.setter
    def network_traffic(self, network_traffic):
        """Sets the network_traffic of this RelatedCountResponse.


        :param network_traffic: The network_traffic of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._network_traffic = network_traffic

    @property
    def windows_registry_key(self):
        """Gets the windows_registry_key of this RelatedCountResponse.  # noqa: E501


        :return: The windows_registry_key of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._windows_registry_key

    @windows_registry_key.setter
    def windows_registry_key(self, windows_registry_key):
        """Sets the windows_registry_key of this RelatedCountResponse.


        :param windows_registry_key: The windows_registry_key of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._windows_registry_key = windows_registry_key

    @property
    def course_of_action(self):
        """Gets the course_of_action of this RelatedCountResponse.  # noqa: E501


        :return: The course_of_action of this RelatedCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._course_of_action

    @course_of_action.setter
    def course_of_action(self, course_of_action):
        """Sets the course_of_action of this RelatedCountResponse.


        :param course_of_action: The course_of_action of this RelatedCountResponse.  # noqa: E501
        :type: int
        """

        self._course_of_action = course_of_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelatedCountResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelatedCountResponse):
            return True

        return self.to_dict() != other.to_dict()
