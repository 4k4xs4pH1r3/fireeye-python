# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fireeye.intel.configuration import Configuration


class CveVulnerabilityScoreProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_complexity': 'str',
        'temporal_score': 'int',
        'confidentiality_impact': 'str',
        'remediation_level': 'str',
        'report_confidence': 'str',
        'base_score': 'int',
        'access_vector': 'str',
        'authentication': 'str',
        'integrity_impact': 'str',
        'exploitability': 'str',
        'availablity_impact': 'str'
    }

    attribute_map = {
        'access_complexity': 'access_complexity',
        'temporal_score': 'temporal_score',
        'confidentiality_impact': 'confidentiality_impact',
        'remediation_level': 'remediation_level',
        'report_confidence': 'report_confidence',
        'base_score': 'base_score',
        'access_vector': 'access_vector',
        'authentication': 'authentication',
        'integrity_impact': 'integrity_impact',
        'exploitability': 'exploitability',
        'availablity_impact': 'availablity_impact'
    }

    def __init__(self, access_complexity=None, temporal_score=None, confidentiality_impact=None, remediation_level=None, report_confidence=None, base_score=None, access_vector=None, authentication=None, integrity_impact=None, exploitability=None, availablity_impact=None, local_vars_configuration=None):  # noqa: E501
        """CveVulnerabilityScoreProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_complexity = None
        self._temporal_score = None
        self._confidentiality_impact = None
        self._remediation_level = None
        self._report_confidence = None
        self._base_score = None
        self._access_vector = None
        self._authentication = None
        self._integrity_impact = None
        self._exploitability = None
        self._availablity_impact = None
        self.discriminator = None

        if access_complexity is not None:
            self.access_complexity = access_complexity
        if temporal_score is not None:
            self.temporal_score = temporal_score
        if confidentiality_impact is not None:
            self.confidentiality_impact = confidentiality_impact
        if remediation_level is not None:
            self.remediation_level = remediation_level
        if report_confidence is not None:
            self.report_confidence = report_confidence
        if base_score is not None:
            self.base_score = base_score
        if access_vector is not None:
            self.access_vector = access_vector
        if authentication is not None:
            self.authentication = authentication
        if integrity_impact is not None:
            self.integrity_impact = integrity_impact
        if exploitability is not None:
            self.exploitability = exploitability
        if availablity_impact is not None:
            self.availablity_impact = availablity_impact

    @property
    def access_complexity(self):
        """Gets the access_complexity of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The access_complexity of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._access_complexity

    @access_complexity.setter
    def access_complexity(self, access_complexity):
        """Sets the access_complexity of this CveVulnerabilityScoreProperties.


        :param access_complexity: The access_complexity of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._access_complexity = access_complexity

    @property
    def temporal_score(self):
        """Gets the temporal_score of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The temporal_score of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: int
        """
        return self._temporal_score

    @temporal_score.setter
    def temporal_score(self, temporal_score):
        """Sets the temporal_score of this CveVulnerabilityScoreProperties.


        :param temporal_score: The temporal_score of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: int
        """

        self._temporal_score = temporal_score

    @property
    def confidentiality_impact(self):
        """Gets the confidentiality_impact of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The confidentiality_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact):
        """Sets the confidentiality_impact of this CveVulnerabilityScoreProperties.


        :param confidentiality_impact: The confidentiality_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._confidentiality_impact = confidentiality_impact

    @property
    def remediation_level(self):
        """Gets the remediation_level of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The remediation_level of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._remediation_level

    @remediation_level.setter
    def remediation_level(self, remediation_level):
        """Sets the remediation_level of this CveVulnerabilityScoreProperties.


        :param remediation_level: The remediation_level of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._remediation_level = remediation_level

    @property
    def report_confidence(self):
        """Gets the report_confidence of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The report_confidence of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._report_confidence

    @report_confidence.setter
    def report_confidence(self, report_confidence):
        """Sets the report_confidence of this CveVulnerabilityScoreProperties.


        :param report_confidence: The report_confidence of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._report_confidence = report_confidence

    @property
    def base_score(self):
        """Gets the base_score of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The base_score of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: int
        """
        return self._base_score

    @base_score.setter
    def base_score(self, base_score):
        """Sets the base_score of this CveVulnerabilityScoreProperties.


        :param base_score: The base_score of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: int
        """

        self._base_score = base_score

    @property
    def access_vector(self):
        """Gets the access_vector of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The access_vector of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._access_vector

    @access_vector.setter
    def access_vector(self, access_vector):
        """Sets the access_vector of this CveVulnerabilityScoreProperties.


        :param access_vector: The access_vector of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._access_vector = access_vector

    @property
    def authentication(self):
        """Gets the authentication of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The authentication of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this CveVulnerabilityScoreProperties.


        :param authentication: The authentication of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._authentication = authentication

    @property
    def integrity_impact(self):
        """Gets the integrity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The integrity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact):
        """Sets the integrity_impact of this CveVulnerabilityScoreProperties.


        :param integrity_impact: The integrity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._integrity_impact = integrity_impact

    @property
    def exploitability(self):
        """Gets the exploitability of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The exploitability of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._exploitability

    @exploitability.setter
    def exploitability(self, exploitability):
        """Sets the exploitability of this CveVulnerabilityScoreProperties.


        :param exploitability: The exploitability of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._exploitability = exploitability

    @property
    def availablity_impact(self):
        """Gets the availablity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501


        :return: The availablity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :rtype: str
        """
        return self._availablity_impact

    @availablity_impact.setter
    def availablity_impact(self, availablity_impact):
        """Sets the availablity_impact of this CveVulnerabilityScoreProperties.


        :param availablity_impact: The availablity_impact of this CveVulnerabilityScoreProperties.  # noqa: E501
        :type: str
        """

        self._availablity_impact = availablity_impact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CveVulnerabilityScoreProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CveVulnerabilityScoreProperties):
            return True

        return self.to_dict() != other.to_dict()
