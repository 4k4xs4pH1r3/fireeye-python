# coding: utf-8

"""
    Intel API v3 - Simplified Intel API

    FireEye Intel API - Simplified Intelligence  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@fireeye.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fireeye.intel.api_client import ApiClient
from fireeye.intel.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def a_pi_request(self, **kwargs):  # noqa: E501
        """Get context for indicator observables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfipContexthashContextfqdnContextsignatureContextsignatureIdContextemailContexturlContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.a_pi_request_with_http_info(**kwargs)  # noqa: E501

    def a_pi_request_with_http_info(self, **kwargs):  # noqa: E501
        """Get context for indicator observables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfipContexthashContextfqdnContextsignatureContextsignatureIdContextemailContexturlContext, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/collections/indicators/objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfipContexthashContextfqdnContextsignatureContextsignatureIdContextemailContexturlContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actor_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the actor id specified in {id}.  # noqa: E501

        Details information about actor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsActorIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_actor_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_actor_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the actor id specified in {id}.  # noqa: E501

        Details information about actor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsActorIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actor_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_actor_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/actor/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsActorIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actor_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for actor specified in {related}.  # noqa: E501

        Actor Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsActorRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_actor_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_actor_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for actor specified in {related}.  # noqa: E501

        Actor Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsActorRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actor_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_actor_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_actor_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/actor/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsActorRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actor_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the actor id specified in {id}.  # noqa: E501

        Actor summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Actor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_actor_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_actor_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the actor id specified in {id}.  # noqa: E501

        Actor summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actor_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Actor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actor_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_actor_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/actor/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Actor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_actors(self, **kwargs):  # noqa: E501
        """List of all actors present in our system. This can be considered as vocab endpoint for actors.  # noqa: E501

        Returns list of all the actors present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_actors(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsActorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_actors_with_http_info(**kwargs)  # noqa: E501

    def get_all_actors_with_http_info(self, **kwargs):  # noqa: E501
        """List of all actors present in our system. This can be considered as vocab endpoint for actors.  # noqa: E501

        Returns list of all the actors present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_actors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsActorResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_actors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/actor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsActorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_attack_patterns(self, **kwargs):  # noqa: E501
        """List of all attack-patterns present in our system. This can be considered as vocab endpoint for attack-patterns.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_attack_patterns(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsAttackPatternResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_attack_patterns_with_http_info(**kwargs)  # noqa: E501

    def get_all_attack_patterns_with_http_info(self, **kwargs):  # noqa: E501
        """List of all attack-patterns present in our system. This can be considered as vocab endpoint for attack-patterns.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_attack_patterns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsAttackPatternResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_attack_patterns" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/attack-pattern', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsAttackPatternResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_cve(self, **kwargs):  # noqa: E501
        """List of all CVEs present in our system. This can be considered as vocab endpoint for cve.  # noqa: E501

        Returns list of all the cve present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cve(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsCveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_cve_with_http_info(**kwargs)  # noqa: E501

    def get_all_cve_with_http_info(self, **kwargs):  # noqa: E501
        """List of all CVEs present in our system. This can be considered as vocab endpoint for cve.  # noqa: E501

        Returns list of all the cve present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsCveResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_cve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/cve', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsCveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_entities(self, **kwargs):  # noqa: E501
        """Extracted Entities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str match_type: This will list all entities matching with the queried match.type.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EntitiesSpecificProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_entities_with_http_info(**kwargs)  # noqa: E501

    def get_all_entities_with_http_info(self, **kwargs):  # noqa: E501
        """Extracted Entities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str match_type: This will list all entities matching with the queried match.type.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EntitiesSpecificProperties, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'match_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'match_type' in local_var_params and local_var_params['match_type'] is not None:  # noqa: E501
            query_params.append(('match.type', local_var_params['match_type']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntitiesSpecificProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_etu_collections(self, **kwargs):  # noqa: E501
        """Endpoint details for all supported collection types.  # noqa: E501

        Returns details for the all supported collection types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_etu_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EndpointCollection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_etu_collections_with_http_info(**kwargs)  # noqa: E501

    def get_all_etu_collections_with_http_info(self, **kwargs):  # noqa: E501
        """Endpoint details for all supported collection types.  # noqa: E501

        Returns details for the all supported collection types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_etu_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EndpointCollection], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_etu_collections" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EndpointCollection]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_industries(self, **kwargs):  # noqa: E501
        """List of all industries present in our system. This can be considered as vocab endpoint for industries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_industries(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsIndustryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_industries_with_http_info(**kwargs)  # noqa: E501

    def get_all_industries_with_http_info(self, **kwargs):  # noqa: E501
        """List of all industries present in our system. This can be considered as vocab endpoint for industries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_industries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsIndustryResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_industries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/industry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsIndustryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_iocs(self, **kwargs):  # noqa: E501
        """List of all iocs present in our system. This can be considered as vocab endpoint for iocs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_iocs(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the iocs matching(substring match) for the type specified. Values for type are - indicator, file, domain, url, ip and email.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str value: This will list all the objects matching(substring match) with the queried value.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsIocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_iocs_with_http_info(**kwargs)  # noqa: E501

    def get_all_iocs_with_http_info(self, **kwargs):  # noqa: E501
        """List of all iocs present in our system. This can be considered as vocab endpoint for iocs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_iocs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the iocs matching(substring match) for the type specified. Values for type are - indicator, file, domain, url, ip and email.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str value: This will list all the objects matching(substring match) with the queried value.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsIocsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'type',
            'name',
            'value',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_iocs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'value' in local_var_params and local_var_params['value'] is not None:  # noqa: E501
            query_params.append(('value', local_var_params['value']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/ioc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsIocsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_locations(self, **kwargs):  # noqa: E501
        """List of all locations present in our system. This can be considered as vocab endpoint for locations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_locations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsLocationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_locations_with_http_info(**kwargs)  # noqa: E501

    def get_all_locations_with_http_info(self, **kwargs):  # noqa: E501
        """List of all locations present in our system. This can be considered as vocab endpoint for locations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_locations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsLocationResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_locations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsLocationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_malwares(self, **kwargs):  # noqa: E501
        """List of all malwares present in our system. This can be considered as vocab endpoint for malwares.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_malwares(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsMalwareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_malwares_with_http_info(**kwargs)  # noqa: E501

    def get_all_malwares_with_http_info(self, **kwargs):  # noqa: E501
        """List of all malwares present in our system. This can be considered as vocab endpoint for malwares.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_malwares_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsMalwareResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'name',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_malwares" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/malware', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsMalwareResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_news_reports(self, **kwargs):  # noqa: E501
        """List of all news analysis reports present in our system.  # noqa: E501

        Returns list of all the news analysis reports present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_news_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str title: This will list all the news analysis reports matching(substring match) with the queried title.
        :param str media_comment: This will list all the news analysis reports matching(substring match) with the queried media_comment.
        :param str media_outlet: This will list all the news analysis reports matching(substring match) with the queried media_outlet.
        :param str judgment: This will list all the news analysis reports matching(substring match) with the queried judgment.
        :param str analyst_comment: This will list all the news analysis reports matching(substring match) with the queried analyst_comment.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str related_reports_title: This will list all reports for news analysis where title of related reports matches(substring match) with the queried related_reports.title.
        :param str related_reports_report_id: This will list all reports for news analysis where report_id of related reports matches with the queried related_reports.report_id.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsNewsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_news_reports_with_http_info(**kwargs)  # noqa: E501

    def get_all_news_reports_with_http_info(self, **kwargs):  # noqa: E501
        """List of all news analysis reports present in our system.  # noqa: E501

        Returns list of all the news analysis reports present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_news_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str title: This will list all the news analysis reports matching(substring match) with the queried title.
        :param str media_comment: This will list all the news analysis reports matching(substring match) with the queried media_comment.
        :param str media_outlet: This will list all the news analysis reports matching(substring match) with the queried media_outlet.
        :param str judgment: This will list all the news analysis reports matching(substring match) with the queried judgment.
        :param str analyst_comment: This will list all the news analysis reports matching(substring match) with the queried analyst_comment.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str related_reports_title: This will list all reports for news analysis where title of related reports matches(substring match) with the queried related_reports.title.
        :param str related_reports_report_id: This will list all reports for news analysis where report_id of related reports matches with the queried related_reports.report_id.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsNewsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'title',
            'media_comment',
            'media_outlet',
            'judgment',
            'analyst_comment',
            'added_after',
            'report_id',
            'related_reports_title',
            'related_reports_report_id',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_news_reports" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'media_comment' in local_var_params and local_var_params['media_comment'] is not None:  # noqa: E501
            query_params.append(('media_comment', local_var_params['media_comment']))  # noqa: E501
        if 'media_outlet' in local_var_params and local_var_params['media_outlet'] is not None:  # noqa: E501
            query_params.append(('media_outlet', local_var_params['media_outlet']))  # noqa: E501
        if 'judgment' in local_var_params and local_var_params['judgment'] is not None:  # noqa: E501
            query_params.append(('judgment', local_var_params['judgment']))  # noqa: E501
        if 'analyst_comment' in local_var_params and local_var_params['analyst_comment'] is not None:  # noqa: E501
            query_params.append(('analyst_comment', local_var_params['analyst_comment']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'report_id' in local_var_params and local_var_params['report_id'] is not None:  # noqa: E501
            query_params.append(('report_id', local_var_params['report_id']))  # noqa: E501
        if 'related_reports_title' in local_var_params and local_var_params['related_reports_title'] is not None:  # noqa: E501
            query_params.append(('related_reports.title', local_var_params['related_reports_title']))  # noqa: E501
        if 'related_reports_report_id' in local_var_params and local_var_params['related_reports_report_id'] is not None:  # noqa: E501
            query_params.append(('related_reports.report_id', local_var_params['related_reports_report_id']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/news', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsNewsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_reports(self, **kwargs):  # noqa: E501
        """List of all reports present in our system. This can be considered as vocab endpoint for reports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the reports matching(substring match) for the type specified.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_reports_with_http_info(**kwargs)  # noqa: E501

    def get_all_reports_with_http_info(self, **kwargs):  # noqa: E501
        """List of all reports present in our system. This can be considered as vocab endpoint for reports.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the reports matching(substring match) for the type specified.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsReportResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'type',
            'name',
            'report_id',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_reports" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'report_id' in local_var_params and local_var_params['report_id'] is not None:  # noqa: E501
            query_params.append(('report_id', local_var_params['report_id']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_taa_reports(self, **kwargs):  # noqa: E501
        """List of all reports of type Threat Activity Alert present in our system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_taa_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the reports matching(substring match) for the type specified.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_taa_reports_with_http_info(**kwargs)  # noqa: E501

    def get_all_taa_reports_with_http_info(self, **kwargs):  # noqa: E501
        """List of all reports of type Threat Activity Alert present in our system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_taa_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str type: This will list all the reports matching(substring match) for the type specified.
        :param str name: This will list all the objects matching(substring match) with the queried name.
        :param str report_id: This will list all the reports matching(substring match) for the report_id specified.
        :param str added_after: This will list all the objects added after queried date. The supported data format is '%Y-%m-%dT%H:%M:%S.%fZ' along with epoch time.
        :param str sort_by: This will sort objects by field specified in the sort_by. The supported fields are name, created and modified. The default sorting is by modified if sort_by query paramter is not specified.
        :param str order_by: This will arrange all objects in order specified in the order_by field. The supported values in order_by field are \"asc\" and \"desc\". The default order is ascending if order_by query paramter is not specified.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param str next: This is the pagination parameter used to retrieve next set of objects specified in limit parameter otherwise default 500 objects or in last iteration remaining all objects.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsReportResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'type',
            'name',
            'report_id',
            'added_after',
            'sort_by',
            'order_by',
            'limit',
            'next'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_taa_reports" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'report_id' in local_var_params and local_var_params['report_id'] is not None:  # noqa: E501
            query_params.append(('report_id', local_var_params['report_id']))  # noqa: E501
        if 'added_after' in local_var_params and local_var_params['added_after'] is not None:  # noqa: E501
            query_params.append(('added_after', local_var_params['added_after']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'next' in local_var_params and local_var_params['next'] is not None:  # noqa: E501
            query_params.append(('next', local_var_params['next']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/taa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trend_vocab(self, **kwargs):  # noqa: E501
        """List of all possible filter values for which we have trending data for malware and cve.  # noqa: E501

        Returns list of all possible filter values for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendVocabResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_trend_vocab_with_http_info(**kwargs)  # noqa: E501

    def get_all_trend_vocab_with_http_info(self, **kwargs):  # noqa: E501
        """List of all possible filter values for which we have trending data for malware and cve.  # noqa: E501

        Returns list of all possible filter values for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendVocabResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trend_vocab" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/vocab', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendVocabResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trend_vocab_industry_sector(self, **kwargs):  # noqa: E501
        """List of industry_sectors for which we have trending data for malware and cve.  # noqa: E501

        Returns list of industry_sectors for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab_industry_sector(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendVocabIndustrySectorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_trend_vocab_industry_sector_with_http_info(**kwargs)  # noqa: E501

    def get_all_trend_vocab_industry_sector_with_http_info(self, **kwargs):  # noqa: E501
        """List of industry_sectors for which we have trending data for malware and cve.  # noqa: E501

        Returns list of industry_sectors for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab_industry_sector_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendVocabIndustrySectorResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trend_vocab_industry_sector" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/vocab/industry_sector', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendVocabIndustrySectorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trend_vocab_region(self, **kwargs):  # noqa: E501
        """List of regions for which we have trending data for malware and cve.  # noqa: E501

        Returns list of regions for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab_region(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendVocabRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_trend_vocab_region_with_http_info(**kwargs)  # noqa: E501

    def get_all_trend_vocab_region_with_http_info(self, **kwargs):  # noqa: E501
        """List of regions for which we have trending data for malware and cve.  # noqa: E501

        Returns list of regions for which we have trending data for malware and cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trend_vocab_region_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendVocabRegionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trend_vocab_region" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/vocab/region', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendVocabRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attack_pattern_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the attack-pattern id specified in {id}.  # noqa: E501

        Details information about attack-pattern.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsAttackPatternIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_attack_pattern_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_attack_pattern_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the attack-pattern id specified in {id}.  # noqa: E501

        Details information about attack-pattern.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsAttackPatternIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attack_pattern_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_attack_pattern_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/attack-pattern/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsAttackPatternIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attack_pattern_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for attack-pattern specified in {related}.  # noqa: E501

        Industry Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsAttackPatternRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_attack_pattern_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_attack_pattern_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for attack-pattern specified in {related}.  # noqa: E501

        Industry Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsAttackPatternRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attack_pattern_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_attack_pattern_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_attack_pattern_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/attack-pattern/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsAttackPatternRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attack_pattern_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the attack-pattern id specified in {id}.  # noqa: E501

        Attack Pattern summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AttackPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_attack_pattern_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_attack_pattern_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the attack-pattern id specified in {id}.  # noqa: E501

        Attack Pattern summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attack_pattern_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AttackPattern, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attack_pattern_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_attack_pattern_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/attack-pattern/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttackPattern',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cve_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the CVE id specified in {id}.  # noqa: E501

        Details information about cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cve_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Id for which details are requested where id can be cve identifier or vulnerability object id. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsCveIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cve_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_cve_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the CVE id specified in {id}.  # noqa: E501

        Details information about cve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cve_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Id for which details are requested where id can be cve identifier or vulnerability object id. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsCveIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cve_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_cve_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/cve/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsCveIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_industry_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the industry id specified in {id}.  # noqa: E501

        Details information about industry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsIndustryIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_industry_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_industry_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the industry id specified in {id}.  # noqa: E501

        Details information about industry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsIndustryIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_industry_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_industry_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/industry/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsIndustryIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_industry_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for industry specified in {related}.  # noqa: E501

        Industry Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsIndustryRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_industry_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_industry_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for industry specified in {related}.  # noqa: E501

        Industry Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsIndustryRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_industry_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_industry_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_industry_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/industry/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsIndustryRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_industry_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the industry id specified in {id}.  # noqa: E501

        Industry summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Identity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_industry_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_industry_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the industry id specified in {id}.  # noqa: E501

        Industry summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_industry_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Identity, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_industry_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_industry_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/industry/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Identity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ioc_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the ioc id specified in {id}.  # noqa: E501

        Details information about ioc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsIocIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ioc_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_ioc_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the ioc id specified in {id}.  # noqa: E501

        Details information about ioc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsIocIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ioc_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ioc_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/ioc/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsIocIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ioc_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for ioc specified in {related}.  # noqa: E501

        Ioc Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsIocRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ioc_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_ioc_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for ioc specified in {related}.  # noqa: E501

        Ioc Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsIocRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ioc_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ioc_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_ioc_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/ioc/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsIocRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ioc_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the ioc id specified in {id}.  # noqa: E501

        Ioc summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Ioc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ioc_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_ioc_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the ioc id specified in {id}.  # noqa: E501

        Ioc summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Ioc, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ioc_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ioc_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/ioc/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ioc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_trends(self, **kwargs):  # noqa: E501
        """Top trends of each supported type.  # noqa: E501

        Returns the latest trending stats available for all supported trending collection types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_trends(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_latest_trends_with_http_info(**kwargs)  # noqa: E501

    def get_latest_trends_with_http_info(self, **kwargs):  # noqa: E501
        """Top trends of each supported type.  # noqa: E501

        Returns the latest trending stats available for all supported trending collection types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_trends_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_trends" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_trends_0(self, **kwargs):  # noqa: E501
        """Top 10 trending Malware within given date range and optionally grouped by geographical region or industry sector  # noqa: E501

        Returns top 10 trending Malware within given date range and optionally grouped by geographical region or industry sector  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_trends_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Starting date of the requested time window of trending stat of a collection type.
        :param str end_date: End date of the requested time window of trending stat of a collection type.
        :param str region: Specifies filtering criteria in terms of geographical region (ISO Country code 2 or any of [North America, Americas, MENA, Gulf Cooperation Council, Africa, Europe, Middle-East]) for trending stat of a collection type.
        :param str industry_sector: Specifies filtering criteria in terms of industry sector for trending stat of a collection type.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: MalwareTrendResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_latest_trends_0_with_http_info(**kwargs)  # noqa: E501

    def get_latest_trends_0_with_http_info(self, **kwargs):  # noqa: E501
        """Top 10 trending Malware within given date range and optionally grouped by geographical region or industry sector  # noqa: E501

        Returns top 10 trending Malware within given date range and optionally grouped by geographical region or industry sector  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_trends_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Starting date of the requested time window of trending stat of a collection type.
        :param str end_date: End date of the requested time window of trending stat of a collection type.
        :param str region: Specifies filtering criteria in terms of geographical region (ISO Country code 2 or any of [North America, Americas, MENA, Gulf Cooperation Council, Africa, Europe, Middle-East]) for trending stat of a collection type.
        :param str industry_sector: Specifies filtering criteria in terms of industry sector for trending stat of a collection type.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(MalwareTrendResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'start_date',
            'end_date',
            'region',
            'industry_sector'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_trends_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('start_date', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('end_date', local_var_params['end_date']))  # noqa: E501
        if 'region' in local_var_params and local_var_params['region'] is not None:  # noqa: E501
            query_params.append(('region', local_var_params['region']))  # noqa: E501
        if 'industry_sector' in local_var_params and local_var_params['industry_sector'] is not None:  # noqa: E501
            query_params.append(('industry_sector', local_var_params['industry_sector']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/malware', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MalwareTrendResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_location_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the location id specified in {id}.  # noqa: E501

        Details information about location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsLocationIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_location_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_location_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the location id specified in {id}.  # noqa: E501

        Details information about location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsLocationIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_location_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_location_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/location/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsLocationIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_location_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for location specified in {related}.  # noqa: E501

        Location Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsLocationRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_location_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_location_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for location specified in {related}.  # noqa: E501

        Location Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsLocationRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_location_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_location_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_location_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/location/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsLocationRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_location_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the location id specified in {id}.  # noqa: E501

        Location summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_location_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_location_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the location id specified in {id}.  # noqa: E501

        Location summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_location_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Location, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_location_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_location_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/location/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_malware_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the malware id specified in {id}.  # noqa: E501

        Details information about malware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsMalwareIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_malware_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_malware_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the malware id specified in {id}.  # noqa: E501

        Details information about malware.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsMalwareIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_malware_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_malware_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/malware/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsMalwareIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_malware_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for malware specified in {related}.  # noqa: E501

        Malware Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsMalwareRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_malware_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_malware_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for malware specified in {related}.  # noqa: E501

        Malware Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsMalwareRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_malware_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_malware_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_malware_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/malware/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsMalwareRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_malware_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the malware id specified in {id}.  # noqa: E501

        Malware summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Malware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_malware_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_malware_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the malware id specified in {id}.  # noqa: E501

        Malware summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_malware_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Malware, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_malware_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_malware_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/malware/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Malware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_news_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the news analysis report id specified in {id}.  # noqa: E501

        Details information about news analysis report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsNewsIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_news_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_news_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the news analysis report id specified in {id}.  # noqa: E501

        Details information about news analysis report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsNewsIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_news_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_news_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/news/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsNewsIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_news_related_reports(self, id, related, **kwargs):  # noqa: E501
        """Filter only related report information for news analysis report.  # noqa: E501

        Related reports details for specified news analysis report id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_related_reports(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str related: Related parameter to give only related reports for news analysis report. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsNewsRelatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_news_related_reports_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_news_related_reports_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related report information for news analysis report.  # noqa: E501

        Related reports details for specified news analysis report id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_related_reports_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str related: Related parameter to give only related reports for news analysis report. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsNewsRelatedResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_news_related_reports" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_news_related_reports`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_news_related_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/news/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsNewsRelatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the report id specified in {id}.  # noqa: E501

        Details information about report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsReportIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_report_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_report_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the report id specified in {id}.  # noqa: E501

        Details information about report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsReportIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_report_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/report/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsReportIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for report specified in {related}.  # noqa: E501

        Report Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsReportRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_report_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_report_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for report specified in {related}.  # noqa: E501

        Report Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsReportRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_report_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_report_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/report/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsReportRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the report id specified in {id}.  # noqa: E501

        Report summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_report_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_report_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the report id specified in {id}.  # noqa: E501

        Report summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Report, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_report_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/report/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taa_report_details(self, id, **kwargs):  # noqa: E501
        """Detailed information for the Threat Activity Alert report id specified in {id}.  # noqa: E501

        Details information about report of type Threat Activity Alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EndpointsReportIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_taa_report_details_with_http_info(id, **kwargs)  # noqa: E501

    def get_taa_report_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Detailed information for the Threat Activity Alert report id specified in {id}.  # noqa: E501

        Details information about report of type Threat Activity Alert.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EndpointsReportIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taa_report_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_taa_report_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/taa/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsReportIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taa_report_related(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for Report of type Threat Activity Alert specified in {related}.  # noqa: E501

        Report of type Threat Activity Alert Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsReportRelatedResponserelatedCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_taa_report_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_taa_report_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Filter only related information for Report of type Threat Activity Alert specified in {related}.  # noqa: E501

        Report of type Threat Activity Alert Related Details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str count: If count value is 'true' it will return count of related objects specified by the related parameter.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsReportRelatedResponserelatedCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taa_report_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_taa_report_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_taa_report_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/taa/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsReportRelatedResponserelatedCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taa_report_summary(self, id, **kwargs):  # noqa: E501
        """Summary for the Threat Activity Alert report id specified in {id}.  # noqa: E501

        Report of type Threat Activity Alert summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_summary(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_taa_report_summary_with_http_info(id, **kwargs)  # noqa: E501

    def get_taa_report_summary_with_http_info(self, id, **kwargs):  # noqa: E501
        """Summary for the Threat Activity Alert report id specified in {id}.  # noqa: E501

        Report of type Threat Activity Alert summary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taa_report_summary_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Report, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taa_report_summary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_taa_report_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/taa/{id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trend_actor_id(self, id, **kwargs):  # noqa: E501
        """All trending information of an actor by id  # noqa: E501

        Returns all trending information of an actor by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_actor_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str metric_confidence: Applies to all the associated object’s metrics confidence. It is used to filter associated/related metrics data of an actor by specified confidence level.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendActorIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trend_actor_id_with_http_info(id, **kwargs)  # noqa: E501

    def get_trend_actor_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """All trending information of an actor by id  # noqa: E501

        Returns all trending information of an actor by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_actor_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str metric_confidence: Applies to all the associated object’s metrics confidence. It is used to filter associated/related metrics data of an actor by specified confidence level.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendActorIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name',
            'metric_confidence'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trend_actor_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_trend_actor_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'metric_confidence' in local_var_params and local_var_params['metric_confidence'] is not None:  # noqa: E501
            query_params.append(('metric_confidence', local_var_params['metric_confidence']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/actor/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendActorIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trend_actor_related(self, id, related, **kwargs):  # noqa: E501
        """Associated trending information of related type for an actor by id  # noqa: E501

        Returns associated trending information of related type for an actor by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_actor_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumTrendActorRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents start date of metrics of related objects. When only start date is given, it will give list of related objects where start_date falls in the range of metrics start_date and end_date period.
        :param str end_date: Represents end date of metrics of related objects. When provided with start_date it would be exact match of start_date and end_date.
        :param str confidence: Applies to confidence of related object’s metrics. Used to filter related objects by specific confidence level of the metrics.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOftrendActorMalwareRelatedResponsetrendActorCveRelatedResponsetrendActorRegionTargetRelatedResponsetrendActorTargetingIndustriesRelatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trend_actor_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_trend_actor_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Associated trending information of related type for an actor by id  # noqa: E501

        Returns associated trending information of related type for an actor by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_actor_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumTrendActorRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents start date of metrics of related objects. When only start date is given, it will give list of related objects where start_date falls in the range of metrics start_date and end_date period.
        :param str end_date: Represents end date of metrics of related objects. When provided with start_date it would be exact match of start_date and end_date.
        :param str confidence: Applies to confidence of related object’s metrics. Used to filter related objects by specific confidence level of the metrics.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOftrendActorMalwareRelatedResponsetrendActorCveRelatedResponsetrendActorRegionTargetRelatedResponsetrendActorTargetingIndustriesRelatedResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name',
            'start_date',
            'end_date',
            'confidence'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trend_actor_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_trend_actor_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_trend_actor_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('start_date', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('end_date', local_var_params['end_date']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/actor/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOftrendActorMalwareRelatedResponsetrendActorCveRelatedResponsetrendActorRegionTargetRelatedResponsetrendActorTargetingIndustriesRelatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trend_region_id(self, id, **kwargs):  # noqa: E501
        """All trending information of an region by id  # noqa: E501

        Returns all trending information of an region by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_region_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendRegionIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trend_region_id_with_http_info(id, **kwargs)  # noqa: E501

    def get_trend_region_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """All trending information of an region by id  # noqa: E501

        Returns all trending information of an region by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_region_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendRegionIdResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trend_region_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_trend_region_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/region/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendRegionIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trend_region_related(self, id, related, **kwargs):  # noqa: E501
        """Associated trending information of related type for an region by id  # noqa: E501

        Returns associated trending information of related type for an region by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_region_related(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumTrendRegionRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOftrendRegionMalwareRelatedResponsetrendRegionMalwareInboundRelatedResponsetrendRegionMalwareOutboundRelatedResponsetrendRegionCveRelatedResponsetrendRegionCveInboundRelatedResponsetrendRegionCveOutboundRelatedResponsetrendRegionIndustryRelatedResponsetrendRegionTargetedIndustriesRelatedResponsetrendRegionTargetingIndustriesRelatedResponsetrendRegionActorRelatedResponsetrendRegionActorsTargetingRelatedResponsetrendRegionActorsLocatedRelatedResponsetrendRegionRegionRelatedResponsetrendRegionRegionSourceRelatedResponsetrendRegionRegionTargetRelatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trend_region_related_with_http_info(id, related, **kwargs)  # noqa: E501

    def get_trend_region_related_with_http_info(self, id, related, **kwargs):  # noqa: E501
        """Associated trending information of related type for an region by id  # noqa: E501

        Returns associated trending information of related type for an region by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trend_region_related_with_http_info(id, related, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Object id for which details are requested. (required)
        :param EnumTrendRegionRelatedValues related: Related parameter to filter specific response block. (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOftrendRegionMalwareRelatedResponsetrendRegionMalwareInboundRelatedResponsetrendRegionMalwareOutboundRelatedResponsetrendRegionCveRelatedResponsetrendRegionCveInboundRelatedResponsetrendRegionCveOutboundRelatedResponsetrendRegionIndustryRelatedResponsetrendRegionTargetedIndustriesRelatedResponsetrendRegionTargetingIndustriesRelatedResponsetrendRegionActorRelatedResponsetrendRegionActorsTargetingRelatedResponsetrendRegionActorsLocatedRelatedResponsetrendRegionRegionRelatedResponsetrendRegionRegionSourceRelatedResponsetrendRegionRegionTargetRelatedResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'related',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trend_region_related" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_trend_region_related`")  # noqa: E501
        # verify the required parameter 'related' is set
        if self.api_client.client_side_validation and ('related' not in local_var_params or  # noqa: E501
                                                        local_var_params['related'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related` when calling `get_trend_region_related`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'related' in local_var_params:
            path_params['related'] = local_var_params['related']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/region/{id}/{related}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOftrendRegionMalwareRelatedResponsetrendRegionMalwareInboundRelatedResponsetrendRegionMalwareOutboundRelatedResponsetrendRegionCveRelatedResponsetrendRegionCveInboundRelatedResponsetrendRegionCveOutboundRelatedResponsetrendRegionIndustryRelatedResponsetrendRegionTargetedIndustriesRelatedResponsetrendRegionTargetingIndustriesRelatedResponsetrendRegionActorRelatedResponsetrendRegionActorsTargetingRelatedResponsetrendRegionActorsLocatedRelatedResponsetrendRegionRegionRelatedResponsetrendRegionRegionSourceRelatedResponsetrendRegionRegionTargetRelatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trending_actor(self, **kwargs):  # noqa: E501
        """Top 10 trending actors by the timeline of recent activity  # noqa: E501

        Returns top 10 trending actors by the timeline of recent activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_actor(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents earliest date of actor’s activity time period. When only start date is given, it will give list of actors where start_date falls in the range of actor’s activity recorded.
        :param str end_date: Represents most recent date of actor’s activity time period. When provided with start_date it would be exact match of start_date and end_date.
        :param str confidence: Applies to confidence of the recent activity observed for an actor. (activity_observation.recent).
        :param str metric_confidence: Applies to all the associated object’s metrics confidence. It is used to filter actors by specified confidence level of the associated/related metrics data.
        :param str name: To get actor name exactly matching by the given name.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendActorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trending_actor_with_http_info(**kwargs)  # noqa: E501

    def get_trending_actor_with_http_info(self, **kwargs):  # noqa: E501
        """Top 10 trending actors by the timeline of recent activity  # noqa: E501

        Returns top 10 trending actors by the timeline of recent activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_actor_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents earliest date of actor’s activity time period. When only start date is given, it will give list of actors where start_date falls in the range of actor’s activity recorded.
        :param str end_date: Represents most recent date of actor’s activity time period. When provided with start_date it would be exact match of start_date and end_date.
        :param str confidence: Applies to confidence of the recent activity observed for an actor. (activity_observation.recent).
        :param str metric_confidence: Applies to all the associated object’s metrics confidence. It is used to filter actors by specified confidence level of the associated/related metrics data.
        :param str name: To get actor name exactly matching by the given name.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendActorResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'start_date',
            'end_date',
            'confidence',
            'metric_confidence',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trending_actor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('start_date', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('end_date', local_var_params['end_date']))  # noqa: E501
        if 'confidence' in local_var_params and local_var_params['confidence'] is not None:  # noqa: E501
            query_params.append(('confidence', local_var_params['confidence']))  # noqa: E501
        if 'metric_confidence' in local_var_params and local_var_params['metric_confidence'] is not None:  # noqa: E501
            query_params.append(('metric_confidence', local_var_params['metric_confidence']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/actor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendActorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trending_cve(self, **kwargs):  # noqa: E501
        """Top 5 trending CVEs within given date range and optionally grouped by industry sector  # noqa: E501

        Returns top 5 trending CVEs within given date range and optionally grouped by industry sector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_cve(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Starting date of the requested time window of trending stat of a collection type.
        :param str end_date: End date of the requested time window of trending stat of a collection type.
        :param str industry_sector: Specifies filtering criteria in terms of industry sector for trending stat of a collection type.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CveTrendResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trending_cve_with_http_info(**kwargs)  # noqa: E501

    def get_trending_cve_with_http_info(self, **kwargs):  # noqa: E501
        """Top 5 trending CVEs within given date range and optionally grouped by industry sector  # noqa: E501

        Returns top 5 trending CVEs within given date range and optionally grouped by industry sector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_cve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Starting date of the requested time window of trending stat of a collection type.
        :param str end_date: End date of the requested time window of trending stat of a collection type.
        :param str industry_sector: Specifies filtering criteria in terms of industry sector for trending stat of a collection type.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CveTrendResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'start_date',
            'end_date',
            'industry_sector'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trending_cve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('start_date', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('end_date', local_var_params['end_date']))  # noqa: E501
        if 'industry_sector' in local_var_params and local_var_params['industry_sector'] is not None:  # noqa: E501
            query_params.append(('industry_sector', local_var_params['industry_sector']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/cve', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CveTrendResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trending_region(self, **kwargs):  # noqa: E501
        """Top 10 trending regions  # noqa: E501

        Returns top 10 trending regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_region(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents earliest date of region’s activity time period. When only start date is given, it will give list of regions where start_date falls in the range of region’s activity recorded.
        :param str end_date: Represents most recent date of region’s activity time period. When provided with start_date it would be exact match of start_date and end_date.
        :param str name: To get region name exactly matching by the given name.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrendRegionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trending_region_with_http_info(**kwargs)  # noqa: E501

    def get_trending_region_with_http_info(self, **kwargs):  # noqa: E501
        """Top 10 trending regions  # noqa: E501

        Returns top 10 trending regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_region_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str start_date: Represents earliest date of region’s activity time period. When only start date is given, it will give list of regions where start_date falls in the range of region’s activity recorded.
        :param str end_date: Represents most recent date of region’s activity time period. When provided with start_date it would be exact match of start_date and end_date.
        :param str name: To get region name exactly matching by the given name.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrendRegionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'start_date',
            'end_date',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trending_region" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('start_date', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('end_date', local_var_params['end_date']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/trend/region', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendRegionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_yara_signature(self, **kwargs):  # noqa: E501
        """List of all yara signatures present in our system.  # noqa: E501

        Returns list of all the yara signatures present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_yara_signature(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str malware_id: Returns yara signature objects which are related with specified malware id.
        :param str actor_id: Returns yara signature objects which are related with specified actor id.
        :param str malware_name: Returns yara signature objects which are related with specified malware name.
        :param str actor_name: Returns yara signature objects which are related with specified actor name.
        :param str hash: Returns yara signature objects which are related with specified hash value.
        :param str count: If count value is 'true' it will return count of yara signature objects which are related with object specified by the other query parameter.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsYaraResponseyaraSignatureCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_yara_signature_with_http_info(**kwargs)  # noqa: E501

    def get_yara_signature_with_http_info(self, **kwargs):  # noqa: E501
        """List of all yara signatures present in our system.  # noqa: E501

        Returns list of all the yara signatures present in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_yara_signature_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param str malware_id: Returns yara signature objects which are related with specified malware id.
        :param str actor_id: Returns yara signature objects which are related with specified actor id.
        :param str malware_name: Returns yara signature objects which are related with specified malware name.
        :param str actor_name: Returns yara signature objects which are related with specified actor name.
        :param str hash: Returns yara signature objects which are related with specified hash value.
        :param str count: If count value is 'true' it will return count of yara signature objects which are related with object specified by the other query parameter.
        :param str limit: Limit parameter specifies the number of objects to be return in response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsYaraResponseyaraSignatureCountResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accept',
            'authorization',
            'x_app_name',
            'malware_id',
            'actor_id',
            'malware_name',
            'actor_name',
            'hash',
            'count',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_yara_signature" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'malware_id' in local_var_params and local_var_params['malware_id'] is not None:  # noqa: E501
            query_params.append(('malware_id', local_var_params['malware_id']))  # noqa: E501
        if 'actor_id' in local_var_params and local_var_params['actor_id'] is not None:  # noqa: E501
            query_params.append(('actor_id', local_var_params['actor_id']))  # noqa: E501
        if 'malware_name' in local_var_params and local_var_params['malware_name'] is not None:  # noqa: E501
            query_params.append(('malware_name', local_var_params['malware_name']))  # noqa: E501
        if 'actor_name' in local_var_params and local_var_params['actor_name'] is not None:  # noqa: E501
            query_params.append(('actor_name', local_var_params['actor_name']))  # noqa: E501
        if 'hash' in local_var_params and local_var_params['hash'] is not None:  # noqa: E501
            query_params.append(('hash', local_var_params['hash']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/yara', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsYaraResponseyaraSignatureCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_all_entities(self, unknown_base_type, **kwargs):  # noqa: E501
        """Bulk look up of Entities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_all_entities(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnyOfendpointsPostEntitiesResponseendpointsPostLocationEntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_all_entities_with_http_info(unknown_base_type, **kwargs)  # noqa: E501

    def post_all_entities_with_http_info(self, unknown_base_type, **kwargs):  # noqa: E501
        """Bulk look up of Entities.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_all_entities_with_http_info(unknown_base_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type: (required)
        :param str accept: Specifies the format in which the client would like the response.
        :param str authorization: Access token to all the FireEye Intelligence API endpoints.
        :param str x_app_name: The FireEye Intel API uses the header variable X-App-Name for customers and partners to set a user-agent on all of their API calls. This mandatory field is typically a combination of the customer or partners organization name, its application name, and its version. A typical customer X-App-Name would be 'indicators.script.xyzcompany.v1.0' or similar. The X-App-Name for customers should, at a minimum, have the calling organization name and, for partners, it is required to have the company product name and version of the integration for troubleshooting purposes.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnyOfendpointsPostEntitiesResponseendpointsPostLocationEntitiesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type',
            'accept',
            'authorization',
            'x_app_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_all_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unknown_base_type' is set
        if self.api_client.client_side_validation and ('unknown_base_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['unknown_base_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unknown_base_type` when calling `post_all_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_app_name' in local_var_params:
            header_params['X-App-Name'] = local_var_params['x_app_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnyOfendpointsPostEntitiesResponseendpointsPostLocationEntitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
