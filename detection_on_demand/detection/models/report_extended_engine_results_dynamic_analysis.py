# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from detection.configuration import Configuration


class ReportExtendedEngineResultsDynamicAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'uuid': 'str',
        'is_malicious': 'int',
        'analysis_info': 'ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo',
        'files_analyzed': 'int',
        'overall_weight': 'int'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'is_malicious': 'is_malicious',
        'analysis_info': 'analysis_info',
        'files_analyzed': 'files_analyzed',
        'overall_weight': 'overall_weight'
    }

    def __init__(self, id=None, uuid=None, is_malicious=None, analysis_info=None, files_analyzed=None, overall_weight=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsDynamicAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._uuid = None
        self._is_malicious = None
        self._analysis_info = None
        self._files_analyzed = None
        self._overall_weight = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if is_malicious is not None:
            self.is_malicious = is_malicious
        if analysis_info is not None:
            self.analysis_info = analysis_info
        if files_analyzed is not None:
            self.files_analyzed = files_analyzed
        if overall_weight is not None:
            self.overall_weight = overall_weight

    @property
    def id(self):
        """Gets the id of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        ID of the analysis job.  # noqa: E501

        :return: The id of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportExtendedEngineResultsDynamicAnalysis.

        ID of the analysis job.  # noqa: E501

        :param id: The id of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501

        UUID of the analysis job.  # noqa: E501

        :return: The uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ReportExtendedEngineResultsDynamicAnalysis.

        UUID of the analysis job.  # noqa: E501

        :param uuid: The uuid of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def is_malicious(self):
        """Gets the is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501


        :return: The is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._is_malicious

    @is_malicious.setter
    def is_malicious(self, is_malicious):
        """Sets the is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.


        :param is_malicious: The is_malicious of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """

        self._is_malicious = is_malicious

    @property
    def analysis_info(self):
        """Gets the analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501


        :return: The analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo
        """
        return self._analysis_info

    @analysis_info.setter
    def analysis_info(self, analysis_info):
        """Sets the analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.


        :param analysis_info: The analysis_info of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: ReportExtendedEngineResultsDynamicAnalysisAnalysisInfo
        """

        self._analysis_info = analysis_info

    @property
    def files_analyzed(self):
        """Gets the files_analyzed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501


        :return: The files_analyzed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._files_analyzed

    @files_analyzed.setter
    def files_analyzed(self, files_analyzed):
        """Sets the files_analyzed of this ReportExtendedEngineResultsDynamicAnalysis.


        :param files_analyzed: The files_analyzed of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """

        self._files_analyzed = files_analyzed

    @property
    def overall_weight(self):
        """Gets the overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501


        :return: The overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._overall_weight

    @overall_weight.setter
    def overall_weight(self, overall_weight):
        """Sets the overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.


        :param overall_weight: The overall_weight of this ReportExtendedEngineResultsDynamicAnalysis.  # noqa: E501
        :type: int
        """

        self._overall_weight = overall_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsDynamicAnalysis):
            return True

        return self.to_dict() != other.to_dict()
