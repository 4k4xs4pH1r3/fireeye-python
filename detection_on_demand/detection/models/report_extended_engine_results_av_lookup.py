# coding: utf-8

"""
    Detection On Demand

    FireEye offers a best-in-class virtual execution engine in many of its core products, including our Network Security, Email Security, and File Analysis solutions. Now our customers can interact with and consume those capabilities directly via a scalable and performant web service. Use the new RESTful API to submit files for malware analysis, search hash values for past analysis results, get full reports for your file submissions, and integrate into your existing toolsets and workflows.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: developers@fireeye.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from detection.configuration import Configuration


class ReportExtendedEngineResultsAvLookup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_seen': 'str',
        'last_seen': 'str',
        'signature_name': 'list[str]',
        'verdict': 'str'
    }

    attribute_map = {
        'first_seen': 'first_seen',
        'last_seen': 'last_seen',
        'signature_name': 'signature_name',
        'verdict': 'verdict'
    }

    def __init__(self, first_seen=None, last_seen=None, signature_name=None, verdict=None, local_vars_configuration=None):  # noqa: E501
        """ReportExtendedEngineResultsAvLookup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_seen = None
        self._last_seen = None
        self._signature_name = None
        self._verdict = None
        self.discriminator = None

        if first_seen is not None:
            self.first_seen = first_seen
        if last_seen is not None:
            self.last_seen = last_seen
        if signature_name is not None:
            self.signature_name = signature_name
        if verdict is not None:
            self.verdict = verdict

    @property
    def first_seen(self):
        """Gets the first_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501

        The first time this malware was observed.  # noqa: E501

        :return: The first_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :rtype: str
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this ReportExtendedEngineResultsAvLookup.

        The first time this malware was observed.  # noqa: E501

        :param first_seen: The first_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :type: str
        """

        self._first_seen = first_seen

    @property
    def last_seen(self):
        """Gets the last_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501


        :return: The last_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this ReportExtendedEngineResultsAvLookup.


        :param last_seen: The last_seen of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :type: str
        """

        self._last_seen = last_seen

    @property
    def signature_name(self):
        """Gets the signature_name of this ReportExtendedEngineResultsAvLookup.  # noqa: E501


        :return: The signature_name of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :rtype: list[str]
        """
        return self._signature_name

    @signature_name.setter
    def signature_name(self, signature_name):
        """Sets the signature_name of this ReportExtendedEngineResultsAvLookup.


        :param signature_name: The signature_name of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :type: list[str]
        """

        self._signature_name = signature_name

    @property
    def verdict(self):
        """Gets the verdict of this ReportExtendedEngineResultsAvLookup.  # noqa: E501

        av_lookup's verdict for this file.  # noqa: E501

        :return: The verdict of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :rtype: str
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this ReportExtendedEngineResultsAvLookup.

        av_lookup's verdict for this file.  # noqa: E501

        :param verdict: The verdict of this ReportExtendedEngineResultsAvLookup.  # noqa: E501
        :type: str
        """

        self._verdict = verdict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExtendedEngineResultsAvLookup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportExtendedEngineResultsAvLookup):
            return True

        return self.to_dict() != other.to_dict()
