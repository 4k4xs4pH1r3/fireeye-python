# coding: utf-8

"""
    Helix API Documentation

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject68(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'classification': 'int',
        'assertions': 'list[str]',
        'message': 'str',
        'kill_chain': 'list[str]',
        'risk': 'str',
        'confidence': 'str',
        'alert_type': 'str',
        'tuning_events_threshold': 'int',
        'severity': 'str',
        'info_links': 'list[str]',
        'id': 'str',
        'events_threshold': 'int',
        'customer_id': 'str',
        'is_hidden': 'bool',
        'is_default': 'bool',
        'description': 'str',
        'tags': 'list[str]',
        'deleted': 'bool',
        'disabled_reason': 'str',
        'distinguishers': 'list[str]',
        'seconds_threshold': 'int',
        'dependencies': 'list[str]',
        'search': 'str',
        'tuning_search': 'str',
        'tuning_seconds_threshold': 'int',
        'type': 'str',
        'queues': 'list[str]',
        'rule_pack': 'str',
        'enabled': 'bool',
        'source_revision': 'int',
        'output': 'list[str]',
        'threat_type': 'int'
    }

    attribute_map = {
        'classification': 'classification',
        'assertions': 'assertions',
        'message': 'message',
        'kill_chain': 'killChain',
        'risk': 'risk',
        'confidence': 'confidence',
        'alert_type': 'alertType',
        'tuning_events_threshold': 'tuningEventsThreshold',
        'severity': 'severity',
        'info_links': 'infoLinks',
        'id': 'id',
        'events_threshold': 'eventsThreshold',
        'customer_id': 'customer_id',
        'is_hidden': 'isHidden',
        'is_default': 'isDefault',
        'description': 'description',
        'tags': 'tags',
        'deleted': 'deleted',
        'disabled_reason': 'disabledReason',
        'distinguishers': 'distinguishers',
        'seconds_threshold': 'secondsThreshold',
        'dependencies': 'dependencies',
        'search': 'search',
        'tuning_search': 'tuningSearch',
        'tuning_seconds_threshold': 'tuningSecondsThreshold',
        'type': 'type',
        'queues': 'queues',
        'rule_pack': '_rulePack',
        'enabled': 'enabled',
        'source_revision': 'sourceRevision',
        'output': 'output',
        'threat_type': 'threatType'
    }

    def __init__(self, classification=None, assertions=None, message=None, kill_chain=None, risk=None, confidence=None, alert_type=None, tuning_events_threshold=None, severity=None, info_links=None, id=None, events_threshold=None, customer_id=None, is_hidden=None, is_default=None, description=None, tags=None, deleted=None, disabled_reason=None, distinguishers=None, seconds_threshold=None, dependencies=None, search=None, tuning_search=None, tuning_seconds_threshold=None, type=None, queues=None, rule_pack=None, enabled=None, source_revision=None, output=None, threat_type=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject68 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._classification = None
        self._assertions = None
        self._message = None
        self._kill_chain = None
        self._risk = None
        self._confidence = None
        self._alert_type = None
        self._tuning_events_threshold = None
        self._severity = None
        self._info_links = None
        self._id = None
        self._events_threshold = None
        self._customer_id = None
        self._is_hidden = None
        self._is_default = None
        self._description = None
        self._tags = None
        self._deleted = None
        self._disabled_reason = None
        self._distinguishers = None
        self._seconds_threshold = None
        self._dependencies = None
        self._search = None
        self._tuning_search = None
        self._tuning_seconds_threshold = None
        self._type = None
        self._queues = None
        self._rule_pack = None
        self._enabled = None
        self._source_revision = None
        self._output = None
        self._threat_type = None
        self.discriminator = None

        if classification is not None:
            self.classification = classification
        if assertions is not None:
            self.assertions = assertions
        self.message = message
        if kill_chain is not None:
            self.kill_chain = kill_chain
        if risk is not None:
            self.risk = risk
        self.confidence = confidence
        if alert_type is not None:
            self.alert_type = alert_type
        if tuning_events_threshold is not None:
            self.tuning_events_threshold = tuning_events_threshold
        self.severity = severity
        if info_links is not None:
            self.info_links = info_links
        if id is not None:
            self.id = id
        self.events_threshold = events_threshold
        if customer_id is not None:
            self.customer_id = customer_id
        if is_hidden is not None:
            self.is_hidden = is_hidden
        if is_default is not None:
            self.is_default = is_default
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if deleted is not None:
            self.deleted = deleted
        if disabled_reason is not None:
            self.disabled_reason = disabled_reason
        if distinguishers is not None:
            self.distinguishers = distinguishers
        self.seconds_threshold = seconds_threshold
        if dependencies is not None:
            self.dependencies = dependencies
        self.search = search
        if tuning_search is not None:
            self.tuning_search = tuning_search
        if tuning_seconds_threshold is not None:
            self.tuning_seconds_threshold = tuning_seconds_threshold
        if type is not None:
            self.type = type
        if queues is not None:
            self.queues = queues
        self.rule_pack = rule_pack
        if enabled is not None:
            self.enabled = enabled
        if source_revision is not None:
            self.source_revision = source_revision
        if output is not None:
            self.output = output
        if threat_type is not None:
            self.threat_type = threat_type

    @property
    def classification(self):
        """Gets the classification of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The classification of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this InlineObject68.

          # noqa: E501

        :param classification: The classification of this InlineObject68.  # noqa: E501
        :type: int
        """

        self._classification = classification

    @property
    def assertions(self):
        """Gets the assertions of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The assertions of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._assertions

    @assertions.setter
    def assertions(self, assertions):
        """Sets the assertions of this InlineObject68.

          # noqa: E501

        :param assertions: The assertions of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._assertions = assertions

    @property
    def message(self):
        """Gets the message of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The message of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineObject68.

          # noqa: E501

        :param message: The message of this InlineObject68.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def kill_chain(self):
        """Gets the kill_chain of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The kill_chain of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._kill_chain

    @kill_chain.setter
    def kill_chain(self, kill_chain):
        """Sets the kill_chain of this InlineObject68.

          # noqa: E501

        :param kill_chain: The kill_chain of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._kill_chain = kill_chain

    @property
    def risk(self):
        """Gets the risk of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The risk of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this InlineObject68.

          # noqa: E501

        :param risk: The risk of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._risk = risk

    @property
    def confidence(self):
        """Gets the confidence of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The confidence of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this InlineObject68.

          # noqa: E501

        :param confidence: The confidence of this InlineObject68.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and confidence is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must not be `None`")  # noqa: E501

        self._confidence = confidence

    @property
    def alert_type(self):
        """Gets the alert_type of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The alert_type of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this InlineObject68.

          # noqa: E501

        :param alert_type: The alert_type of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._alert_type = alert_type

    @property
    def tuning_events_threshold(self):
        """Gets the tuning_events_threshold of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The tuning_events_threshold of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._tuning_events_threshold

    @tuning_events_threshold.setter
    def tuning_events_threshold(self, tuning_events_threshold):
        """Sets the tuning_events_threshold of this InlineObject68.

          # noqa: E501

        :param tuning_events_threshold: The tuning_events_threshold of this InlineObject68.  # noqa: E501
        :type: int
        """

        self._tuning_events_threshold = tuning_events_threshold

    @property
    def severity(self):
        """Gets the severity of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The severity of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InlineObject68.

          # noqa: E501

        :param severity: The severity of this InlineObject68.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def info_links(self):
        """Gets the info_links of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The info_links of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._info_links

    @info_links.setter
    def info_links(self, info_links):
        """Sets the info_links of this InlineObject68.

          # noqa: E501

        :param info_links: The info_links of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._info_links = info_links

    @property
    def id(self):
        """Gets the id of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The id of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineObject68.

          # noqa: E501

        :param id: The id of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def events_threshold(self):
        """Gets the events_threshold of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The events_threshold of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._events_threshold

    @events_threshold.setter
    def events_threshold(self, events_threshold):
        """Sets the events_threshold of this InlineObject68.

          # noqa: E501

        :param events_threshold: The events_threshold of this InlineObject68.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and events_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `events_threshold`, must not be `None`")  # noqa: E501

        self._events_threshold = events_threshold

    @property
    def customer_id(self):
        """Gets the customer_id of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The customer_id of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InlineObject68.

          # noqa: E501

        :param customer_id: The customer_id of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def is_hidden(self):
        """Gets the is_hidden of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The is_hidden of this InlineObject68.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this InlineObject68.

          # noqa: E501

        :param is_hidden: The is_hidden of this InlineObject68.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_default(self):
        """Gets the is_default of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The is_default of this InlineObject68.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this InlineObject68.

          # noqa: E501

        :param is_default: The is_default of this InlineObject68.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def description(self):
        """Gets the description of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The description of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineObject68.

          # noqa: E501

        :param description: The description of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The tags of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineObject68.

          # noqa: E501

        :param tags: The tags of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def deleted(self):
        """Gets the deleted of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The deleted of this InlineObject68.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this InlineObject68.

          # noqa: E501

        :param deleted: The deleted of this InlineObject68.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The disabled_reason of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this InlineObject68.

          # noqa: E501

        :param disabled_reason: The disabled_reason of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._disabled_reason = disabled_reason

    @property
    def distinguishers(self):
        """Gets the distinguishers of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The distinguishers of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._distinguishers

    @distinguishers.setter
    def distinguishers(self, distinguishers):
        """Sets the distinguishers of this InlineObject68.

          # noqa: E501

        :param distinguishers: The distinguishers of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._distinguishers = distinguishers

    @property
    def seconds_threshold(self):
        """Gets the seconds_threshold of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The seconds_threshold of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._seconds_threshold

    @seconds_threshold.setter
    def seconds_threshold(self, seconds_threshold):
        """Sets the seconds_threshold of this InlineObject68.

          # noqa: E501

        :param seconds_threshold: The seconds_threshold of this InlineObject68.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and seconds_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `seconds_threshold`, must not be `None`")  # noqa: E501

        self._seconds_threshold = seconds_threshold

    @property
    def dependencies(self):
        """Gets the dependencies of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The dependencies of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this InlineObject68.

          # noqa: E501

        :param dependencies: The dependencies of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def search(self):
        """Gets the search of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The search of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this InlineObject68.

          # noqa: E501

        :param search: The search of this InlineObject68.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and search is None:  # noqa: E501
            raise ValueError("Invalid value for `search`, must not be `None`")  # noqa: E501

        self._search = search

    @property
    def tuning_search(self):
        """Gets the tuning_search of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The tuning_search of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._tuning_search

    @tuning_search.setter
    def tuning_search(self, tuning_search):
        """Sets the tuning_search of this InlineObject68.

          # noqa: E501

        :param tuning_search: The tuning_search of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._tuning_search = tuning_search

    @property
    def tuning_seconds_threshold(self):
        """Gets the tuning_seconds_threshold of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The tuning_seconds_threshold of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._tuning_seconds_threshold

    @tuning_seconds_threshold.setter
    def tuning_seconds_threshold(self, tuning_seconds_threshold):
        """Sets the tuning_seconds_threshold of this InlineObject68.

          # noqa: E501

        :param tuning_seconds_threshold: The tuning_seconds_threshold of this InlineObject68.  # noqa: E501
        :type: int
        """

        self._tuning_seconds_threshold = tuning_seconds_threshold

    @property
    def type(self):
        """Gets the type of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The type of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineObject68.

          # noqa: E501

        :param type: The type of this InlineObject68.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def queues(self):
        """Gets the queues of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The queues of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """Sets the queues of this InlineObject68.

          # noqa: E501

        :param queues: The queues of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._queues = queues

    @property
    def rule_pack(self):
        """Gets the rule_pack of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The rule_pack of this InlineObject68.  # noqa: E501
        :rtype: str
        """
        return self._rule_pack

    @rule_pack.setter
    def rule_pack(self, rule_pack):
        """Sets the rule_pack of this InlineObject68.

          # noqa: E501

        :param rule_pack: The rule_pack of this InlineObject68.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rule_pack is None:  # noqa: E501
            raise ValueError("Invalid value for `rule_pack`, must not be `None`")  # noqa: E501

        self._rule_pack = rule_pack

    @property
    def enabled(self):
        """Gets the enabled of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The enabled of this InlineObject68.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineObject68.

          # noqa: E501

        :param enabled: The enabled of this InlineObject68.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def source_revision(self):
        """Gets the source_revision of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The source_revision of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._source_revision

    @source_revision.setter
    def source_revision(self, source_revision):
        """Sets the source_revision of this InlineObject68.

          # noqa: E501

        :param source_revision: The source_revision of this InlineObject68.  # noqa: E501
        :type: int
        """

        self._source_revision = source_revision

    @property
    def output(self):
        """Gets the output of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The output of this InlineObject68.  # noqa: E501
        :rtype: list[str]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this InlineObject68.

          # noqa: E501

        :param output: The output of this InlineObject68.  # noqa: E501
        :type: list[str]
        """

        self._output = output

    @property
    def threat_type(self):
        """Gets the threat_type of this InlineObject68.  # noqa: E501

          # noqa: E501

        :return: The threat_type of this InlineObject68.  # noqa: E501
        :rtype: int
        """
        return self._threat_type

    @threat_type.setter
    def threat_type(self, threat_type):
        """Sets the threat_type of this InlineObject68.

          # noqa: E501

        :param threat_type: The threat_type of this InlineObject68.  # noqa: E501
        :type: int
        """

        self._threat_type = threat_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject68):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject68):
            return True

        return self.to_dict() != other.to_dict()
